
DFMsdio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  0800eb88  0800eb88  0001eb88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4dc  0800f4dc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4dc  0800f4dc  0001f4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4e4  0800f4e4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4e4  0800f4e4  0001f4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4e8  0800f4e8  0001f4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f4ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c8  200001f0  0800f6d8  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200012b8  0800f6d8  000212b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026e1b  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000460d  00000000  00000000  00047037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  0004b648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001680  00000000  00000000  0004ce38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee0f  00000000  00000000  0004e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a1b  00000000  00000000  0006d2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cc45  00000000  00000000  0008ece2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b927  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074a8  00000000  00000000  0012b97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800eb6c 	.word	0x0800eb6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800eb6c 	.word	0x0800eb6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <__io_putchar>:
float mapArduino(float val, float I_Min, float I_Max, float O_Min, float O_Max) {
    return (((val - I_Min) * ((O_Max - O_Min) / (I_Max - I_Min))) + O_Min);
}

PUTCHAR_PROTOTYPE
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8000eb8:	1d39      	adds	r1, r7, #4
 8000eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <__io_putchar+0x20>)
 8000ec2:	f004 fc7a 	bl	80057ba <HAL_UART_Transmit>

    return ch;
 8000ec6:	687b      	ldr	r3, [r7, #4]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000dc8 	.word	0x20000dc8

08000ed4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <MX_DMA_Init+0x4c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <MX_DMA_Init+0x4c>)
 8000ee4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <MX_DMA_Init+0x4c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	203b      	movs	r0, #59	; 0x3b
 8000efc:	f001 f8e7 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f00:	203b      	movs	r0, #59	; 0x3b
 8000f02:	f001 f900 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2045      	movs	r0, #69	; 0x45
 8000f0c:	f001 f8df 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f10:	2045      	movs	r0, #69	; 0x45
 8000f12:	f001 f8f8 	bl	8002106 <HAL_NVIC_EnableIRQ>

}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b40      	ldr	r3, [pc, #256]	; (8001040 <MX_GPIO_Init+0x11c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a3f      	ldr	r2, [pc, #252]	; (8001040 <MX_GPIO_Init+0x11c>)
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <MX_GPIO_Init+0x11c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b39      	ldr	r3, [pc, #228]	; (8001040 <MX_GPIO_Init+0x11c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a38      	ldr	r2, [pc, #224]	; (8001040 <MX_GPIO_Init+0x11c>)
 8000f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <MX_GPIO_Init+0x11c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b32      	ldr	r3, [pc, #200]	; (8001040 <MX_GPIO_Init+0x11c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a31      	ldr	r2, [pc, #196]	; (8001040 <MX_GPIO_Init+0x11c>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <MX_GPIO_Init+0x11c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <MX_GPIO_Init+0x11c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a2a      	ldr	r2, [pc, #168]	; (8001040 <MX_GPIO_Init+0x11c>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <MX_GPIO_Init+0x11c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, red_Pin|green_Pin|blue_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	210e      	movs	r1, #14
 8000fae:	4825      	ldr	r0, [pc, #148]	; (8001044 <MX_GPIO_Init+0x120>)
 8000fb0:	f001 fe56 	bl	8002c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ld2_GPIO_Port, Ld2_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2120      	movs	r1, #32
 8000fb8:	4823      	ldr	r0, [pc, #140]	; (8001048 <MX_GPIO_Init+0x124>)
 8000fba:	f001 fe51 	bl	8002c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	4822      	ldr	r0, [pc, #136]	; (800104c <MX_GPIO_Init+0x128>)
 8000fc4:	f001 fe4c 	bl	8002c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4819      	ldr	r0, [pc, #100]	; (8001044 <MX_GPIO_Init+0x120>)
 8000fe0:	f001 fcba 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = red_Pin|green_Pin|blue_Pin;
 8000fe4:	230e      	movs	r3, #14
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4812      	ldr	r0, [pc, #72]	; (8001044 <MX_GPIO_Init+0x120>)
 8000ffc:	f001 fcac 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Ld2_Pin;
 8001000:	2320      	movs	r3, #32
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Ld2_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	480c      	ldr	r0, [pc, #48]	; (8001048 <MX_GPIO_Init+0x124>)
 8001018:	f001 fc9e 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800101c:	2302      	movs	r3, #2
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <MX_GPIO_Init+0x128>)
 8001034:	f001 fc90 	bl	8002958 <HAL_GPIO_Init>

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020800 	.word	0x40020800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020400 	.word	0x40020400

08001050 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <MX_I2C1_Init+0x54>)
 8001058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_I2C1_Init+0x50>)
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <MX_I2C1_Init+0x58>)
 800105e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_I2C1_Init+0x50>)
 800106e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001072:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_I2C1_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_I2C1_Init+0x50>)
 800108e:	f001 fe1b 	bl	8002cc8 <HAL_I2C_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001098:	f000 fa2c 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000b60 	.word	0x20000b60
 80010a4:	40005400 	.word	0x40005400
 80010a8:	00061a80 	.word	0x00061a80

080010ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a19      	ldr	r2, [pc, #100]	; (8001130 <HAL_I2C_MspInit+0x84>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d12b      	bne.n	8001126 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_I2C_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_I2C_MspInit+0x88>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_I2C_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ea:	23c0      	movs	r3, #192	; 0xc0
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ee:	2312      	movs	r3, #18
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010fa:	2304      	movs	r3, #4
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <HAL_I2C_MspInit+0x8c>)
 8001106:	f001 fc27 	bl	8002958 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_I2C_MspInit+0x88>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_I2C_MspInit+0x88>)
 8001114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_I2C_MspInit+0x88>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40005400 	.word	0x40005400
 8001134:	40023800 	.word	0x40023800
 8001138:	40020400 	.word	0x40020400

0800113c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001140:	f3bf 8f4f 	dsb	sy
}
 8001144:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <__NVIC_SystemReset+0x24>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800114e:	4904      	ldr	r1, [pc, #16]	; (8001160 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_SystemReset+0x28>)
 8001152:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001154:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001156:	f3bf 8f4f 	dsb	sy
}
 800115a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <__NVIC_SystemReset+0x20>
 8001160:	e000ed00 	.word	0xe000ed00
 8001164:	05fa0004 	.word	0x05fa0004

08001168 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d10c      	bne.n	8001194 <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
    	i++;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001182:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(GPIOC, red_Pin);
 8001184:	2102      	movs	r1, #2
 8001186:	480c      	ldr	r0, [pc, #48]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001188:	f001 fd83 	bl	8002c92 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIOC, green_Pin);
 800118c:	2104      	movs	r1, #4
 800118e:	480a      	ldr	r0, [pc, #40]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001190:	f001 fd7f 	bl	8002c92 <HAL_GPIO_TogglePin>
        //printf("time : ");
        //printf("%ld\r\n", millis());
        //printf("GPIO_PIN_RED = %d, SysTick = %ld\r\n", HAL_GPIO_ReadPin(GPIOC, red_Pin), HAL_GetTick());
        //printf("GPIO_PIN_Green = %d, SysTick = %ld\r\n", HAL_GPIO_ReadPin(GPIOC, green_Pin), HAL_GetTick());
    }
    if (i > 5) { flag = true; i=0; }
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b05      	cmp	r3, #5
 800119a:	dd05      	ble.n	80011a8 <HAL_TIM_PeriodElapsedCallback+0x40>
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x54>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40000400 	.word	0x40000400
 80011b4:	200006b4 	.word	0x200006b4
 80011b8:	40020800 	.word	0x40020800
 80011bc:	200006b0 	.word	0x200006b0

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c6:	f000 fe11 	bl	8001dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ca:	f000 f921 	bl	8001410 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ce:	f7ff fea9 	bl	8000f24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011d2:	f000 fccb 	bl	8001b6c <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 80011d6:	f000 f993 	bl	8001500 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 80011da:	f000 fc9d 	bl	8001b18 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80011de:	f000 fcef 	bl	8001bc0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80011e2:	f005 ff79 	bl	80070d8 <MX_FATFS_Init>
  MX_DMA_Init();
 80011e6:	f7ff fe75 	bl	8000ed4 <MX_DMA_Init>
  MX_I2C1_Init();
 80011ea:	f7ff ff31 	bl	8001050 <MX_I2C1_Init>
  MX_TIM3_Init();
 80011ee:	f000 fc1d 	bl	8001a2c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80011f2:	486c      	ldr	r0, [pc, #432]	; (80013a4 <main+0x1e4>)
 80011f4:	f003 fe9e 	bl	8004f34 <HAL_TIM_Base_Start_IT>

   delay(100);
 80011f8:	2064      	movs	r0, #100	; 0x64
 80011fa:	f000 fe69 	bl	8001ed0 <HAL_Delay>
   if(f_mount(&myFatFS, SDPath, 1) == FR_OK)
 80011fe:	2201      	movs	r2, #1
 8001200:	4969      	ldr	r1, [pc, #420]	; (80013a8 <main+0x1e8>)
 8001202:	486a      	ldr	r0, [pc, #424]	; (80013ac <main+0x1ec>)
 8001204:	f009 fc6c 	bl	800aae0 <f_mount>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	bf0c      	ite	eq
 800120e:	2301      	moveq	r3, #1
 8001210:	2300      	movne	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80b3 	beq.w	8001380 <main+0x1c0>
   {
 	  printf("SD Mount 'Success'\r\n");
 800121a:	4865      	ldr	r0, [pc, #404]	; (80013b0 <main+0x1f0>)
 800121c:	f00b fc36 	bl	800ca8c <puts>
 	  fr = f_getfree("", &fre_clust, &fs);
 8001220:	4a64      	ldr	r2, [pc, #400]	; (80013b4 <main+0x1f4>)
 8001222:	4965      	ldr	r1, [pc, #404]	; (80013b8 <main+0x1f8>)
 8001224:	4865      	ldr	r0, [pc, #404]	; (80013bc <main+0x1fc>)
 8001226:	f00a fa53 	bl	800b6d0 <f_getfree>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <main+0x200>)
 8001230:	701a      	strb	r2, [r3, #0]
 	    /* Get total sectors and free sectors */
 	    tot_sect = (fs->n_fatent - 2) * fs->csize;
 8001232:	4b60      	ldr	r3, [pc, #384]	; (80013b4 <main+0x1f4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	3b02      	subs	r3, #2
 800123a:	4a5e      	ldr	r2, [pc, #376]	; (80013b4 <main+0x1f4>)
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	8952      	ldrh	r2, [r2, #10]
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	4a5f      	ldr	r2, [pc, #380]	; (80013c4 <main+0x204>)
 8001246:	6013      	str	r3, [r2, #0]
 	    fre_sect = fre_clust * fs->csize;
 8001248:	4b5a      	ldr	r3, [pc, #360]	; (80013b4 <main+0x1f4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	895b      	ldrh	r3, [r3, #10]
 800124e:	461a      	mov	r2, r3
 8001250:	4b59      	ldr	r3, [pc, #356]	; (80013b8 <main+0x1f8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	fb03 f302 	mul.w	r3, r3, r2
 8001258:	4a5b      	ldr	r2, [pc, #364]	; (80013c8 <main+0x208>)
 800125a:	6013      	str	r3, [r2, #0]
 	    /* Print the free space (assuming 512 bytes/sector) */
 	    printf("SD card stauts : %lu MB total drive space.\r\n", (tot_sect / 2)/997);
 800125c:	4b59      	ldr	r3, [pc, #356]	; (80013c4 <main+0x204>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	4a5a      	ldr	r2, [pc, #360]	; (80013cc <main+0x20c>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	0a5b      	lsrs	r3, r3, #9
 800126a:	4619      	mov	r1, r3
 800126c:	4858      	ldr	r0, [pc, #352]	; (80013d0 <main+0x210>)
 800126e:	f00b fb87 	bl	800c980 <iprintf>
 	    printf("Remaining space : %lu MB available.\r\n", (fre_sect / 2)/997);
 8001272:	4b55      	ldr	r3, [pc, #340]	; (80013c8 <main+0x208>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	085b      	lsrs	r3, r3, #1
 8001278:	4a54      	ldr	r2, [pc, #336]	; (80013cc <main+0x20c>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0a5b      	lsrs	r3, r3, #9
 8001280:	4619      	mov	r1, r3
 8001282:	4854      	ldr	r0, [pc, #336]	; (80013d4 <main+0x214>)
 8001284:	f00b fb7c 	bl	800c980 <iprintf>
 //	    if (((fre_sect/2)/997) < 10)
 //	    {
 //			용량 부족시 삭제하는 루틴 만들기
 //	    }

 	  for (unsigned int k = 0; k < 100000; k++)
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a52      	ldr	r2, [pc, #328]	; (80013d8 <main+0x218>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d865      	bhi.n	8001360 <main+0x1a0>
 	  {
 		Filename[3] = k / 10000 + '0'; //만자리
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a51      	ldr	r2, [pc, #324]	; (80013dc <main+0x21c>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	0b5b      	lsrs	r3, r3, #13
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	3330      	adds	r3, #48	; 0x30
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b4e      	ldr	r3, [pc, #312]	; (80013e0 <main+0x220>)
 80012a6:	70da      	strb	r2, [r3, #3]
 		Filename[4] = ((k % 10000) / 1000) + '0';//천자리
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	4b4c      	ldr	r3, [pc, #304]	; (80013dc <main+0x21c>)
 80012ac:	fba3 1302 	umull	r1, r3, r3, r2
 80012b0:	0b5b      	lsrs	r3, r3, #13
 80012b2:	f242 7110 	movw	r1, #10000	; 0x2710
 80012b6:	fb01 f303 	mul.w	r3, r1, r3
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	4a49      	ldr	r2, [pc, #292]	; (80013e4 <main+0x224>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	099b      	lsrs	r3, r3, #6
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	3330      	adds	r3, #48	; 0x30
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b45      	ldr	r3, [pc, #276]	; (80013e0 <main+0x220>)
 80012cc:	711a      	strb	r2, [r3, #4]
 		Filename[5] = ((k % 1000) / 100) + '0';//백자리
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <main+0x224>)
 80012d2:	fba3 1302 	umull	r1, r3, r3, r2
 80012d6:	099b      	lsrs	r3, r3, #6
 80012d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012dc:	fb01 f303 	mul.w	r3, r1, r3
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	4a41      	ldr	r2, [pc, #260]	; (80013e8 <main+0x228>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	095b      	lsrs	r3, r3, #5
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	3330      	adds	r3, #48	; 0x30
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <main+0x220>)
 80012f2:	715a      	strb	r2, [r3, #5]
 		Filename[6] = ((k % 100) / 10) + '0'; //십자리
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <main+0x228>)
 80012f8:	fba3 1302 	umull	r1, r3, r3, r2
 80012fc:	095b      	lsrs	r3, r3, #5
 80012fe:	2164      	movs	r1, #100	; 0x64
 8001300:	fb01 f303 	mul.w	r3, r1, r3
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	4a39      	ldr	r2, [pc, #228]	; (80013ec <main+0x22c>)
 8001308:	fba2 2303 	umull	r2, r3, r2, r3
 800130c:	08db      	lsrs	r3, r3, #3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	3330      	adds	r3, #48	; 0x30
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <main+0x220>)
 8001316:	719a      	strb	r2, [r3, #6]
 		Filename[7] = k % 10 + '0'; //일자리
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4b34      	ldr	r3, [pc, #208]	; (80013ec <main+0x22c>)
 800131c:	fba3 2301 	umull	r2, r3, r3, r1
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	1aca      	subs	r2, r1, r3
 800132c:	b2d3      	uxtb	r3, r2
 800132e:	3330      	adds	r3, #48	; 0x30
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <main+0x220>)
 8001334:	71da      	strb	r2, [r3, #7]
 		delay(1);
 8001336:	2001      	movs	r0, #1
 8001338:	f000 fdca 	bl	8001ed0 <HAL_Delay>
 		fr = f_open(&myFile, Filename, FA_WRITE | FA_CREATE_NEW);
 800133c:	2206      	movs	r2, #6
 800133e:	4928      	ldr	r1, [pc, #160]	; (80013e0 <main+0x220>)
 8001340:	482b      	ldr	r0, [pc, #172]	; (80013f0 <main+0x230>)
 8001342:	f009 fc13 	bl	800ab6c <f_open>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <main+0x200>)
 800134c:	701a      	strb	r2, [r3, #0]
 		if (fr == FR_OK)
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <main+0x200>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <main+0x19e>
 	  for (unsigned int k = 0; k < 100000; k++)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3301      	adds	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	e796      	b.n	800128c <main+0xcc>
 		{
 			break;
 800135e:	bf00      	nop
 		}
 	  }
 	  printf("Logging to : ");
 8001360:	4824      	ldr	r0, [pc, #144]	; (80013f4 <main+0x234>)
 8001362:	f00b fb0d 	bl	800c980 <iprintf>
 	  printf("%s\r\n", Filename);
 8001366:	491e      	ldr	r1, [pc, #120]	; (80013e0 <main+0x220>)
 8001368:	4823      	ldr	r0, [pc, #140]	; (80013f8 <main+0x238>)
 800136a:	f00b fb09 	bl	800c980 <iprintf>
 	  f_printf(&myFile, "%s", "First Boot");
 800136e:	4a23      	ldr	r2, [pc, #140]	; (80013fc <main+0x23c>)
 8001370:	4923      	ldr	r1, [pc, #140]	; (8001400 <main+0x240>)
 8001372:	481f      	ldr	r0, [pc, #124]	; (80013f0 <main+0x230>)
 8001374:	f00a fb26 	bl	800b9c4 <f_printf>
 	  f_close(&myFile);
 8001378:	481d      	ldr	r0, [pc, #116]	; (80013f0 <main+0x230>)
 800137a:	f00a f97f 	bl	800b67c <f_close>
 800137e:	e004      	b.n	800138a <main+0x1ca>
   }
   else { printf("SD Mount 'Failed'\r\n"); NVIC_SystemReset(); }
 8001380:	4820      	ldr	r0, [pc, #128]	; (8001404 <main+0x244>)
 8001382:	f00b fb83 	bl	800ca8c <puts>
 8001386:	f7ff fed9 	bl	800113c <__NVIC_SystemReset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag == true) {
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <main+0x248>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d1fb      	bne.n	800138a <main+0x1ca>
	 	      //printf("flag : ");
	 	      //printf("%d\r\n", flag);
	 		  HAL_GPIO_TogglePin(Ld2_GPIO_Port, Ld2_Pin);
 8001392:	2120      	movs	r1, #32
 8001394:	481d      	ldr	r0, [pc, #116]	; (800140c <main+0x24c>)
 8001396:	f001 fc7c 	bl	8002c92 <HAL_GPIO_TogglePin>
	 		  flag = false;
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <main+0x248>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
	  if (flag == true) {
 80013a0:	e7f3      	b.n	800138a <main+0x1ca>
 80013a2:	bf00      	nop
 80013a4:	20000cf8 	.word	0x20000cf8
 80013a8:	20000e14 	.word	0x20000e14
 80013ac:	2000020c 	.word	0x2000020c
 80013b0:	0800eb88 	.word	0x0800eb88
 80013b4:	20000444 	.word	0x20000444
 80013b8:	200006a4 	.word	0x200006a4
 80013bc:	0800eb9c 	.word	0x0800eb9c
 80013c0:	200006a0 	.word	0x200006a0
 80013c4:	200006ac 	.word	0x200006ac
 80013c8:	200006a8 	.word	0x200006a8
 80013cc:	837765f1 	.word	0x837765f1
 80013d0:	0800eba0 	.word	0x0800eba0
 80013d4:	0800ebd0 	.word	0x0800ebd0
 80013d8:	0001869f 	.word	0x0001869f
 80013dc:	d1b71759 	.word	0xd1b71759
 80013e0:	20000000 	.word	0x20000000
 80013e4:	10624dd3 	.word	0x10624dd3
 80013e8:	51eb851f 	.word	0x51eb851f
 80013ec:	cccccccd 	.word	0xcccccccd
 80013f0:	20000448 	.word	0x20000448
 80013f4:	0800ebf8 	.word	0x0800ebf8
 80013f8:	0800ec08 	.word	0x0800ec08
 80013fc:	0800ec10 	.word	0x0800ec10
 8001400:	0800ec1c 	.word	0x0800ec1c
 8001404:	0800ec20 	.word	0x0800ec20
 8001408:	200006b0 	.word	0x200006b0
 800140c:	40020000 	.word	0x40020000

08001410 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b094      	sub	sp, #80	; 0x50
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	2230      	movs	r2, #48	; 0x30
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f00a fe3c 	bl	800c09c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <_Z18SystemClock_Configv+0xdc>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a2b      	ldr	r2, [pc, #172]	; (80014ec <_Z18SystemClock_Configv+0xdc>)
 800143e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <_Z18SystemClock_Configv+0xdc>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <_Z18SystemClock_Configv+0xe0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <_Z18SystemClock_Configv+0xe0>)
 800145a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <_Z18SystemClock_Configv+0xe0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800146c:	2301      	movs	r3, #1
 800146e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001470:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001476:	2302      	movs	r3, #2
 8001478:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800147a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800147e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001480:	2304      	movs	r3, #4
 8001482:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001484:	2364      	movs	r3, #100	; 0x64
 8001486:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001488:	2302      	movs	r3, #2
 800148a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800148c:	2305      	movs	r3, #5
 800148e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001490:	f107 0320 	add.w	r3, r7, #32
 8001494:	4618      	mov	r0, r3
 8001496:	f001 fd5b 	bl	8002f50 <HAL_RCC_OscConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf14      	ite	ne
 80014a0:	2301      	movne	r3, #1
 80014a2:	2300      	moveq	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80014aa:	f000 f823 	bl	80014f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ae:	230f      	movs	r3, #15
 80014b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b2:	2302      	movs	r3, #2
 80014b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2103      	movs	r1, #3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 ffb8 	bl	8003440 <HAL_RCC_ClockConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bf14      	ite	ne
 80014d6:	2301      	movne	r3, #1
 80014d8:	2300      	moveq	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80014e0:	f000 f808 	bl	80014f4 <Error_Handler>
  }
}
 80014e4:	bf00      	nop
 80014e6:	3750      	adds	r7, #80	; 0x50
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40007000 	.word	0x40007000

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
}
 80014fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fc:	e7fe      	b.n	80014fc <Error_Handler+0x8>
	...

08001500 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_SDIO_SD_Init+0x38>)
 8001506:	4a0d      	ldr	r2, [pc, #52]	; (800153c <MX_SDIO_SD_Init+0x3c>)
 8001508:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_SDIO_SD_Init+0x38>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_SDIO_SD_Init+0x38>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_SDIO_SD_Init+0x38>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_SDIO_SD_Init+0x38>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <MX_SDIO_SD_Init+0x38>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <MX_SDIO_SD_Init+0x38>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	20000c74 	.word	0x20000c74
 800153c:	40012c00 	.word	0x40012c00

08001540 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	; 0x30
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a77      	ldr	r2, [pc, #476]	; (800173c <HAL_SD_MspInit+0x1fc>)
 800155e:	4293      	cmp	r3, r2
 8001560:	f040 80e8 	bne.w	8001734 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	4b75      	ldr	r3, [pc, #468]	; (8001740 <HAL_SD_MspInit+0x200>)
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	4a74      	ldr	r2, [pc, #464]	; (8001740 <HAL_SD_MspInit+0x200>)
 800156e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001572:	6453      	str	r3, [r2, #68]	; 0x44
 8001574:	4b72      	ldr	r3, [pc, #456]	; (8001740 <HAL_SD_MspInit+0x200>)
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <HAL_SD_MspInit+0x200>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	4a6d      	ldr	r2, [pc, #436]	; (8001740 <HAL_SD_MspInit+0x200>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6313      	str	r3, [r2, #48]	; 0x30
 8001590:	4b6b      	ldr	r3, [pc, #428]	; (8001740 <HAL_SD_MspInit+0x200>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	4b67      	ldr	r3, [pc, #412]	; (8001740 <HAL_SD_MspInit+0x200>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	4a66      	ldr	r2, [pc, #408]	; (8001740 <HAL_SD_MspInit+0x200>)
 80015a6:	f043 0302 	orr.w	r3, r3, #2
 80015aa:	6313      	str	r3, [r2, #48]	; 0x30
 80015ac:	4b64      	ldr	r3, [pc, #400]	; (8001740 <HAL_SD_MspInit+0x200>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	4b60      	ldr	r3, [pc, #384]	; (8001740 <HAL_SD_MspInit+0x200>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	4a5f      	ldr	r2, [pc, #380]	; (8001740 <HAL_SD_MspInit+0x200>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6313      	str	r3, [r2, #48]	; 0x30
 80015c8:	4b5d      	ldr	r3, [pc, #372]	; (8001740 <HAL_SD_MspInit+0x200>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d4:	2340      	movs	r3, #64	; 0x40
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80015e4:	230c      	movs	r3, #12
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	4855      	ldr	r0, [pc, #340]	; (8001744 <HAL_SD_MspInit+0x204>)
 80015f0:	f001 f9b2 	bl	8002958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001606:	230c      	movs	r3, #12
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	484d      	ldr	r0, [pc, #308]	; (8001748 <HAL_SD_MspInit+0x208>)
 8001612:	f001 f9a1 	bl	8002958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001616:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001628:	230c      	movs	r3, #12
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	4846      	ldr	r0, [pc, #280]	; (800174c <HAL_SD_MspInit+0x20c>)
 8001634:	f001 f990 	bl	8002958 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001638:	4b45      	ldr	r3, [pc, #276]	; (8001750 <HAL_SD_MspInit+0x210>)
 800163a:	4a46      	ldr	r2, [pc, #280]	; (8001754 <HAL_SD_MspInit+0x214>)
 800163c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800163e:	4b44      	ldr	r3, [pc, #272]	; (8001750 <HAL_SD_MspInit+0x210>)
 8001640:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001644:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001646:	4b42      	ldr	r3, [pc, #264]	; (8001750 <HAL_SD_MspInit+0x210>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800164c:	4b40      	ldr	r3, [pc, #256]	; (8001750 <HAL_SD_MspInit+0x210>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001652:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <HAL_SD_MspInit+0x210>)
 8001654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001658:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800165a:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <HAL_SD_MspInit+0x210>)
 800165c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001660:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001662:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <HAL_SD_MspInit+0x210>)
 8001664:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001668:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800166a:	4b39      	ldr	r3, [pc, #228]	; (8001750 <HAL_SD_MspInit+0x210>)
 800166c:	2220      	movs	r2, #32
 800166e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001670:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_SD_MspInit+0x210>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001676:	4b36      	ldr	r3, [pc, #216]	; (8001750 <HAL_SD_MspInit+0x210>)
 8001678:	2204      	movs	r2, #4
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <HAL_SD_MspInit+0x210>)
 800167e:	2203      	movs	r2, #3
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001682:	4b33      	ldr	r3, [pc, #204]	; (8001750 <HAL_SD_MspInit+0x210>)
 8001684:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <HAL_SD_MspInit+0x210>)
 800168c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001692:	482f      	ldr	r0, [pc, #188]	; (8001750 <HAL_SD_MspInit+0x210>)
 8001694:	f000 fd52 	bl	800213c <HAL_DMA_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 800169e:	f7ff ff29 	bl	80014f4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a2a      	ldr	r2, [pc, #168]	; (8001750 <HAL_SD_MspInit+0x210>)
 80016a6:	641a      	str	r2, [r3, #64]	; 0x40
 80016a8:	4a29      	ldr	r2, [pc, #164]	; (8001750 <HAL_SD_MspInit+0x210>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80016ae:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <HAL_SD_MspInit+0x218>)
 80016b0:	4a2a      	ldr	r2, [pc, #168]	; (800175c <HAL_SD_MspInit+0x21c>)
 80016b2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <HAL_SD_MspInit+0x218>)
 80016b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ba:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_SD_MspInit+0x218>)
 80016be:	2240      	movs	r2, #64	; 0x40
 80016c0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_SD_MspInit+0x218>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <HAL_SD_MspInit+0x218>)
 80016ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ce:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016d0:	4b21      	ldr	r3, [pc, #132]	; (8001758 <HAL_SD_MspInit+0x218>)
 80016d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_SD_MspInit+0x218>)
 80016da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016de:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_SD_MspInit+0x218>)
 80016e2:	2220      	movs	r2, #32
 80016e4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <HAL_SD_MspInit+0x218>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_SD_MspInit+0x218>)
 80016ee:	2204      	movs	r2, #4
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_SD_MspInit+0x218>)
 80016f4:	2203      	movs	r2, #3
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_SD_MspInit+0x218>)
 80016fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_SD_MspInit+0x218>)
 8001702:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001708:	4813      	ldr	r0, [pc, #76]	; (8001758 <HAL_SD_MspInit+0x218>)
 800170a:	f000 fd17 	bl	800213c <HAL_DMA_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8001714:	f7ff feee 	bl	80014f4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <HAL_SD_MspInit+0x218>)
 800171c:	63da      	str	r2, [r3, #60]	; 0x3c
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_SD_MspInit+0x218>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2031      	movs	r0, #49	; 0x31
 800172a:	f000 fcd0 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800172e:	2031      	movs	r0, #49	; 0x31
 8001730:	f000 fce9 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001734:	bf00      	nop
 8001736:	3730      	adds	r7, #48	; 0x30
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40012c00 	.word	0x40012c00
 8001740:	40023800 	.word	0x40023800
 8001744:	40020000 	.word	0x40020000
 8001748:	40020400 	.word	0x40020400
 800174c:	40020800 	.word	0x40020800
 8001750:	20000bb4 	.word	0x20000bb4
 8001754:	40026458 	.word	0x40026458
 8001758:	20000c14 	.word	0x20000c14
 800175c:	400264a0 	.word	0x400264a0

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_MspInit+0x4c>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_MspInit+0x4c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_MspInit+0x4c>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_MspInit+0x4c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800179e:	2007      	movs	r0, #7
 80017a0:	f000 fc8a 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fc:	f000 fb48 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <TIM3_IRQHandler+0x10>)
 800180a:	f003 fbf5 	bl	8004ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000cf8 	.word	0x20000cf8

08001818 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <USART1_IRQHandler+0x10>)
 800181e:	f004 f85f 	bl	80058e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000d40 	.word	0x20000d40

0800182c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <SDIO_IRQHandler+0x10>)
 8001832:	f002 fa77 	bl	8003d24 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000c74 	.word	0x20000c74

08001840 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <DMA2_Stream3_IRQHandler+0x10>)
 8001846:	f000 fe11 	bl	800246c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000bb4 	.word	0x20000bb4

08001854 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <DMA2_Stream6_IRQHandler+0x10>)
 800185a:	f000 fe07 	bl	800246c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000c14 	.word	0x20000c14

08001868 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <USART6_IRQHandler+0x10>)
 800186e:	f004 f837 	bl	80058e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000d84 	.word	0x20000d84

0800187c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
	return 1;
 8001880:	2301      	movs	r3, #1
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_kill>:

int _kill(int pid, int sig)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001896:	f00a fbd7 	bl	800c048 <__errno>
 800189a:	4603      	mov	r3, r0
 800189c:	2216      	movs	r2, #22
 800189e:	601a      	str	r2, [r3, #0]
	return -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_exit>:

void _exit (int status)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ffe7 	bl	800188c <_kill>
	while (1) {}		/* Make sure we hang here */
 80018be:	e7fe      	b.n	80018be <_exit+0x12>

080018c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e00a      	b.n	80018e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018d2:	f3af 8000 	nop.w
 80018d6:	4601      	mov	r1, r0
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60ba      	str	r2, [r7, #8]
 80018de:	b2ca      	uxtb	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbf0      	blt.n	80018d2 <_read+0x12>
	}

return len;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e009      	b.n	8001920 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff facb 	bl	8000eb0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbf1      	blt.n	800190c <_write+0x12>
	}
	return len;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_close>:

int _close(int file)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
	return -1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800195a:	605a      	str	r2, [r3, #4]
	return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_isatty>:

int _isatty(int file)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
	return 1;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
	return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <_sbrk+0x5c>)
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <_sbrk+0x60>)
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <_sbrk+0x64>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <_sbrk+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019cc:	f00a fb3c 	bl	800c048 <__errno>
 80019d0:	4603      	mov	r3, r0
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e009      	b.n	80019f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <_sbrk+0x64>)
 80019ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20020000 	.word	0x20020000
 80019fc:	00000400 	.word	0x00000400
 8001a00:	200006b8 	.word	0x200006b8
 8001a04:	200012b8 	.word	0x200012b8

08001a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <SystemInit+0x20>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <SystemInit+0x20>)
 8001a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a40:	463b      	mov	r3, r7
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <MX_TIM3_Init+0x98>)
 8001a4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a6e:	4814      	ldr	r0, [pc, #80]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a70:	f003 fa11 	bl	8004e96 <HAL_TIM_Base_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a7a:	f7ff fd3b 	bl	80014f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a84:	f107 0308 	add.w	r3, r7, #8
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a8c:	f003 fbbc 	bl	8005208 <HAL_TIM_ConfigClockSource>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a96:	f7ff fd2d 	bl	80014f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001aa8:	f003 fdb8 	bl	800561c <HAL_TIMEx_MasterConfigSynchronization>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001ab2:	f7ff fd1f 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000cf8 	.word	0x20000cf8
 8001ac4:	40000400 	.word	0x40000400

08001ac8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <HAL_TIM_Base_MspInit+0x48>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d115      	bne.n	8001b06 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_TIM_Base_MspInit+0x4c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <HAL_TIM_Base_MspInit+0x4c>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_TIM_Base_MspInit+0x4c>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	201d      	movs	r0, #29
 8001afc:	f000 fae7 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b00:	201d      	movs	r0, #29
 8001b02:	f000 fb00 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40000400 	.word	0x40000400
 8001b14:	40023800 	.word	0x40023800

08001b18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <MX_USART1_UART_Init+0x50>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b50:	f003 fde6 	bl	8005720 <HAL_UART_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b5a:	f7ff fccb 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000d40 	.word	0x20000d40
 8001b68:	40011000 	.word	0x40011000

08001b6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <MX_USART2_UART_Init+0x50>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	f003 fdbc 	bl	8005720 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bae:	f7ff fca1 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000dc8 	.word	0x20000dc8
 8001bbc:	40004400 	.word	0x40004400

08001bc0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_USART6_UART_Init+0x4c>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <MX_USART6_UART_Init+0x50>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <MX_USART6_UART_Init+0x4c>)
 8001bcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bd0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_USART6_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_USART6_UART_Init+0x4c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MX_USART6_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_USART6_UART_Init+0x4c>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <MX_USART6_UART_Init+0x4c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_USART6_UART_Init+0x4c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_USART6_UART_Init+0x4c>)
 8001bf8:	f003 fd92 	bl	8005720 <HAL_UART_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c02:	f7ff fc77 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000d84 	.word	0x20000d84
 8001c10:	40011400 	.word	0x40011400

08001c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08e      	sub	sp, #56	; 0x38
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a53      	ldr	r2, [pc, #332]	; (8001d80 <HAL_UART_MspInit+0x16c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d135      	bne.n	8001ca2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
 8001c3a:	4b52      	ldr	r3, [pc, #328]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	4a51      	ldr	r2, [pc, #324]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001c40:	f043 0310 	orr.w	r3, r3, #16
 8001c44:	6453      	str	r3, [r2, #68]	; 0x44
 8001c46:	4b4f      	ldr	r3, [pc, #316]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	623b      	str	r3, [r7, #32]
 8001c50:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a4a      	ldr	r2, [pc, #296]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b48      	ldr	r3, [pc, #288]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c80:	2307      	movs	r3, #7
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c88:	4619      	mov	r1, r3
 8001c8a:	483f      	ldr	r0, [pc, #252]	; (8001d88 <HAL_UART_MspInit+0x174>)
 8001c8c:	f000 fe64 	bl	8002958 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2025      	movs	r0, #37	; 0x25
 8001c96:	f000 fa1a 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c9a:	2025      	movs	r0, #37	; 0x25
 8001c9c:	f000 fa33 	bl	8002106 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001ca0:	e06a      	b.n	8001d78 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a39      	ldr	r2, [pc, #228]	; (8001d8c <HAL_UART_MspInit+0x178>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d12c      	bne.n	8001d06 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	4a33      	ldr	r2, [pc, #204]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cba:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbc:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	4a2c      	ldr	r2, [pc, #176]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4822      	ldr	r0, [pc, #136]	; (8001d88 <HAL_UART_MspInit+0x174>)
 8001d00:	f000 fe2a 	bl	8002958 <HAL_GPIO_Init>
}
 8001d04:	e038      	b.n	8001d78 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART6)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a21      	ldr	r2, [pc, #132]	; (8001d90 <HAL_UART_MspInit+0x17c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d133      	bne.n	8001d78 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	4a1a      	ldr	r2, [pc, #104]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001d1a:	f043 0320 	orr.w	r3, r3, #32
 8001d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f003 0320 	and.w	r3, r3, #32
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_UART_MspInit+0x170>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d48:	23c0      	movs	r3, #192	; 0xc0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d58:	2308      	movs	r3, #8
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d60:	4619      	mov	r1, r3
 8001d62:	480c      	ldr	r0, [pc, #48]	; (8001d94 <HAL_UART_MspInit+0x180>)
 8001d64:	f000 fdf8 	bl	8002958 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2047      	movs	r0, #71	; 0x47
 8001d6e:	f000 f9ae 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d72:	2047      	movs	r0, #71	; 0x47
 8001d74:	f000 f9c7 	bl	8002106 <HAL_NVIC_EnableIRQ>
}
 8001d78:	bf00      	nop
 8001d7a:	3738      	adds	r7, #56	; 0x38
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40011000 	.word	0x40011000
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40004400 	.word	0x40004400
 8001d90:	40011400 	.word	0x40011400
 8001d94:	40020800 	.word	0x40020800

08001d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d9c:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d9e:	490e      	ldr	r1, [pc, #56]	; (8001dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001da0:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001db4:	4c0b      	ldr	r4, [pc, #44]	; (8001de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dc2:	f7ff fe21 	bl	8001a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f00a f945 	bl	800c054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dca:	f7ff f9f9 	bl	80011c0 <main>
  bx  lr    
 8001dce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ddc:	0800f4ec 	.word	0x0800f4ec
  ldr r2, =_sbss
 8001de0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001de4:	200012b8 	.word	0x200012b8

08001de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC_IRQHandler>
	...

08001dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <HAL_Init+0x40>)
 8001df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_Init+0x40>)
 8001e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_Init+0x40>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 f94f 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 f808 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f7ff fc9e 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023c00 	.word	0x40023c00

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_InitTick+0x54>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_InitTick+0x58>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f967 	bl	8002122 <HAL_SYSTICK_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00e      	b.n	8001e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d80a      	bhi.n	8001e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f000 f92f 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <HAL_InitTick+0x5c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000010 	.word	0x20000010
 8001e88:	20000018 	.word	0x20000018
 8001e8c:	20000014 	.word	0x20000014

08001e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000018 	.word	0x20000018
 8001eb4:	20000e0c 	.word	0x20000e0c

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000e0c 	.word	0x20000e0c

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff ffee 	bl	8001eb8 <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_Delay+0x44>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffde 	bl	8001eb8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000018 	.word	0x20000018

08001f18 <__NVIC_SetPriorityGrouping>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_GetPriorityGrouping>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <__NVIC_EnableIRQ+0x38>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff29 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff3e 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff8e 	bl	800200c <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff31 	bl	8001f7c <__NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa2 	bl	8002074 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff feb6 	bl	8001eb8 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e099      	b.n	800228c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002178:	e00f      	b.n	800219a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800217a:	f7ff fe9d 	bl	8001eb8 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b05      	cmp	r3, #5
 8002186:	d908      	bls.n	800219a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2203      	movs	r2, #3
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e078      	b.n	800228c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1e8      	bne.n	800217a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4b38      	ldr	r3, [pc, #224]	; (8002294 <HAL_DMA_Init+0x158>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d107      	bne.n	8002204 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	4313      	orrs	r3, r2
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f023 0307 	bic.w	r3, r3, #7
 800221a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	2b04      	cmp	r3, #4
 800222c:	d117      	bne.n	800225e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00e      	beq.n	800225e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fb0d 	bl	8002860 <DMA_CheckFifoParam>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2240      	movs	r2, #64	; 0x40
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800225a:	2301      	movs	r3, #1
 800225c:	e016      	b.n	800228c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fac4 	bl	80027f4 <DMA_CalcBaseAndBitshift>
 800226c:	4603      	mov	r3, r0
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002274:	223f      	movs	r2, #63	; 0x3f
 8002276:	409a      	lsls	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	f010803f 	.word	0xf010803f

08002298 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_DMA_Start_IT+0x26>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e040      	b.n	8002340 <HAL_DMA_Start_IT+0xa8>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d12f      	bne.n	8002332 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fa56 	bl	8002798 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	223f      	movs	r2, #63	; 0x3f
 80022f2:	409a      	lsls	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0216 	orr.w	r2, r2, #22
 8002306:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0208 	orr.w	r2, r2, #8
 800231e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e005      	b.n	800233e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800233a:	2302      	movs	r3, #2
 800233c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800233e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002356:	f7ff fdaf 	bl	8001eb8 <HAL_GetTick>
 800235a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d008      	beq.n	800237a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2280      	movs	r2, #128	; 0x80
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e052      	b.n	8002420 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0216 	bic.w	r2, r2, #22
 8002388:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002398:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <HAL_DMA_Abort+0x62>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0208 	bic.w	r2, r2, #8
 80023b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ca:	e013      	b.n	80023f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023cc:	f7ff fd74 	bl	8001eb8 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b05      	cmp	r3, #5
 80023d8:	d90c      	bls.n	80023f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2203      	movs	r2, #3
 80023e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e015      	b.n	8002420 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e4      	bne.n	80023cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	223f      	movs	r2, #63	; 0x3f
 8002408:	409a      	lsls	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d004      	beq.n	8002446 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e00c      	b.n	8002460 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2205      	movs	r2, #5
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0201 	bic.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002478:	4b92      	ldr	r3, [pc, #584]	; (80026c4 <HAL_DMA_IRQHandler+0x258>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a92      	ldr	r2, [pc, #584]	; (80026c8 <HAL_DMA_IRQHandler+0x25c>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	0a9b      	lsrs	r3, r3, #10
 8002484:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	2208      	movs	r2, #8
 8002498:	409a      	lsls	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d01a      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0204 	bic.w	r2, r2, #4
 80024be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	2208      	movs	r2, #8
 80024c6:	409a      	lsls	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	2201      	movs	r2, #1
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d012      	beq.n	800250e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	2201      	movs	r2, #1
 80024fc:	409a      	lsls	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f043 0202 	orr.w	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	2204      	movs	r2, #4
 8002514:	409a      	lsls	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d012      	beq.n	8002544 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00b      	beq.n	8002544 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	2204      	movs	r2, #4
 8002532:	409a      	lsls	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253c:	f043 0204 	orr.w	r2, r3, #4
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002548:	2210      	movs	r2, #16
 800254a:	409a      	lsls	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d043      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d03c      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	2210      	movs	r2, #16
 8002568:	409a      	lsls	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d018      	beq.n	80025ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d108      	bne.n	800259c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d024      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
 800259a:	e01f      	b.n	80025dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01b      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4798      	blx	r3
 80025ac:	e016      	b.n	80025dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0208 	bic.w	r2, r2, #8
 80025ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	2220      	movs	r2, #32
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 808e 	beq.w	800270a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 8086 	beq.w	800270a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	2220      	movs	r2, #32
 8002604:	409a      	lsls	r2, r3
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b05      	cmp	r3, #5
 8002614:	d136      	bne.n	8002684 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0216 	bic.w	r2, r2, #22
 8002624:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002634:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <HAL_DMA_IRQHandler+0x1da>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0208 	bic.w	r2, r2, #8
 8002654:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	223f      	movs	r2, #63	; 0x3f
 800265c:	409a      	lsls	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002676:	2b00      	cmp	r3, #0
 8002678:	d07d      	beq.n	8002776 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
        }
        return;
 8002682:	e078      	b.n	8002776 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01c      	beq.n	80026cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d108      	bne.n	80026b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d030      	beq.n	800270a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
 80026b0:	e02b      	b.n	800270a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d027      	beq.n	800270a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
 80026c2:	e022      	b.n	800270a <HAL_DMA_IRQHandler+0x29e>
 80026c4:	20000010 	.word	0x20000010
 80026c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10f      	bne.n	80026fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0210 	bic.w	r2, r2, #16
 80026e8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	2b00      	cmp	r3, #0
 8002710:	d032      	beq.n	8002778 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d022      	beq.n	8002764 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2205      	movs	r2, #5
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	3301      	adds	r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	429a      	cmp	r2, r3
 8002740:	d307      	bcc.n	8002752 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f2      	bne.n	8002736 <HAL_DMA_IRQHandler+0x2ca>
 8002750:	e000      	b.n	8002754 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002752:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	4798      	blx	r3
 8002774:	e000      	b.n	8002778 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002776:	bf00      	nop
    }
  }
}
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop

08002780 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d108      	bne.n	80027d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027d6:	e007      	b.n	80027e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3b10      	subs	r3, #16
 8002804:	4a14      	ldr	r2, [pc, #80]	; (8002858 <DMA_CalcBaseAndBitshift+0x64>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800280e:	4a13      	ldr	r2, [pc, #76]	; (800285c <DMA_CalcBaseAndBitshift+0x68>)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d909      	bls.n	8002836 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	1d1a      	adds	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	659a      	str	r2, [r3, #88]	; 0x58
 8002834:	e007      	b.n	8002846 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	aaaaaaab 	.word	0xaaaaaaab
 800285c:	0800eca0 	.word	0x0800eca0

08002860 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11f      	bne.n	80028ba <DMA_CheckFifoParam+0x5a>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d856      	bhi.n	800292e <DMA_CheckFifoParam+0xce>
 8002880:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <DMA_CheckFifoParam+0x28>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	08002899 	.word	0x08002899
 800288c:	080028ab 	.word	0x080028ab
 8002890:	08002899 	.word	0x08002899
 8002894:	0800292f 	.word	0x0800292f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d046      	beq.n	8002932 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a8:	e043      	b.n	8002932 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028b2:	d140      	bne.n	8002936 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b8:	e03d      	b.n	8002936 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c2:	d121      	bne.n	8002908 <DMA_CheckFifoParam+0xa8>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d837      	bhi.n	800293a <DMA_CheckFifoParam+0xda>
 80028ca:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <DMA_CheckFifoParam+0x70>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	080028e1 	.word	0x080028e1
 80028d4:	080028e7 	.word	0x080028e7
 80028d8:	080028e1 	.word	0x080028e1
 80028dc:	080028f9 	.word	0x080028f9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      break;
 80028e4:	e030      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d025      	beq.n	800293e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f6:	e022      	b.n	800293e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002900:	d11f      	bne.n	8002942 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002906:	e01c      	b.n	8002942 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d903      	bls.n	8002916 <DMA_CheckFifoParam+0xb6>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d003      	beq.n	800291c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002914:	e018      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
      break;
 800291a:	e015      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00e      	beq.n	8002946 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e00b      	b.n	8002946 <DMA_CheckFifoParam+0xe6>
      break;
 800292e:	bf00      	nop
 8002930:	e00a      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002932:	bf00      	nop
 8002934:	e008      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002936:	bf00      	nop
 8002938:	e006      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
 800293c:	e004      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 800293e:	bf00      	nop
 8002940:	e002      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;   
 8002942:	bf00      	nop
 8002944:	e000      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002946:	bf00      	nop
    }
  } 
  
  return status; 
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop

08002958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	e159      	b.n	8002c28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	f040 8148 	bne.w	8002c22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d005      	beq.n	80029aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d130      	bne.n	8002a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	2203      	movs	r2, #3
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e0:	2201      	movs	r2, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 0201 	and.w	r2, r3, #1
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d017      	beq.n	8002a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d123      	bne.n	8002a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	08da      	lsrs	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3208      	adds	r2, #8
 8002a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	08da      	lsrs	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3208      	adds	r2, #8
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0203 	and.w	r2, r3, #3
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80a2 	beq.w	8002c22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b57      	ldr	r3, [pc, #348]	; (8002c40 <HAL_GPIO_Init+0x2e8>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4a56      	ldr	r2, [pc, #344]	; (8002c40 <HAL_GPIO_Init+0x2e8>)
 8002ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aec:	6453      	str	r3, [r2, #68]	; 0x44
 8002aee:	4b54      	ldr	r3, [pc, #336]	; (8002c40 <HAL_GPIO_Init+0x2e8>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afa:	4a52      	ldr	r2, [pc, #328]	; (8002c44 <HAL_GPIO_Init+0x2ec>)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	3302      	adds	r3, #2
 8002b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	220f      	movs	r2, #15
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a49      	ldr	r2, [pc, #292]	; (8002c48 <HAL_GPIO_Init+0x2f0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d019      	beq.n	8002b5a <HAL_GPIO_Init+0x202>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a48      	ldr	r2, [pc, #288]	; (8002c4c <HAL_GPIO_Init+0x2f4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_GPIO_Init+0x1fe>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a47      	ldr	r2, [pc, #284]	; (8002c50 <HAL_GPIO_Init+0x2f8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00d      	beq.n	8002b52 <HAL_GPIO_Init+0x1fa>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a46      	ldr	r2, [pc, #280]	; (8002c54 <HAL_GPIO_Init+0x2fc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <HAL_GPIO_Init+0x1f6>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a45      	ldr	r2, [pc, #276]	; (8002c58 <HAL_GPIO_Init+0x300>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_GPIO_Init+0x1f2>
 8002b46:	2304      	movs	r3, #4
 8002b48:	e008      	b.n	8002b5c <HAL_GPIO_Init+0x204>
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	e006      	b.n	8002b5c <HAL_GPIO_Init+0x204>
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e004      	b.n	8002b5c <HAL_GPIO_Init+0x204>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e002      	b.n	8002b5c <HAL_GPIO_Init+0x204>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_GPIO_Init+0x204>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	69fa      	ldr	r2, [r7, #28]
 8002b5e:	f002 0203 	and.w	r2, r2, #3
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	4093      	lsls	r3, r2
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b6c:	4935      	ldr	r1, [pc, #212]	; (8002c44 <HAL_GPIO_Init+0x2ec>)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	3302      	adds	r3, #2
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b7a:	4b38      	ldr	r3, [pc, #224]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b9e:	4a2f      	ldr	r2, [pc, #188]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ba4:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bc8:	4a24      	ldr	r2, [pc, #144]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bce:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bf2:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf8:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c1c:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3301      	adds	r3, #1
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b0f      	cmp	r3, #15
 8002c2c:	f67f aea2 	bls.w	8002974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	3724      	adds	r7, #36	; 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40013800 	.word	0x40013800
 8002c48:	40020000 	.word	0x40020000
 8002c4c:	40020400 	.word	0x40020400
 8002c50:	40020800 	.word	0x40020800
 8002c54:	40020c00 	.word	0x40020c00
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40013c00 	.word	0x40013c00

08002c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c70:	787b      	ldrb	r3, [r7, #1]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c7c:	e003      	b.n	8002c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c7e:	887b      	ldrh	r3, [r7, #2]
 8002c80:	041a      	lsls	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	619a      	str	r2, [r3, #24]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b085      	sub	sp, #20
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ca4:	887a      	ldrh	r2, [r7, #2]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	041a      	lsls	r2, r3, #16
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	43d9      	mvns	r1, r3
 8002cb0:	887b      	ldrh	r3, [r7, #2]
 8002cb2:	400b      	ands	r3, r1
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e12b      	b.n	8002f32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe f9dc 	bl	80010ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	; 0x24
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d2c:	f000 fd5c 	bl	80037e8 <HAL_RCC_GetPCLK1Freq>
 8002d30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4a81      	ldr	r2, [pc, #516]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d807      	bhi.n	8002d4c <HAL_I2C_Init+0x84>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a80      	ldr	r2, [pc, #512]	; (8002f40 <HAL_I2C_Init+0x278>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bf94      	ite	ls
 8002d44:	2301      	movls	r3, #1
 8002d46:	2300      	movhi	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e006      	b.n	8002d5a <HAL_I2C_Init+0x92>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a7d      	ldr	r2, [pc, #500]	; (8002f44 <HAL_I2C_Init+0x27c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	bf94      	ite	ls
 8002d54:	2301      	movls	r3, #1
 8002d56:	2300      	movhi	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0e7      	b.n	8002f32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a78      	ldr	r2, [pc, #480]	; (8002f48 <HAL_I2C_Init+0x280>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	0c9b      	lsrs	r3, r3, #18
 8002d6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a6a      	ldr	r2, [pc, #424]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d802      	bhi.n	8002d9c <HAL_I2C_Init+0xd4>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	e009      	b.n	8002db0 <HAL_I2C_Init+0xe8>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	4a69      	ldr	r2, [pc, #420]	; (8002f4c <HAL_I2C_Init+0x284>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	099b      	lsrs	r3, r3, #6
 8002dae:	3301      	adds	r3, #1
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	495c      	ldr	r1, [pc, #368]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002dcc:	428b      	cmp	r3, r1
 8002dce:	d819      	bhi.n	8002e04 <HAL_I2C_Init+0x13c>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1e59      	subs	r1, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dde:	1c59      	adds	r1, r3, #1
 8002de0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002de4:	400b      	ands	r3, r1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_I2C_Init+0x138>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1e59      	subs	r1, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfe:	e051      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e04f      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d111      	bne.n	8002e30 <HAL_I2C_Init+0x168>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1e58      	subs	r0, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e012      	b.n	8002e56 <HAL_I2C_Init+0x18e>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1e58      	subs	r0, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	0099      	lsls	r1, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Init+0x196>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e022      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10e      	bne.n	8002e84 <HAL_I2C_Init+0x1bc>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1e58      	subs	r0, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	440b      	add	r3, r1
 8002e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e82:	e00f      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	0099      	lsls	r1, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	6809      	ldr	r1, [r1, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6911      	ldr	r1, [r2, #16]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68d2      	ldr	r2, [r2, #12]
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	000186a0 	.word	0x000186a0
 8002f40:	001e847f 	.word	0x001e847f
 8002f44:	003d08ff 	.word	0x003d08ff
 8002f48:	431bde83 	.word	0x431bde83
 8002f4c:	10624dd3 	.word	0x10624dd3

08002f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e264      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d075      	beq.n	800305a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f6e:	4ba3      	ldr	r3, [pc, #652]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d00c      	beq.n	8002f94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7a:	4ba0      	ldr	r3, [pc, #640]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d112      	bne.n	8002fac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f86:	4b9d      	ldr	r3, [pc, #628]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f92:	d10b      	bne.n	8002fac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	4b99      	ldr	r3, [pc, #612]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d05b      	beq.n	8003058 <HAL_RCC_OscConfig+0x108>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d157      	bne.n	8003058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e23f      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x74>
 8002fb6:	4b91      	ldr	r3, [pc, #580]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a90      	ldr	r2, [pc, #576]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e01d      	b.n	8003000 <HAL_RCC_OscConfig+0xb0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x98>
 8002fce:	4b8b      	ldr	r3, [pc, #556]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a8a      	ldr	r2, [pc, #552]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b88      	ldr	r3, [pc, #544]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a87      	ldr	r2, [pc, #540]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0xb0>
 8002fe8:	4b84      	ldr	r3, [pc, #528]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a83      	ldr	r2, [pc, #524]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b81      	ldr	r3, [pc, #516]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a80      	ldr	r2, [pc, #512]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe ff56 	bl	8001eb8 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe ff52 	bl	8001eb8 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e204      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b76      	ldr	r3, [pc, #472]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0xc0>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fe ff42 	bl	8001eb8 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe ff3e 	bl	8001eb8 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e1f0      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	4b6c      	ldr	r3, [pc, #432]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0xe8>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d063      	beq.n	800312e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003066:	4b65      	ldr	r3, [pc, #404]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003072:	4b62      	ldr	r3, [pc, #392]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800307a:	2b08      	cmp	r3, #8
 800307c:	d11c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307e:	4b5f      	ldr	r3, [pc, #380]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d116      	bne.n	80030b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	4b5c      	ldr	r3, [pc, #368]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_RCC_OscConfig+0x152>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e1c4      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a2:	4b56      	ldr	r3, [pc, #344]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4952      	ldr	r1, [pc, #328]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	e03a      	b.n	800312e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c0:	4b4f      	ldr	r3, [pc, #316]	; (8003200 <HAL_RCC_OscConfig+0x2b0>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7fe fef7 	bl	8001eb8 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ce:	f7fe fef3 	bl	8001eb8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e1a5      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	4b46      	ldr	r3, [pc, #280]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ec:	4b43      	ldr	r3, [pc, #268]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4940      	ldr	r1, [pc, #256]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
 8003100:	e015      	b.n	800312e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003102:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <HAL_RCC_OscConfig+0x2b0>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fe fed6 	bl	8001eb8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003110:	f7fe fed2 	bl	8001eb8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e184      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003122:	4b36      	ldr	r3, [pc, #216]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d030      	beq.n	800319c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d016      	beq.n	8003170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003142:	4b30      	ldr	r3, [pc, #192]	; (8003204 <HAL_RCC_OscConfig+0x2b4>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe feb6 	bl	8001eb8 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003150:	f7fe feb2 	bl	8001eb8 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e164      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003162:	4b26      	ldr	r3, [pc, #152]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8003164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x200>
 800316e:	e015      	b.n	800319c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCC_OscConfig+0x2b4>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7fe fe9f 	bl	8001eb8 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317e:	f7fe fe9b 	bl	8001eb8 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e14d      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003190:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 8003192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f0      	bne.n	800317e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80a0 	beq.w	80032ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031aa:	2300      	movs	r3, #0
 80031ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10f      	bne.n	80031da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ca:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_OscConfig+0x2b8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d121      	bne.n	800322a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031e6:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_RCC_OscConfig+0x2b8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a07      	ldr	r2, [pc, #28]	; (8003208 <HAL_RCC_OscConfig+0x2b8>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f2:	f7fe fe61 	bl	8001eb8 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f8:	e011      	b.n	800321e <HAL_RCC_OscConfig+0x2ce>
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	42470000 	.word	0x42470000
 8003204:	42470e80 	.word	0x42470e80
 8003208:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320c:	f7fe fe54 	bl	8001eb8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e106      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	4b85      	ldr	r3, [pc, #532]	; (8003434 <HAL_RCC_OscConfig+0x4e4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d106      	bne.n	8003240 <HAL_RCC_OscConfig+0x2f0>
 8003232:	4b81      	ldr	r3, [pc, #516]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	4a80      	ldr	r2, [pc, #512]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	6713      	str	r3, [r2, #112]	; 0x70
 800323e:	e01c      	b.n	800327a <HAL_RCC_OscConfig+0x32a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b05      	cmp	r3, #5
 8003246:	d10c      	bne.n	8003262 <HAL_RCC_OscConfig+0x312>
 8003248:	4b7b      	ldr	r3, [pc, #492]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	4a7a      	ldr	r2, [pc, #488]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 800324e:	f043 0304 	orr.w	r3, r3, #4
 8003252:	6713      	str	r3, [r2, #112]	; 0x70
 8003254:	4b78      	ldr	r3, [pc, #480]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	4a77      	ldr	r2, [pc, #476]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6713      	str	r3, [r2, #112]	; 0x70
 8003260:	e00b      	b.n	800327a <HAL_RCC_OscConfig+0x32a>
 8003262:	4b75      	ldr	r3, [pc, #468]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a74      	ldr	r2, [pc, #464]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	6713      	str	r3, [r2, #112]	; 0x70
 800326e:	4b72      	ldr	r3, [pc, #456]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a71      	ldr	r2, [pc, #452]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 8003274:	f023 0304 	bic.w	r3, r3, #4
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d015      	beq.n	80032ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7fe fe19 	bl	8001eb8 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fe fe15 	bl	8001eb8 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e0c5      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	4b65      	ldr	r3, [pc, #404]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ee      	beq.n	800328a <HAL_RCC_OscConfig+0x33a>
 80032ac:	e014      	b.n	80032d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ae:	f7fe fe03 	bl	8001eb8 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b4:	e00a      	b.n	80032cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fe fdff 	bl	8001eb8 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e0af      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032cc:	4b5a      	ldr	r3, [pc, #360]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1ee      	bne.n	80032b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d105      	bne.n	80032ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032de:	4b56      	ldr	r3, [pc, #344]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4a55      	ldr	r2, [pc, #340]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 80032e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 809b 	beq.w	800342a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032f4:	4b50      	ldr	r3, [pc, #320]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d05c      	beq.n	80033ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d141      	bne.n	800338c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003308:	4b4c      	ldr	r3, [pc, #304]	; (800343c <HAL_RCC_OscConfig+0x4ec>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7fe fdd3 	bl	8001eb8 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003316:	f7fe fdcf 	bl	8001eb8 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e081      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003328:	4b43      	ldr	r3, [pc, #268]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	019b      	lsls	r3, r3, #6
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	085b      	lsrs	r3, r3, #1
 800334c:	3b01      	subs	r3, #1
 800334e:	041b      	lsls	r3, r3, #16
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	061b      	lsls	r3, r3, #24
 8003358:	4937      	ldr	r1, [pc, #220]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800335e:	4b37      	ldr	r3, [pc, #220]	; (800343c <HAL_RCC_OscConfig+0x4ec>)
 8003360:	2201      	movs	r2, #1
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe fda8 	bl	8001eb8 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe fda4 	bl	8001eb8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e056      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337e:	4b2e      	ldr	r3, [pc, #184]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x41c>
 800338a:	e04e      	b.n	800342a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338c:	4b2b      	ldr	r3, [pc, #172]	; (800343c <HAL_RCC_OscConfig+0x4ec>)
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003392:	f7fe fd91 	bl	8001eb8 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339a:	f7fe fd8d 	bl	8001eb8 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e03f      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ac:	4b22      	ldr	r3, [pc, #136]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f0      	bne.n	800339a <HAL_RCC_OscConfig+0x44a>
 80033b8:	e037      	b.n	800342a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e032      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033c6:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <HAL_RCC_OscConfig+0x4e8>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d028      	beq.n	8003426 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d121      	bne.n	8003426 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d11a      	bne.n	8003426 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033f6:	4013      	ands	r3, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033fe:	4293      	cmp	r3, r2
 8003400:	d111      	bne.n	8003426 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	3b01      	subs	r3, #1
 8003410:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d107      	bne.n	8003426 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40007000 	.word	0x40007000
 8003438:	40023800 	.word	0x40023800
 800343c:	42470060 	.word	0x42470060

08003440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0cc      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003454:	4b68      	ldr	r3, [pc, #416]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d90c      	bls.n	800347c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b65      	ldr	r3, [pc, #404]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0b8      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d020      	beq.n	80034ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003494:	4b59      	ldr	r3, [pc, #356]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a58      	ldr	r2, [pc, #352]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800349e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034ac:	4b53      	ldr	r3, [pc, #332]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4a52      	ldr	r2, [pc, #328]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b8:	4b50      	ldr	r3, [pc, #320]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	494d      	ldr	r1, [pc, #308]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d044      	beq.n	8003560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	4b47      	ldr	r3, [pc, #284]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d119      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e07f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d003      	beq.n	80034fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d107      	bne.n	800350e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fe:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e06f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e067      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351e:	4b37      	ldr	r3, [pc, #220]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f023 0203 	bic.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4934      	ldr	r1, [pc, #208]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	4313      	orrs	r3, r2
 800352e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003530:	f7fe fcc2 	bl	8001eb8 <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	e00a      	b.n	800354e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003538:	f7fe fcbe 	bl	8001eb8 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e04f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 020c 	and.w	r2, r3, #12
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	429a      	cmp	r2, r3
 800355e:	d1eb      	bne.n	8003538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003560:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d20c      	bcs.n	8003588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e032      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4916      	ldr	r1, [pc, #88]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	490e      	ldr	r1, [pc, #56]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035c6:	f000 f821 	bl	800360c <HAL_RCC_GetSysClockFreq>
 80035ca:	4602      	mov	r2, r0
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	490a      	ldr	r1, [pc, #40]	; (8003600 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	5ccb      	ldrb	r3, [r1, r3]
 80035da:	fa22 f303 	lsr.w	r3, r2, r3
 80035de:	4a09      	ldr	r2, [pc, #36]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_RCC_ClockConfig+0x1c8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe fc22 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023c00 	.word	0x40023c00
 80035fc:	40023800 	.word	0x40023800
 8003600:	0800ec88 	.word	0x0800ec88
 8003604:	20000010 	.word	0x20000010
 8003608:	20000014 	.word	0x20000014

0800360c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800360c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	607b      	str	r3, [r7, #4]
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	2300      	movs	r3, #0
 800361e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003624:	4b67      	ldr	r3, [pc, #412]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b08      	cmp	r3, #8
 800362e:	d00d      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x40>
 8003630:	2b08      	cmp	r3, #8
 8003632:	f200 80bd 	bhi.w	80037b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x34>
 800363a:	2b04      	cmp	r3, #4
 800363c:	d003      	beq.n	8003646 <HAL_RCC_GetSysClockFreq+0x3a>
 800363e:	e0b7      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003640:	4b61      	ldr	r3, [pc, #388]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003642:	60bb      	str	r3, [r7, #8]
       break;
 8003644:	e0b7      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003646:	4b61      	ldr	r3, [pc, #388]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003648:	60bb      	str	r3, [r7, #8]
      break;
 800364a:	e0b4      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800364c:	4b5d      	ldr	r3, [pc, #372]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003654:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003656:	4b5b      	ldr	r3, [pc, #364]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d04d      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003662:	4b58      	ldr	r3, [pc, #352]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	099b      	lsrs	r3, r3, #6
 8003668:	461a      	mov	r2, r3
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003672:	f04f 0100 	mov.w	r1, #0
 8003676:	ea02 0800 	and.w	r8, r2, r0
 800367a:	ea03 0901 	and.w	r9, r3, r1
 800367e:	4640      	mov	r0, r8
 8003680:	4649      	mov	r1, r9
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	014b      	lsls	r3, r1, #5
 800368c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003690:	0142      	lsls	r2, r0, #5
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	ebb0 0008 	subs.w	r0, r0, r8
 800369a:	eb61 0109 	sbc.w	r1, r1, r9
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	018b      	lsls	r3, r1, #6
 80036a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036ac:	0182      	lsls	r2, r0, #6
 80036ae:	1a12      	subs	r2, r2, r0
 80036b0:	eb63 0301 	sbc.w	r3, r3, r1
 80036b4:	f04f 0000 	mov.w	r0, #0
 80036b8:	f04f 0100 	mov.w	r1, #0
 80036bc:	00d9      	lsls	r1, r3, #3
 80036be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036c2:	00d0      	lsls	r0, r2, #3
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	eb12 0208 	adds.w	r2, r2, r8
 80036cc:	eb43 0309 	adc.w	r3, r3, r9
 80036d0:	f04f 0000 	mov.w	r0, #0
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	0259      	lsls	r1, r3, #9
 80036da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036de:	0250      	lsls	r0, r2, #9
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	f7fd fa62 	bl	8000bb8 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e04a      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fe:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	099b      	lsrs	r3, r3, #6
 8003704:	461a      	mov	r2, r3
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800370e:	f04f 0100 	mov.w	r1, #0
 8003712:	ea02 0400 	and.w	r4, r2, r0
 8003716:	ea03 0501 	and.w	r5, r3, r1
 800371a:	4620      	mov	r0, r4
 800371c:	4629      	mov	r1, r5
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	014b      	lsls	r3, r1, #5
 8003728:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800372c:	0142      	lsls	r2, r0, #5
 800372e:	4610      	mov	r0, r2
 8003730:	4619      	mov	r1, r3
 8003732:	1b00      	subs	r0, r0, r4
 8003734:	eb61 0105 	sbc.w	r1, r1, r5
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	018b      	lsls	r3, r1, #6
 8003742:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003746:	0182      	lsls	r2, r0, #6
 8003748:	1a12      	subs	r2, r2, r0
 800374a:	eb63 0301 	sbc.w	r3, r3, r1
 800374e:	f04f 0000 	mov.w	r0, #0
 8003752:	f04f 0100 	mov.w	r1, #0
 8003756:	00d9      	lsls	r1, r3, #3
 8003758:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800375c:	00d0      	lsls	r0, r2, #3
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	1912      	adds	r2, r2, r4
 8003764:	eb45 0303 	adc.w	r3, r5, r3
 8003768:	f04f 0000 	mov.w	r0, #0
 800376c:	f04f 0100 	mov.w	r1, #0
 8003770:	0299      	lsls	r1, r3, #10
 8003772:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003776:	0290      	lsls	r0, r2, #10
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	461a      	mov	r2, r3
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	f7fd fa16 	bl	8000bb8 <__aeabi_uldivmod>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4613      	mov	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	0c1b      	lsrs	r3, r3, #16
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	3301      	adds	r3, #1
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ac:	60bb      	str	r3, [r7, #8]
      break;
 80037ae:	e002      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037b2:	60bb      	str	r3, [r7, #8]
      break;
 80037b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b6:	68bb      	ldr	r3, [r7, #8]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800
 80037c8:	00f42400 	.word	0x00f42400
 80037cc:	007a1200 	.word	0x007a1200

080037d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d4:	4b03      	ldr	r3, [pc, #12]	; (80037e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000010 	.word	0x20000010

080037e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037ec:	f7ff fff0 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	0a9b      	lsrs	r3, r3, #10
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4903      	ldr	r1, [pc, #12]	; (800380c <HAL_RCC_GetPCLK1Freq+0x24>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40023800 	.word	0x40023800
 800380c:	0800ec98 	.word	0x0800ec98

08003810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003814:	f7ff ffdc 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 8003818:	4602      	mov	r2, r0
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	0b5b      	lsrs	r3, r3, #13
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	4903      	ldr	r1, [pc, #12]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003826:	5ccb      	ldrb	r3, [r1, r3]
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40023800 	.word	0x40023800
 8003834:	0800ec98 	.word	0x0800ec98

08003838 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e022      	b.n	8003890 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d105      	bne.n	8003862 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fd fe6f 	bl	8001540 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2203      	movs	r2, #3
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f814 	bl	8003898 <HAL_SD_InitCard>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e00a      	b.n	8003890 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003898:	b5b0      	push	{r4, r5, r7, lr}
 800389a:	b08e      	sub	sp, #56	; 0x38
 800389c:	af04      	add	r7, sp, #16
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80038b4:	2376      	movs	r3, #118	; 0x76
 80038b6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681d      	ldr	r5, [r3, #0]
 80038bc:	466c      	mov	r4, sp
 80038be:	f107 0314 	add.w	r3, r7, #20
 80038c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80038ca:	f107 0308 	add.w	r3, r7, #8
 80038ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d0:	4628      	mov	r0, r5
 80038d2:	f002 fe8d 	bl	80065f0 <SDIO_Init>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80038dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e04c      	b.n	8003982 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80038e8:	4b28      	ldr	r3, [pc, #160]	; (800398c <HAL_SD_InitCard+0xf4>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f002 fec5 	bl	8006682 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80038f8:	4b24      	ldr	r3, [pc, #144]	; (800398c <HAL_SD_InitCard+0xf4>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f001 f804 	bl	800490c <SD_PowerON>
 8003904:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00b      	beq.n	8003924 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e02e      	b.n	8003982 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 ff25 	bl	8004774 <SD_InitCard>
 800392a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e01b      	b.n	8003982 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003952:	4618      	mov	r0, r3
 8003954:	f002 ff28 	bl	80067a8 <SDMMC_CmdBlockLength>
 8003958:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00f      	beq.n	8003980 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <HAL_SD_InitCard+0xf8>)
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3728      	adds	r7, #40	; 0x28
 8003986:	46bd      	mov	sp, r7
 8003988:	bdb0      	pop	{r4, r5, r7, pc}
 800398a:	bf00      	nop
 800398c:	422580a0 	.word	0x422580a0
 8003990:	004005ff 	.word	0x004005ff

08003994 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08c      	sub	sp, #48	; 0x30
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d107      	bne.n	80039bc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0c0      	b.n	8003b3e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	f040 80b9 	bne.w	8003b3c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80039d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	441a      	add	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039da:	429a      	cmp	r2, r3
 80039dc:	d907      	bls.n	80039ee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e0a7      	b.n	8003b3e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2203      	movs	r2, #3
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2200      	movs	r2, #0
 80039fc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	4a4c      	ldr	r2, [pc, #304]	; (8003b48 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003a18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	4a4b      	ldr	r2, [pc, #300]	; (8003b4c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003a20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2200      	movs	r2, #0
 8003a28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3380      	adds	r3, #128	; 0x80
 8003a58:	4619      	mov	r1, r3
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	025b      	lsls	r3, r3, #9
 8003a60:	089b      	lsrs	r3, r3, #2
 8003a62:	f7fe fc19 	bl	8002298 <HAL_DMA_Start_IT>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d017      	beq.n	8003a9c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003a7a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a33      	ldr	r2, [pc, #204]	; (8003b50 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003a82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e050      	b.n	8003b3e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003a9c:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d002      	beq.n	8003ab0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	025b      	lsls	r3, r3, #9
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	025b      	lsls	r3, r3, #9
 8003aba:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003abc:	2390      	movs	r3, #144	; 0x90
 8003abe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f107 0210 	add.w	r2, r7, #16
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f002 fe3a 	bl	8006750 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d90a      	bls.n	8003af8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2282      	movs	r2, #130	; 0x82
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aee:	4618      	mov	r0, r3
 8003af0:	f002 fe9e 	bl	8006830 <SDMMC_CmdReadMultiBlock>
 8003af4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003af6:	e009      	b.n	8003b0c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2281      	movs	r2, #129	; 0x81
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b04:	4618      	mov	r0, r3
 8003b06:	f002 fe71 	bl	80067ec <SDMMC_CmdReadSingleBlock>
 8003b0a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d012      	beq.n	8003b38 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a0e      	ldr	r2, [pc, #56]	; (8003b50 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003b18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	431a      	orrs	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e002      	b.n	8003b3e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e000      	b.n	8003b3e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003b3c:	2302      	movs	r3, #2
  }
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3730      	adds	r7, #48	; 0x30
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	08004583 	.word	0x08004583
 8003b4c:	080045f5 	.word	0x080045f5
 8003b50:	004005ff 	.word	0x004005ff
 8003b54:	4225858c 	.word	0x4225858c

08003b58 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08c      	sub	sp, #48	; 0x30
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d107      	bne.n	8003b80 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0c5      	b.n	8003d0c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	f040 80be 	bne.w	8003d0a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	441a      	add	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d907      	bls.n	8003bb2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e0ac      	b.n	8003d0c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	4a4e      	ldr	r2, [pc, #312]	; (8003d14 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	4a4d      	ldr	r2, [pc, #308]	; (8003d18 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003be4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	2200      	movs	r2, #0
 8003bec:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d002      	beq.n	8003bfc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	025b      	lsls	r3, r3, #9
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d90a      	bls.n	8003c18 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	22a0      	movs	r2, #160	; 0xa0
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f002 fe52 	bl	80068b8 <SDMMC_CmdWriteMultiBlock>
 8003c14:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003c16:	e009      	b.n	8003c2c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2290      	movs	r2, #144	; 0x90
 8003c1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c24:	4618      	mov	r0, r3
 8003c26:	f002 fe25 	bl	8006874 <SDMMC_CmdWriteSingleBlock>
 8003c2a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d012      	beq.n	8003c58 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a39      	ldr	r2, [pc, #228]	; (8003d1c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	431a      	orrs	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e059      	b.n	8003d0c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003c58:	4b31      	ldr	r3, [pc, #196]	; (8003d20 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	2240      	movs	r2, #64	; 0x40
 8003c64:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3380      	adds	r3, #128	; 0x80
 8003c8e:	461a      	mov	r2, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	025b      	lsls	r3, r3, #9
 8003c94:	089b      	lsrs	r3, r3, #2
 8003c96:	f7fe faff 	bl	8002298 <HAL_DMA_Start_IT>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01c      	beq.n	8003cda <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003cae:	f023 0302 	bic.w	r3, r3, #2
 8003cb2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a18      	ldr	r2, [pc, #96]	; (8003d1c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003cba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e018      	b.n	8003d0c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003cda:	f04f 33ff 	mov.w	r3, #4294967295
 8003cde:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	025b      	lsls	r3, r3, #9
 8003ce4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003ce6:	2390      	movs	r3, #144	; 0x90
 8003ce8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f107 0210 	add.w	r2, r7, #16
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f002 fd25 	bl	8006750 <SDIO_ConfigData>

      return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e000      	b.n	8003d0c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
  }
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3730      	adds	r7, #48	; 0x30
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	08004559 	.word	0x08004559
 8003d18:	080045f5 	.word	0x080045f5
 8003d1c:	004005ff 	.word	0x004005ff
 8003d20:	4225858c 	.word	0x4225858c

08003d24 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_SD_IRQHandler+0x2e>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fffd 	bl	8004d4a <SD_Read_IT>
 8003d50:	e165      	b.n	800401e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 808f 	beq.w	8003e80 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003d7a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003d7e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0201 	bic.w	r2, r2, #1
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d039      	beq.n	8003e0e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <HAL_SD_IRQHandler+0x8a>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d011      	beq.n	8003dd2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f002 fda2 	bl	80068fc <SDMMC_CmdStopTransfer>
 8003db8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f92f 	bl	8004030 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <HAL_SD_IRQHandler+0xda>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f003 fa10 	bl	8007224 <HAL_SD_RxCpltCallback>
 8003e04:	e10b      	b.n	800401e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f003 fa02 	bl	8007210 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e0c:	e107      	b.n	800401e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8102 	beq.w	800401e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d011      	beq.n	8003e48 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f002 fd67 	bl	80068fc <SDMMC_CmdStopTransfer>
 8003e2e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f8f4 	bl	8004030 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 80e5 	bne.w	800401e <HAL_SD_IRQHandler+0x2fa>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 80df 	bne.w	800401e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0208 	bic.w	r2, r2, #8
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f003 f9c9 	bl	8007210 <HAL_SD_TxCpltCallback>
}
 8003e7e:	e0ce      	b.n	800401e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <HAL_SD_IRQHandler+0x17c>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 ffa7 	bl	8004dec <SD_Write_IT>
 8003e9e:	e0be      	b.n	800401e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea6:	f240 233a 	movw	r3, #570	; 0x23a
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80b6 	beq.w	800401e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	f043 0202 	orr.w	r2, r3, #2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	f043 0208 	orr.w	r2, r3, #8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	f043 0210 	orr.w	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	f043 0208 	orr.w	r2, r3, #8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f240 723a 	movw	r2, #1850	; 0x73a
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003f4c:	f023 0302 	bic.w	r3, r3, #2
 8003f50:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f002 fcd0 	bl	80068fc <SDMMC_CmdStopTransfer>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f855 	bl	8004030 <HAL_SD_ErrorCallback>
}
 8003f86:	e04a      	b.n	800401e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d045      	beq.n	800401e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d104      	bne.n	8003fa6 <HAL_SD_IRQHandler+0x282>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d011      	beq.n	8003fca <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_SD_IRQHandler+0x304>)
 8003fac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fa38 	bl	8002428 <HAL_DMA_Abort_IT>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d02f      	beq.n	800401e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fb68 	bl	8004698 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003fc8:	e029      	b.n	800401e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d104      	bne.n	8003fde <HAL_SD_IRQHandler+0x2ba>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d011      	beq.n	8004002 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	4a12      	ldr	r2, [pc, #72]	; (800402c <HAL_SD_IRQHandler+0x308>)
 8003fe4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fa1c 	bl	8002428 <HAL_DMA_Abort_IT>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d013      	beq.n	800401e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fb83 	bl	8004706 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004000:	e00d      	b.n	800401e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f003 f8f0 	bl	80071fc <HAL_SD_AbortCallback>
}
 800401c:	e7ff      	b.n	800401e <HAL_SD_IRQHandler+0x2fa>
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	08004699 	.word	0x08004699
 800402c:	08004707 	.word	0x08004707

08004030 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004052:	0f9b      	lsrs	r3, r3, #30
 8004054:	b2da      	uxtb	r2, r3
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800405e:	0e9b      	lsrs	r3, r3, #26
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	b2da      	uxtb	r2, r3
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004070:	0e1b      	lsrs	r3, r3, #24
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	b2da      	uxtb	r2, r3
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004082:	0c1b      	lsrs	r3, r3, #16
 8004084:	b2da      	uxtb	r2, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	b2da      	uxtb	r2, r3
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409a:	b2da      	uxtb	r2, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a4:	0d1b      	lsrs	r3, r3, #20
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c2:	0bdb      	lsrs	r3, r3, #15
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d4:	0b9b      	lsrs	r3, r3, #14
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040e6:	0b5b      	lsrs	r3, r3, #13
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040f8:	0b1b      	lsrs	r3, r3, #12
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	b2da      	uxtb	r2, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2200      	movs	r2, #0
 800410a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004110:	2b00      	cmp	r3, #0
 8004112:	d163      	bne.n	80041dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004118:	009a      	lsls	r2, r3, #2
 800411a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800411e:	4013      	ands	r3, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004124:	0f92      	lsrs	r2, r2, #30
 8004126:	431a      	orrs	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004130:	0edb      	lsrs	r3, r3, #27
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	b2da      	uxtb	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004142:	0e1b      	lsrs	r3, r3, #24
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	b2da      	uxtb	r2, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004154:	0d5b      	lsrs	r3, r3, #21
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	b2da      	uxtb	r2, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004166:	0c9b      	lsrs	r3, r3, #18
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	b2da      	uxtb	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004178:	0bdb      	lsrs	r3, r3, #15
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	b2da      	uxtb	r2, r3
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	7e1b      	ldrb	r3, [r3, #24]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	3302      	adds	r3, #2
 800419c:	2201      	movs	r2, #1
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80041a6:	fb02 f203 	mul.w	r2, r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	7a1b      	ldrb	r3, [r3, #8]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	2201      	movs	r2, #1
 80041ba:	409a      	lsls	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80041c8:	0a52      	lsrs	r2, r2, #9
 80041ca:	fb02 f203 	mul.w	r2, r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d8:	661a      	str	r2, [r3, #96]	; 0x60
 80041da:	e031      	b.n	8004240 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d11d      	bne.n	8004220 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f2:	0c1b      	lsrs	r3, r3, #16
 80041f4:	431a      	orrs	r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	3301      	adds	r3, #1
 8004200:	029a      	lsls	r2, r3, #10
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004214:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	661a      	str	r2, [r3, #96]	; 0x60
 800421e:	e00f      	b.n	8004240 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a58      	ldr	r2, [pc, #352]	; (8004388 <HAL_SD_GetCardCSD+0x344>)
 8004226:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e09d      	b.n	800437c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004244:	0b9b      	lsrs	r3, r3, #14
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	b2da      	uxtb	r2, r3
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004256:	09db      	lsrs	r3, r3, #7
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800425e:	b2da      	uxtb	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800426e:	b2da      	uxtb	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	0fdb      	lsrs	r3, r3, #31
 800427a:	b2da      	uxtb	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	0f5b      	lsrs	r3, r3, #29
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	b2da      	uxtb	r2, r3
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004296:	0e9b      	lsrs	r3, r3, #26
 8004298:	b2db      	uxtb	r3, r3
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	0d9b      	lsrs	r3, r3, #22
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	0d5b      	lsrs	r3, r3, #21
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	0c1b      	lsrs	r3, r3, #16
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	0bdb      	lsrs	r3, r3, #15
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	0b9b      	lsrs	r3, r3, #14
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	b2da      	uxtb	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	0b5b      	lsrs	r3, r3, #13
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	b2da      	uxtb	r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	0b1b      	lsrs	r3, r3, #12
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	b2da      	uxtb	r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	0a9b      	lsrs	r3, r3, #10
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	b2da      	uxtb	r2, r3
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	b2da      	uxtb	r2, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800436a:	b2da      	uxtb	r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	004005ff 	.word	0x004005ff

0800438c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80043e4:	b5b0      	push	{r4, r5, r7, lr}
 80043e6:	b08e      	sub	sp, #56	; 0x38
 80043e8:	af04      	add	r7, sp, #16
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2203      	movs	r2, #3
 80043f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004400:	2b03      	cmp	r3, #3
 8004402:	d02e      	beq.n	8004462 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440a:	d106      	bne.n	800441a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	639a      	str	r2, [r3, #56]	; 0x38
 8004418:	e029      	b.n	800446e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004420:	d10a      	bne.n	8004438 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fb28 	bl	8004a78 <SD_WideBus_Enable>
 8004428:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	639a      	str	r2, [r3, #56]	; 0x38
 8004436:	e01a      	b.n	800446e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fb65 	bl	8004b0e <SD_WideBus_Disable>
 8004444:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
 8004452:	e00c      	b.n	800446e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
 8004460:	e005      	b.n	800446e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00b      	beq.n	800448e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a26      	ldr	r2, [pc, #152]	; (8004514 <HAL_SD_ConfigWideBusOperation+0x130>)
 800447c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800448c:	e01f      	b.n	80044ce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681d      	ldr	r5, [r3, #0]
 80044b4:	466c      	mov	r4, sp
 80044b6:	f107 0314 	add.w	r3, r7, #20
 80044ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80044be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80044c2:	f107 0308 	add.w	r3, r7, #8
 80044c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044c8:	4628      	mov	r0, r5
 80044ca:	f002 f891 	bl	80065f0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044d6:	4618      	mov	r0, r3
 80044d8:	f002 f966 	bl	80067a8 <SDMMC_CmdBlockLength>
 80044dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00c      	beq.n	80044fe <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a0a      	ldr	r2, [pc, #40]	; (8004514 <HAL_SD_ConfigWideBusOperation+0x130>)
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800450a:	4618      	mov	r0, r3
 800450c:	3728      	adds	r7, #40	; 0x28
 800450e:	46bd      	mov	sp, r7
 8004510:	bdb0      	pop	{r4, r5, r7, pc}
 8004512:	bf00      	nop
 8004514:	004005ff 	.word	0x004005ff

08004518 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004524:	f107 030c 	add.w	r3, r7, #12
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa7c 	bl	8004a28 <SD_SendStatus>
 8004530:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	0a5b      	lsrs	r3, r3, #9
 8004548:	f003 030f 	and.w	r3, r3, #15
 800454c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800454e:	693b      	ldr	r3, [r7, #16]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004574:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	2b82      	cmp	r3, #130	; 0x82
 8004596:	d111      	bne.n	80045bc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f002 f9ad 	bl	80068fc <SDMMC_CmdStopTransfer>
 80045a2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d008      	beq.n	80045bc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f7ff fd3a 	bl	8004030 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0208 	bic.w	r2, r2, #8
 80045ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80045d4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f002 fe1d 	bl	8007224 <HAL_SD_RxCpltCallback>
#endif
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fe f8bc 	bl	8002780 <HAL_DMA_GetError>
 8004608:	4603      	mov	r3, r0
 800460a:	2b02      	cmp	r3, #2
 800460c:	d03e      	beq.n	800468c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004614:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d002      	beq.n	800462a <SD_DMAError+0x36>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d12d      	bne.n	8004686 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a19      	ldr	r2, [pc, #100]	; (8004694 <SD_DMAError+0xa0>)
 8004630:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004640:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800464e:	6978      	ldr	r0, [r7, #20]
 8004650:	f7ff ff62 	bl	8004518 <HAL_SD_GetCardState>
 8004654:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b06      	cmp	r3, #6
 800465a:	d002      	beq.n	8004662 <SD_DMAError+0x6e>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b05      	cmp	r3, #5
 8004660:	d10a      	bne.n	8004678 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f002 f948 	bl	80068fc <SDMMC_CmdStopTransfer>
 800466c:	4602      	mov	r2, r0
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	431a      	orrs	r2, r3
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004686:	6978      	ldr	r0, [r7, #20]
 8004688:	f7ff fcd2 	bl	8004030 <HAL_SD_ErrorCallback>
#endif
  }
}
 800468c:	bf00      	nop
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	004005ff 	.word	0x004005ff

08004698 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f7ff ff31 	bl	8004518 <HAL_SD_GetCardState>
 80046b6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b06      	cmp	r3, #6
 80046ca:	d002      	beq.n	80046d2 <SD_DMATxAbort+0x3a>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b05      	cmp	r3, #5
 80046d0:	d10a      	bne.n	80046e8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f002 f910 	bl	80068fc <SDMMC_CmdStopTransfer>
 80046dc:	4602      	mov	r2, r0
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	431a      	orrs	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f002 fd83 	bl	80071fc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80046f6:	e002      	b.n	80046fe <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f7ff fc99 	bl	8004030 <HAL_SD_ErrorCallback>
}
 80046fe:	bf00      	nop
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f240 523a 	movw	r2, #1338	; 0x53a
 800471c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff fefa 	bl	8004518 <HAL_SD_GetCardState>
 8004724:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b06      	cmp	r3, #6
 8004738:	d002      	beq.n	8004740 <SD_DMARxAbort+0x3a>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b05      	cmp	r3, #5
 800473e:	d10a      	bne.n	8004756 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f002 f8d9 	bl	80068fc <SDMMC_CmdStopTransfer>
 800474a:	4602      	mov	r2, r0
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	431a      	orrs	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	2b00      	cmp	r3, #0
 800475c:	d103      	bne.n	8004766 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f002 fd4c 	bl	80071fc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004764:	e002      	b.n	800476c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff fc62 	bl	8004030 <HAL_SD_ErrorCallback>
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004774:	b5b0      	push	{r4, r5, r7, lr}
 8004776:	b094      	sub	sp, #80	; 0x50
 8004778:	af04      	add	r7, sp, #16
 800477a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800477c:	2301      	movs	r3, #1
 800477e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f001 ff8b 	bl	80066a0 <SDIO_GetPowerState>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d102      	bne.n	8004796 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004790:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004794:	e0b6      	b.n	8004904 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	2b03      	cmp	r3, #3
 800479c:	d02f      	beq.n	80047fe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f002 f9b4 	bl	8006b10 <SDMMC_CmdSendCID>
 80047a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <SD_InitCard+0x40>
    {
      return errorstate;
 80047b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b2:	e0a7      	b.n	8004904 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 ffb5 	bl	800672a <SDIO_GetResponse>
 80047c0:	4602      	mov	r2, r0
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2104      	movs	r1, #4
 80047cc:	4618      	mov	r0, r3
 80047ce:	f001 ffac 	bl	800672a <SDIO_GetResponse>
 80047d2:	4602      	mov	r2, r0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2108      	movs	r1, #8
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 ffa3 	bl	800672a <SDIO_GetResponse>
 80047e4:	4602      	mov	r2, r0
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	210c      	movs	r1, #12
 80047f0:	4618      	mov	r0, r3
 80047f2:	f001 ff9a 	bl	800672a <SDIO_GetResponse>
 80047f6:	4602      	mov	r2, r0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	2b03      	cmp	r3, #3
 8004804:	d00d      	beq.n	8004822 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f107 020e 	add.w	r2, r7, #14
 800480e:	4611      	mov	r1, r2
 8004810:	4618      	mov	r0, r3
 8004812:	f002 f9ba 	bl	8006b8a <SDMMC_CmdSetRelAdd>
 8004816:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <SD_InitCard+0xae>
    {
      return errorstate;
 800481e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004820:	e070      	b.n	8004904 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	2b03      	cmp	r3, #3
 8004828:	d036      	beq.n	8004898 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800482a:	89fb      	ldrh	r3, [r7, #14]
 800482c:	461a      	mov	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483a:	041b      	lsls	r3, r3, #16
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f002 f984 	bl	8006b4c <SDMMC_CmdSendCSD>
 8004844:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <SD_InitCard+0xdc>
    {
      return errorstate;
 800484c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484e:	e059      	b.n	8004904 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2100      	movs	r1, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f001 ff67 	bl	800672a <SDIO_GetResponse>
 800485c:	4602      	mov	r2, r0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2104      	movs	r1, #4
 8004868:	4618      	mov	r0, r3
 800486a:	f001 ff5e 	bl	800672a <SDIO_GetResponse>
 800486e:	4602      	mov	r2, r0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2108      	movs	r1, #8
 800487a:	4618      	mov	r0, r3
 800487c:	f001 ff55 	bl	800672a <SDIO_GetResponse>
 8004880:	4602      	mov	r2, r0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	210c      	movs	r1, #12
 800488c:	4618      	mov	r0, r3
 800488e:	f001 ff4c 	bl	800672a <SDIO_GetResponse>
 8004892:	4602      	mov	r2, r0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2104      	movs	r1, #4
 800489e:	4618      	mov	r0, r3
 80048a0:	f001 ff43 	bl	800672a <SDIO_GetResponse>
 80048a4:	4603      	mov	r3, r0
 80048a6:	0d1a      	lsrs	r2, r3, #20
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80048ac:	f107 0310 	add.w	r3, r7, #16
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff fbc6 	bl	8004044 <HAL_SD_GetCardCSD>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80048c2:	e01f      	b.n	8004904 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6819      	ldr	r1, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	461a      	mov	r2, r3
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	4608      	mov	r0, r1
 80048d6:	f002 f833 	bl	8006940 <SDMMC_CmdSelDesel>
 80048da:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80048dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <SD_InitCard+0x172>
  {
    return errorstate;
 80048e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e4:	e00e      	b.n	8004904 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681d      	ldr	r5, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	466c      	mov	r4, sp
 80048ee:	f103 0210 	add.w	r2, r3, #16
 80048f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80048f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80048f8:	3304      	adds	r3, #4
 80048fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048fc:	4628      	mov	r0, r5
 80048fe:	f001 fe77 	bl	80065f0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3740      	adds	r7, #64	; 0x40
 8004908:	46bd      	mov	sp, r7
 800490a:	bdb0      	pop	{r4, r5, r7, pc}

0800490c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f002 f82e 	bl	8006986 <SDMMC_CmdGoIdleState>
 800492a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	e072      	b.n	8004a1c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f002 f841 	bl	80069c2 <SDMMC_CmdOperCond>
 8004940:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00d      	beq.n	8004964 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f002 f817 	bl	8006986 <SDMMC_CmdGoIdleState>
 8004958:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	e05b      	b.n	8004a1c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496e:	2b01      	cmp	r3, #1
 8004970:	d137      	bne.n	80049e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f002 f841 	bl	8006a00 <SDMMC_CmdAppCommand>
 800497e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d02d      	beq.n	80049e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004986:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800498a:	e047      	b.n	8004a1c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f002 f834 	bl	8006a00 <SDMMC_CmdAppCommand>
 8004998:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	e03b      	b.n	8004a1c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	491e      	ldr	r1, [pc, #120]	; (8004a24 <SD_PowerON+0x118>)
 80049aa:	4618      	mov	r0, r3
 80049ac:	f002 f84a 	bl	8006a44 <SDMMC_CmdAppOperCommand>
 80049b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80049bc:	e02e      	b.n	8004a1c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 feb0 	bl	800672a <SDIO_GetResponse>
 80049ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	0fdb      	lsrs	r3, r3, #31
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <SD_PowerON+0xcc>
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <SD_PowerON+0xce>
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]

    count++;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	3301      	adds	r3, #1
 80049e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d802      	bhi.n	80049f2 <SD_PowerON+0xe6>
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0cc      	beq.n	800498c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d902      	bls.n	8004a02 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80049fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a00:	e00c      	b.n	8004a1c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
 8004a12:	e002      	b.n	8004a1a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	c1100000 	.word	0xc1100000

08004a28 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004a38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a3c:	e018      	b.n	8004a70 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a46:	041b      	lsls	r3, r3, #16
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f002 f8be 	bl	8006bcc <SDMMC_CmdSendStatus>
 8004a50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	e009      	b.n	8004a70 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fe61 	bl	800672a <SDIO_GetResponse>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f001 fe4b 	bl	800672a <SDIO_GetResponse>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a9e:	d102      	bne.n	8004aa6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aa4:	e02f      	b.n	8004b06 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004aa6:	f107 030c 	add.w	r3, r7, #12
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f879 	bl	8004ba4 <SD_FindSCR>
 8004ab2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	e023      	b.n	8004b06 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01c      	beq.n	8004b02 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad0:	041b      	lsls	r3, r3, #16
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	f001 ff93 	bl	8006a00 <SDMMC_CmdAppCommand>
 8004ada:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	e00f      	b.n	8004b06 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2102      	movs	r1, #2
 8004aec:	4618      	mov	r0, r3
 8004aee:	f001 ffcc 	bl	8006a8a <SDMMC_CmdBusWidth>
 8004af2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	e003      	b.n	8004b06 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e001      	b.n	8004b06 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b086      	sub	sp, #24
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2100      	movs	r1, #0
 8004b24:	4618      	mov	r0, r3
 8004b26:	f001 fe00 	bl	800672a <SDIO_GetResponse>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b34:	d102      	bne.n	8004b3c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b3a:	e02f      	b.n	8004b9c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b3c:	f107 030c 	add.w	r3, r7, #12
 8004b40:	4619      	mov	r1, r3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f82e 	bl	8004ba4 <SD_FindSCR>
 8004b48:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	e023      	b.n	8004b9c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d01c      	beq.n	8004b98 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b66:	041b      	lsls	r3, r3, #16
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f001 ff48 	bl	8006a00 <SDMMC_CmdAppCommand>
 8004b70:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	e00f      	b.n	8004b9c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 ff81 	bl	8006a8a <SDMMC_CmdBusWidth>
 8004b88:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	e003      	b.n	8004b9c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e001      	b.n	8004b9c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b08f      	sub	sp, #60	; 0x3c
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004bae:	f7fd f983 	bl	8001eb8 <HAL_GetTick>
 8004bb2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2108      	movs	r1, #8
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f001 fdec 	bl	80067a8 <SDMMC_CmdBlockLength>
 8004bd0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <SD_FindSCR+0x38>
  {
    return errorstate;
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	e0b2      	b.n	8004d42 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	4619      	mov	r1, r3
 8004be8:	4610      	mov	r0, r2
 8004bea:	f001 ff09 	bl	8006a00 <SDMMC_CmdAppCommand>
 8004bee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <SD_FindSCR+0x56>
  {
    return errorstate;
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	e0a3      	b.n	8004d42 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004c00:	2308      	movs	r3, #8
 8004c02:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004c04:	2330      	movs	r3, #48	; 0x30
 8004c06:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004c10:	2301      	movs	r3, #1
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f107 0210 	add.w	r2, r7, #16
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f001 fd96 	bl	8006750 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 ff50 	bl	8006ace <SDMMC_CmdSendSCR>
 8004c2e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d02a      	beq.n	8004c8c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	e083      	b.n	8004d42 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00f      	beq.n	8004c68 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6819      	ldr	r1, [r3, #0]
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	f107 0208 	add.w	r2, r7, #8
 8004c54:	18d4      	adds	r4, r2, r3
 8004c56:	4608      	mov	r0, r1
 8004c58:	f001 fcf5 	bl	8006646 <SDIO_ReadFIFO>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	6023      	str	r3, [r4, #0]
      index++;
 8004c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c62:	3301      	adds	r3, #1
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
 8004c66:	e006      	b.n	8004c76 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d012      	beq.n	8004c9c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004c76:	f7fd f91f 	bl	8001eb8 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c84:	d102      	bne.n	8004c8c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004c86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c8a:	e05a      	b.n	8004d42 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c92:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0cf      	beq.n	8004c3a <SD_FindSCR+0x96>
 8004c9a:	e000      	b.n	8004c9e <SD_FindSCR+0xfa>
      break;
 8004c9c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	e044      	b.n	8004d42 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e037      	b.n	8004d42 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004ce8:	2320      	movs	r3, #32
 8004cea:	e02a      	b.n	8004d42 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f240 523a 	movw	r2, #1338	; 0x53a
 8004cf4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	061a      	lsls	r2, r3, #24
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d02:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d0c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	0e1b      	lsrs	r3, r3, #24
 8004d12:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	601a      	str	r2, [r3, #0]
    scr++;
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	061a      	lsls	r2, r3, #24
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d2a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	0a1b      	lsrs	r3, r3, #8
 8004d30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d34:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	0e1b      	lsrs	r3, r3, #24
 8004d3a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	373c      	adds	r7, #60	; 0x3c
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd90      	pop	{r4, r7, pc}

08004d4a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b086      	sub	sp, #24
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d03f      	beq.n	8004de4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	e033      	b.n	8004dd2 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f001 fc69 	bl	8006646 <SDIO_ReadFIFO>
 8004d74:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3301      	adds	r3, #1
 8004d82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	0a1b      	lsrs	r3, r3, #8
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	0c1b      	lsrs	r3, r3, #16
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3301      	adds	r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	0e1b      	lsrs	r3, r3, #24
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b07      	cmp	r3, #7
 8004dd6:	d9c8      	bls.n	8004d6a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004de4:	bf00      	nop
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d043      	beq.n	8004e8e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	e037      	b.n	8004e7c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3301      	adds	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	021a      	lsls	r2, r3, #8
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	041a      	lsls	r2, r3, #16
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3301      	adds	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	061a      	lsls	r2, r3, #24
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f107 0208 	add.w	r2, r7, #8
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 fbf5 	bl	8006660 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b07      	cmp	r3, #7
 8004e80:	d9c4      	bls.n	8004e0c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004e8e:	bf00      	nop
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e041      	b.n	8004f2c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d106      	bne.n	8004ec2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7fc fe03 	bl	8001ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	f000 fa87 	bl	80053e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d001      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e044      	b.n	8004fd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1e      	ldr	r2, [pc, #120]	; (8004fe4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d018      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f76:	d013      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1a      	ldr	r2, [pc, #104]	; (8004fe8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00e      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a19      	ldr	r2, [pc, #100]	; (8004fec <HAL_TIM_Base_Start_IT+0xb8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d009      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a17      	ldr	r2, [pc, #92]	; (8004ff0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d111      	bne.n	8004fc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d010      	beq.n	8004fd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc2:	e007      	b.n	8004fd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40010000 	.word	0x40010000
 8004fe8:	40000400 	.word	0x40000400
 8004fec:	40000800 	.word	0x40000800
 8004ff0:	40000c00 	.word	0x40000c00
 8004ff4:	40014000 	.word	0x40014000

08004ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b02      	cmp	r3, #2
 800500c:	d122      	bne.n	8005054 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b02      	cmp	r3, #2
 800501a:	d11b      	bne.n	8005054 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0202 	mvn.w	r2, #2
 8005024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f9b5 	bl	80053aa <HAL_TIM_IC_CaptureCallback>
 8005040:	e005      	b.n	800504e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f9a7 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f9b8 	bl	80053be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b04      	cmp	r3, #4
 8005060:	d122      	bne.n	80050a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b04      	cmp	r3, #4
 800506e:	d11b      	bne.n	80050a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0204 	mvn.w	r2, #4
 8005078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2202      	movs	r2, #2
 800507e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f98b 	bl	80053aa <HAL_TIM_IC_CaptureCallback>
 8005094:	e005      	b.n	80050a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f97d 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f98e 	bl	80053be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d122      	bne.n	80050fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d11b      	bne.n	80050fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0208 	mvn.w	r2, #8
 80050cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2204      	movs	r2, #4
 80050d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f961 	bl	80053aa <HAL_TIM_IC_CaptureCallback>
 80050e8:	e005      	b.n	80050f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f953 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f964 	bl	80053be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0310 	and.w	r3, r3, #16
 8005106:	2b10      	cmp	r3, #16
 8005108:	d122      	bne.n	8005150 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0310 	and.w	r3, r3, #16
 8005114:	2b10      	cmp	r3, #16
 8005116:	d11b      	bne.n	8005150 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0210 	mvn.w	r2, #16
 8005120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2208      	movs	r2, #8
 8005126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f937 	bl	80053aa <HAL_TIM_IC_CaptureCallback>
 800513c:	e005      	b.n	800514a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f929 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f93a 	bl	80053be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b01      	cmp	r3, #1
 800515c:	d10e      	bne.n	800517c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b01      	cmp	r3, #1
 800516a:	d107      	bne.n	800517c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0201 	mvn.w	r2, #1
 8005174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fb fff6 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b80      	cmp	r3, #128	; 0x80
 8005188:	d10e      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005194:	2b80      	cmp	r3, #128	; 0x80
 8005196:	d107      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fab2 	bl	800570c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b2:	2b40      	cmp	r3, #64	; 0x40
 80051b4:	d10e      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	d107      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f8ff 	bl	80053d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b20      	cmp	r3, #32
 80051e0:	d10e      	bne.n	8005200 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d107      	bne.n	8005200 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0220 	mvn.w	r2, #32
 80051f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fa7c 	bl	80056f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005200:	bf00      	nop
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_TIM_ConfigClockSource+0x1c>
 8005220:	2302      	movs	r3, #2
 8005222:	e0b4      	b.n	800538e <HAL_TIM_ConfigClockSource+0x186>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800524a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525c:	d03e      	beq.n	80052dc <HAL_TIM_ConfigClockSource+0xd4>
 800525e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005262:	f200 8087 	bhi.w	8005374 <HAL_TIM_ConfigClockSource+0x16c>
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	f000 8086 	beq.w	800537a <HAL_TIM_ConfigClockSource+0x172>
 800526e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005272:	d87f      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b70      	cmp	r3, #112	; 0x70
 8005276:	d01a      	beq.n	80052ae <HAL_TIM_ConfigClockSource+0xa6>
 8005278:	2b70      	cmp	r3, #112	; 0x70
 800527a:	d87b      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b60      	cmp	r3, #96	; 0x60
 800527e:	d050      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x11a>
 8005280:	2b60      	cmp	r3, #96	; 0x60
 8005282:	d877      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x16c>
 8005284:	2b50      	cmp	r3, #80	; 0x50
 8005286:	d03c      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0xfa>
 8005288:	2b50      	cmp	r3, #80	; 0x50
 800528a:	d873      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x16c>
 800528c:	2b40      	cmp	r3, #64	; 0x40
 800528e:	d058      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x13a>
 8005290:	2b40      	cmp	r3, #64	; 0x40
 8005292:	d86f      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x16c>
 8005294:	2b30      	cmp	r3, #48	; 0x30
 8005296:	d064      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x15a>
 8005298:	2b30      	cmp	r3, #48	; 0x30
 800529a:	d86b      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x16c>
 800529c:	2b20      	cmp	r3, #32
 800529e:	d060      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x15a>
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d867      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x16c>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d05c      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x15a>
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d05a      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x15a>
 80052ac:	e062      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6899      	ldr	r1, [r3, #8]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f000 f98d 	bl	80055dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	609a      	str	r2, [r3, #8]
      break;
 80052da:	e04f      	b.n	800537c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	6899      	ldr	r1, [r3, #8]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f000 f976 	bl	80055dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052fe:	609a      	str	r2, [r3, #8]
      break;
 8005300:	e03c      	b.n	800537c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	461a      	mov	r2, r3
 8005310:	f000 f8ea 	bl	80054e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2150      	movs	r1, #80	; 0x50
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f943 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 8005320:	e02c      	b.n	800537c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6859      	ldr	r1, [r3, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	461a      	mov	r2, r3
 8005330:	f000 f909 	bl	8005546 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2160      	movs	r1, #96	; 0x60
 800533a:	4618      	mov	r0, r3
 800533c:	f000 f933 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 8005340:	e01c      	b.n	800537c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6859      	ldr	r1, [r3, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	461a      	mov	r2, r3
 8005350:	f000 f8ca 	bl	80054e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2140      	movs	r1, #64	; 0x40
 800535a:	4618      	mov	r0, r3
 800535c:	f000 f923 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 8005360:	e00c      	b.n	800537c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4619      	mov	r1, r3
 800536c:	4610      	mov	r0, r2
 800536e:	f000 f91a 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 8005372:	e003      	b.n	800537c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
      break;
 8005378:	e000      	b.n	800537c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800537a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800538c:	7bfb      	ldrb	r3, [r7, #15]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a34      	ldr	r2, [pc, #208]	; (80054cc <TIM_Base_SetConfig+0xe4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00f      	beq.n	8005420 <TIM_Base_SetConfig+0x38>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005406:	d00b      	beq.n	8005420 <TIM_Base_SetConfig+0x38>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a31      	ldr	r2, [pc, #196]	; (80054d0 <TIM_Base_SetConfig+0xe8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <TIM_Base_SetConfig+0x38>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a30      	ldr	r2, [pc, #192]	; (80054d4 <TIM_Base_SetConfig+0xec>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_Base_SetConfig+0x38>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a2f      	ldr	r2, [pc, #188]	; (80054d8 <TIM_Base_SetConfig+0xf0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d108      	bne.n	8005432 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a25      	ldr	r2, [pc, #148]	; (80054cc <TIM_Base_SetConfig+0xe4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01b      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005440:	d017      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <TIM_Base_SetConfig+0xe8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a21      	ldr	r2, [pc, #132]	; (80054d4 <TIM_Base_SetConfig+0xec>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00f      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a20      	ldr	r2, [pc, #128]	; (80054d8 <TIM_Base_SetConfig+0xf0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00b      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1f      	ldr	r2, [pc, #124]	; (80054dc <TIM_Base_SetConfig+0xf4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d007      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a1e      	ldr	r2, [pc, #120]	; (80054e0 <TIM_Base_SetConfig+0xf8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d003      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a1d      	ldr	r2, [pc, #116]	; (80054e4 <TIM_Base_SetConfig+0xfc>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d108      	bne.n	8005484 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a08      	ldr	r2, [pc, #32]	; (80054cc <TIM_Base_SetConfig+0xe4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d103      	bne.n	80054b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	615a      	str	r2, [r3, #20]
}
 80054be:	bf00      	nop
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40000c00 	.word	0x40000c00
 80054dc:	40014000 	.word	0x40014000
 80054e0:	40014400 	.word	0x40014400
 80054e4:	40014800 	.word	0x40014800

080054e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f023 0201 	bic.w	r2, r3, #1
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f023 030a 	bic.w	r3, r3, #10
 8005524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005546:	b480      	push	{r7}
 8005548:	b087      	sub	sp, #28
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	f023 0210 	bic.w	r2, r3, #16
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	031b      	lsls	r3, r3, #12
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005582:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f043 0307 	orr.w	r3, r3, #7
 80055c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	609a      	str	r2, [r3, #8]
}
 80055d0:	bf00      	nop
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	021a      	lsls	r2, r3, #8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	431a      	orrs	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4313      	orrs	r3, r2
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	609a      	str	r2, [r3, #8]
}
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005630:	2302      	movs	r3, #2
 8005632:	e050      	b.n	80056d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1c      	ldr	r2, [pc, #112]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d018      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005680:	d013      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00e      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a16      	ldr	r2, [pc, #88]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d009      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d004      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d10c      	bne.n	80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800
 80056f0:	40000c00 	.word	0x40000c00
 80056f4:	40014000 	.word	0x40014000

080056f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e03f      	b.n	80057b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fc fa64 	bl	8001c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2224      	movs	r2, #36	; 0x24
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fd7b 	bl	8006260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b08a      	sub	sp, #40	; 0x28
 80057be:	af02      	add	r7, sp, #8
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	603b      	str	r3, [r7, #0]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	d17c      	bne.n	80058d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_UART_Transmit+0x2c>
 80057e0:	88fb      	ldrh	r3, [r7, #6]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e075      	b.n	80058d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_UART_Transmit+0x3e>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e06e      	b.n	80058d6 <HAL_UART_Transmit+0x11c>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2221      	movs	r2, #33	; 0x21
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800580e:	f7fc fb53 	bl	8001eb8 <HAL_GetTick>
 8005812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	88fa      	ldrh	r2, [r7, #6]
 8005818:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	88fa      	ldrh	r2, [r7, #6]
 800581e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005828:	d108      	bne.n	800583c <HAL_UART_Transmit+0x82>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d104      	bne.n	800583c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e003      	b.n	8005844 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800584c:	e02a      	b.n	80058a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2200      	movs	r2, #0
 8005856:	2180      	movs	r1, #128	; 0x80
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 faf9 	bl	8005e50 <UART_WaitOnFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e036      	b.n	80058d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800587c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	3302      	adds	r3, #2
 8005882:	61bb      	str	r3, [r7, #24]
 8005884:	e007      	b.n	8005896 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	781a      	ldrb	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	3301      	adds	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1cf      	bne.n	800584e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2200      	movs	r2, #0
 80058b6:	2140      	movs	r1, #64	; 0x40
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fac9 	bl	8005e50 <UART_WaitOnFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e006      	b.n	80058d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e000      	b.n	80058d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058d4:	2302      	movs	r3, #2
  }
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b0ba      	sub	sp, #232	; 0xe8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005906:	2300      	movs	r3, #0
 8005908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800590c:	2300      	movs	r3, #0
 800590e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800591e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10f      	bne.n	8005946 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <HAL_UART_IRQHandler+0x66>
 8005932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fbd3 	bl	80060ea <UART_Receive_IT>
      return;
 8005944:	e256      	b.n	8005df4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 80de 	beq.w	8005b0c <HAL_UART_IRQHandler+0x22c>
 8005950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800595c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005960:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 80d1 	beq.w	8005b0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800596a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00b      	beq.n	800598e <HAL_UART_IRQHandler+0xae>
 8005976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	f043 0201 	orr.w	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800598e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00b      	beq.n	80059b2 <HAL_UART_IRQHandler+0xd2>
 800599a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f043 0202 	orr.w	r2, r3, #2
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <HAL_UART_IRQHandler+0xf6>
 80059be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	f043 0204 	orr.w	r2, r3, #4
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d011      	beq.n	8005a06 <HAL_UART_IRQHandler+0x126>
 80059e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d105      	bne.n	80059fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	f043 0208 	orr.w	r2, r3, #8
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 81ed 	beq.w	8005dea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d008      	beq.n	8005a2e <HAL_UART_IRQHandler+0x14e>
 8005a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fb5e 	bl	80060ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a38:	2b40      	cmp	r3, #64	; 0x40
 8005a3a:	bf0c      	ite	eq
 8005a3c:	2301      	moveq	r3, #1
 8005a3e:	2300      	movne	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <HAL_UART_IRQHandler+0x17a>
 8005a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d04f      	beq.n	8005afa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fa66 	bl	8005f2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d141      	bne.n	8005af2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3314      	adds	r3, #20
 8005a74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3314      	adds	r3, #20
 8005a96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1d9      	bne.n	8005a6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d013      	beq.n	8005aea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	4a7d      	ldr	r2, [pc, #500]	; (8005cbc <HAL_UART_IRQHandler+0x3dc>)
 8005ac8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fc fcaa 	bl	8002428 <HAL_DMA_Abort_IT>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d016      	beq.n	8005b08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	e00e      	b.n	8005b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f99a 	bl	8005e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	e00a      	b.n	8005b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f996 	bl	8005e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	e006      	b.n	8005b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f992 	bl	8005e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b06:	e170      	b.n	8005dea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	bf00      	nop
    return;
 8005b0a:	e16e      	b.n	8005dea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	f040 814a 	bne.w	8005daa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8143 	beq.w	8005daa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 813c 	beq.w	8005daa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b32:	2300      	movs	r3, #0
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	60bb      	str	r3, [r7, #8]
 8005b46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b52:	2b40      	cmp	r3, #64	; 0x40
 8005b54:	f040 80b4 	bne.w	8005cc0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 8140 	beq.w	8005dee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b76:	429a      	cmp	r2, r3
 8005b78:	f080 8139 	bcs.w	8005dee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8e:	f000 8088 	beq.w	8005ca2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	330c      	adds	r3, #12
 8005b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1d9      	bne.n	8005b92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3314      	adds	r3, #20
 8005be4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3314      	adds	r3, #20
 8005bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e1      	bne.n	8005bde <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3314      	adds	r3, #20
 8005c20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3314      	adds	r3, #20
 8005c3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e3      	bne.n	8005c1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	330c      	adds	r3, #12
 8005c66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c72:	f023 0310 	bic.w	r3, r3, #16
 8005c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c84:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c8c:	e841 2300 	strex	r3, r2, [r1]
 8005c90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e3      	bne.n	8005c60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fc fb53 	bl	8002348 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f8c0 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cb8:	e099      	b.n	8005dee <HAL_UART_IRQHandler+0x50e>
 8005cba:	bf00      	nop
 8005cbc:	08005ff3 	.word	0x08005ff3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 808b 	beq.w	8005df2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8086 	beq.w	8005df2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	330c      	adds	r3, #12
 8005d06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d0a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e3      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3314      	adds	r3, #20
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	f023 0301 	bic.w	r3, r3, #1
 8005d34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3314      	adds	r3, #20
 8005d3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d42:	633a      	str	r2, [r7, #48]	; 0x30
 8005d44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e3      	bne.n	8005d1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	330c      	adds	r3, #12
 8005d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0310 	bic.w	r3, r3, #16
 8005d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	330c      	adds	r3, #12
 8005d84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d88:	61fa      	str	r2, [r7, #28]
 8005d8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	69b9      	ldr	r1, [r7, #24]
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	617b      	str	r3, [r7, #20]
   return(result);
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e3      	bne.n	8005d64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f848 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005da8:	e023      	b.n	8005df2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <HAL_UART_IRQHandler+0x4ea>
 8005db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f929 	bl	800601a <UART_Transmit_IT>
    return;
 8005dc8:	e014      	b.n	8005df4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00e      	beq.n	8005df4 <HAL_UART_IRQHandler+0x514>
 8005dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d008      	beq.n	8005df4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f969 	bl	80060ba <UART_EndTransmit_IT>
    return;
 8005de8:	e004      	b.n	8005df4 <HAL_UART_IRQHandler+0x514>
    return;
 8005dea:	bf00      	nop
 8005dec:	e002      	b.n	8005df4 <HAL_UART_IRQHandler+0x514>
      return;
 8005dee:	bf00      	nop
 8005df0:	e000      	b.n	8005df4 <HAL_UART_IRQHandler+0x514>
      return;
 8005df2:	bf00      	nop
  }
}
 8005df4:	37e8      	adds	r7, #232	; 0xe8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop

08005dfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b090      	sub	sp, #64	; 0x40
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e60:	e050      	b.n	8005f04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e68:	d04c      	beq.n	8005f04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d007      	beq.n	8005e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e70:	f7fc f822 	bl	8001eb8 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d241      	bcs.n	8005f04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	330c      	adds	r3, #12
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ea0:	637a      	str	r2, [r7, #52]	; 0x34
 8005ea2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e5      	bne.n	8005e80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3314      	adds	r3, #20
 8005eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f023 0301 	bic.w	r3, r3, #1
 8005eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3314      	adds	r3, #20
 8005ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ed4:	623a      	str	r2, [r7, #32]
 8005ed6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	69f9      	ldr	r1, [r7, #28]
 8005eda:	6a3a      	ldr	r2, [r7, #32]
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e5      	bne.n	8005eb4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e00f      	b.n	8005f24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	bf0c      	ite	eq
 8005f14:	2301      	moveq	r3, #1
 8005f16:	2300      	movne	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d09f      	beq.n	8005e62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3740      	adds	r7, #64	; 0x40
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b095      	sub	sp, #84	; 0x54
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	330c      	adds	r3, #12
 8005f3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	330c      	adds	r3, #12
 8005f52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f54:	643a      	str	r2, [r7, #64]	; 0x40
 8005f56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e5      	bne.n	8005f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3314      	adds	r3, #20
 8005f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f023 0301 	bic.w	r3, r3, #1
 8005f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3314      	adds	r3, #20
 8005f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e5      	bne.n	8005f68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d119      	bne.n	8005fd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f023 0310 	bic.w	r3, r3, #16
 8005fba:	647b      	str	r3, [r7, #68]	; 0x44
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc4:	61ba      	str	r2, [r7, #24]
 8005fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6979      	ldr	r1, [r7, #20]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e5      	bne.n	8005fa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fe6:	bf00      	nop
 8005fe8:	3754      	adds	r7, #84	; 0x54
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7ff ff09 	bl	8005e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800601a:	b480      	push	{r7}
 800601c:	b085      	sub	sp, #20
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b21      	cmp	r3, #33	; 0x21
 800602c:	d13e      	bne.n	80060ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006036:	d114      	bne.n	8006062 <UART_Transmit_IT+0x48>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d110      	bne.n	8006062 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006054:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	1c9a      	adds	r2, r3, #2
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	621a      	str	r2, [r3, #32]
 8006060:	e008      	b.n	8006074 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	1c59      	adds	r1, r3, #1
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6211      	str	r1, [r2, #32]
 800606c:	781a      	ldrb	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29b      	uxth	r3, r3
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	4619      	mov	r1, r3
 8006082:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10f      	bne.n	80060a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006096:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	e000      	b.n	80060ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060ac:	2302      	movs	r3, #2
  }
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff fe8e 	bl	8005dfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b08c      	sub	sp, #48	; 0x30
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b22      	cmp	r3, #34	; 0x22
 80060fc:	f040 80ab 	bne.w	8006256 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006108:	d117      	bne.n	800613a <UART_Receive_IT+0x50>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d113      	bne.n	800613a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006112:	2300      	movs	r3, #0
 8006114:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	b29b      	uxth	r3, r3
 8006124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006128:	b29a      	uxth	r2, r3
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	1c9a      	adds	r2, r3, #2
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	629a      	str	r2, [r3, #40]	; 0x28
 8006138:	e026      	b.n	8006188 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006140:	2300      	movs	r3, #0
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614c:	d007      	beq.n	800615e <UART_Receive_IT+0x74>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <UART_Receive_IT+0x82>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	b2da      	uxtb	r2, r3
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	e008      	b.n	800617e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006178:	b2da      	uxtb	r2, r3
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29b      	uxth	r3, r3
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	4619      	mov	r1, r3
 8006196:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006198:	2b00      	cmp	r3, #0
 800619a:	d15a      	bne.n	8006252 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0220 	bic.w	r2, r2, #32
 80061aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0201 	bic.w	r2, r2, #1
 80061ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d135      	bne.n	8006248 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	330c      	adds	r3, #12
 80061e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	613b      	str	r3, [r7, #16]
   return(result);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f023 0310 	bic.w	r3, r3, #16
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	330c      	adds	r3, #12
 8006200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006202:	623a      	str	r2, [r7, #32]
 8006204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	69f9      	ldr	r1, [r7, #28]
 8006208:	6a3a      	ldr	r2, [r7, #32]
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e5      	bne.n	80061e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b10      	cmp	r3, #16
 8006222:	d10a      	bne.n	800623a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff fdf9 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
 8006246:	e002      	b.n	800624e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff fde1 	bl	8005e10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	e002      	b.n	8006258 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	e000      	b.n	8006258 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006256:	2302      	movs	r3, #2
  }
}
 8006258:	4618      	mov	r0, r3
 800625a:	3730      	adds	r7, #48	; 0x30
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	b09f      	sub	sp, #124	; 0x7c
 8006266:	af00      	add	r7, sp, #0
 8006268:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800626a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006276:	68d9      	ldr	r1, [r3, #12]
 8006278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	ea40 0301 	orr.w	r3, r0, r1
 8006280:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	431a      	orrs	r2, r3
 800628c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	431a      	orrs	r2, r3
 8006292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	4313      	orrs	r3, r2
 8006298:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800629a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062a4:	f021 010c 	bic.w	r1, r1, #12
 80062a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062ae:	430b      	orrs	r3, r1
 80062b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062be:	6999      	ldr	r1, [r3, #24]
 80062c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	ea40 0301 	orr.w	r3, r0, r1
 80062c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4bc5      	ldr	r3, [pc, #788]	; (80065e4 <UART_SetConfig+0x384>)
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d004      	beq.n	80062de <UART_SetConfig+0x7e>
 80062d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4bc3      	ldr	r3, [pc, #780]	; (80065e8 <UART_SetConfig+0x388>)
 80062da:	429a      	cmp	r2, r3
 80062dc:	d103      	bne.n	80062e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062de:	f7fd fa97 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 80062e2:	6778      	str	r0, [r7, #116]	; 0x74
 80062e4:	e002      	b.n	80062ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062e6:	f7fd fa7f 	bl	80037e8 <HAL_RCC_GetPCLK1Freq>
 80062ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f4:	f040 80b6 	bne.w	8006464 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062fa:	461c      	mov	r4, r3
 80062fc:	f04f 0500 	mov.w	r5, #0
 8006300:	4622      	mov	r2, r4
 8006302:	462b      	mov	r3, r5
 8006304:	1891      	adds	r1, r2, r2
 8006306:	6439      	str	r1, [r7, #64]	; 0x40
 8006308:	415b      	adcs	r3, r3
 800630a:	647b      	str	r3, [r7, #68]	; 0x44
 800630c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006310:	1912      	adds	r2, r2, r4
 8006312:	eb45 0303 	adc.w	r3, r5, r3
 8006316:	f04f 0000 	mov.w	r0, #0
 800631a:	f04f 0100 	mov.w	r1, #0
 800631e:	00d9      	lsls	r1, r3, #3
 8006320:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006324:	00d0      	lsls	r0, r2, #3
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	1911      	adds	r1, r2, r4
 800632c:	6639      	str	r1, [r7, #96]	; 0x60
 800632e:	416b      	adcs	r3, r5
 8006330:	667b      	str	r3, [r7, #100]	; 0x64
 8006332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	461a      	mov	r2, r3
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	1891      	adds	r1, r2, r2
 800633e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006340:	415b      	adcs	r3, r3
 8006342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006348:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800634c:	f7fa fc34 	bl	8000bb8 <__aeabi_uldivmod>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4ba5      	ldr	r3, [pc, #660]	; (80065ec <UART_SetConfig+0x38c>)
 8006356:	fba3 2302 	umull	r2, r3, r3, r2
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	011e      	lsls	r6, r3, #4
 800635e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006360:	461c      	mov	r4, r3
 8006362:	f04f 0500 	mov.w	r5, #0
 8006366:	4622      	mov	r2, r4
 8006368:	462b      	mov	r3, r5
 800636a:	1891      	adds	r1, r2, r2
 800636c:	6339      	str	r1, [r7, #48]	; 0x30
 800636e:	415b      	adcs	r3, r3
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
 8006372:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006376:	1912      	adds	r2, r2, r4
 8006378:	eb45 0303 	adc.w	r3, r5, r3
 800637c:	f04f 0000 	mov.w	r0, #0
 8006380:	f04f 0100 	mov.w	r1, #0
 8006384:	00d9      	lsls	r1, r3, #3
 8006386:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800638a:	00d0      	lsls	r0, r2, #3
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	1911      	adds	r1, r2, r4
 8006392:	65b9      	str	r1, [r7, #88]	; 0x58
 8006394:	416b      	adcs	r3, r5
 8006396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	461a      	mov	r2, r3
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	1891      	adds	r1, r2, r2
 80063a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80063a6:	415b      	adcs	r3, r3
 80063a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80063b2:	f7fa fc01 	bl	8000bb8 <__aeabi_uldivmod>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4b8c      	ldr	r3, [pc, #560]	; (80065ec <UART_SetConfig+0x38c>)
 80063bc:	fba3 1302 	umull	r1, r3, r3, r2
 80063c0:	095b      	lsrs	r3, r3, #5
 80063c2:	2164      	movs	r1, #100	; 0x64
 80063c4:	fb01 f303 	mul.w	r3, r1, r3
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	3332      	adds	r3, #50	; 0x32
 80063ce:	4a87      	ldr	r2, [pc, #540]	; (80065ec <UART_SetConfig+0x38c>)
 80063d0:	fba2 2303 	umull	r2, r3, r2, r3
 80063d4:	095b      	lsrs	r3, r3, #5
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063dc:	441e      	add	r6, r3
 80063de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e0:	4618      	mov	r0, r3
 80063e2:	f04f 0100 	mov.w	r1, #0
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	1894      	adds	r4, r2, r2
 80063ec:	623c      	str	r4, [r7, #32]
 80063ee:	415b      	adcs	r3, r3
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
 80063f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063f6:	1812      	adds	r2, r2, r0
 80063f8:	eb41 0303 	adc.w	r3, r1, r3
 80063fc:	f04f 0400 	mov.w	r4, #0
 8006400:	f04f 0500 	mov.w	r5, #0
 8006404:	00dd      	lsls	r5, r3, #3
 8006406:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800640a:	00d4      	lsls	r4, r2, #3
 800640c:	4622      	mov	r2, r4
 800640e:	462b      	mov	r3, r5
 8006410:	1814      	adds	r4, r2, r0
 8006412:	653c      	str	r4, [r7, #80]	; 0x50
 8006414:	414b      	adcs	r3, r1
 8006416:	657b      	str	r3, [r7, #84]	; 0x54
 8006418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	461a      	mov	r2, r3
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	1891      	adds	r1, r2, r2
 8006424:	61b9      	str	r1, [r7, #24]
 8006426:	415b      	adcs	r3, r3
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800642e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006432:	f7fa fbc1 	bl	8000bb8 <__aeabi_uldivmod>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4b6c      	ldr	r3, [pc, #432]	; (80065ec <UART_SetConfig+0x38c>)
 800643c:	fba3 1302 	umull	r1, r3, r3, r2
 8006440:	095b      	lsrs	r3, r3, #5
 8006442:	2164      	movs	r1, #100	; 0x64
 8006444:	fb01 f303 	mul.w	r3, r1, r3
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	3332      	adds	r3, #50	; 0x32
 800644e:	4a67      	ldr	r2, [pc, #412]	; (80065ec <UART_SetConfig+0x38c>)
 8006450:	fba2 2303 	umull	r2, r3, r2, r3
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	f003 0207 	and.w	r2, r3, #7
 800645a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4432      	add	r2, r6
 8006460:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006462:	e0b9      	b.n	80065d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006466:	461c      	mov	r4, r3
 8006468:	f04f 0500 	mov.w	r5, #0
 800646c:	4622      	mov	r2, r4
 800646e:	462b      	mov	r3, r5
 8006470:	1891      	adds	r1, r2, r2
 8006472:	6139      	str	r1, [r7, #16]
 8006474:	415b      	adcs	r3, r3
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800647c:	1912      	adds	r2, r2, r4
 800647e:	eb45 0303 	adc.w	r3, r5, r3
 8006482:	f04f 0000 	mov.w	r0, #0
 8006486:	f04f 0100 	mov.w	r1, #0
 800648a:	00d9      	lsls	r1, r3, #3
 800648c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006490:	00d0      	lsls	r0, r2, #3
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	eb12 0804 	adds.w	r8, r2, r4
 800649a:	eb43 0905 	adc.w	r9, r3, r5
 800649e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f04f 0100 	mov.w	r1, #0
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	008b      	lsls	r3, r1, #2
 80064b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064b6:	0082      	lsls	r2, r0, #2
 80064b8:	4640      	mov	r0, r8
 80064ba:	4649      	mov	r1, r9
 80064bc:	f7fa fb7c 	bl	8000bb8 <__aeabi_uldivmod>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4b49      	ldr	r3, [pc, #292]	; (80065ec <UART_SetConfig+0x38c>)
 80064c6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	011e      	lsls	r6, r3, #4
 80064ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064d0:	4618      	mov	r0, r3
 80064d2:	f04f 0100 	mov.w	r1, #0
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	1894      	adds	r4, r2, r2
 80064dc:	60bc      	str	r4, [r7, #8]
 80064de:	415b      	adcs	r3, r3
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064e6:	1812      	adds	r2, r2, r0
 80064e8:	eb41 0303 	adc.w	r3, r1, r3
 80064ec:	f04f 0400 	mov.w	r4, #0
 80064f0:	f04f 0500 	mov.w	r5, #0
 80064f4:	00dd      	lsls	r5, r3, #3
 80064f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064fa:	00d4      	lsls	r4, r2, #3
 80064fc:	4622      	mov	r2, r4
 80064fe:	462b      	mov	r3, r5
 8006500:	1814      	adds	r4, r2, r0
 8006502:	64bc      	str	r4, [r7, #72]	; 0x48
 8006504:	414b      	adcs	r3, r1
 8006506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	4618      	mov	r0, r3
 800650e:	f04f 0100 	mov.w	r1, #0
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	008b      	lsls	r3, r1, #2
 800651c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006520:	0082      	lsls	r2, r0, #2
 8006522:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006526:	f7fa fb47 	bl	8000bb8 <__aeabi_uldivmod>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4b2f      	ldr	r3, [pc, #188]	; (80065ec <UART_SetConfig+0x38c>)
 8006530:	fba3 1302 	umull	r1, r3, r3, r2
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	2164      	movs	r1, #100	; 0x64
 8006538:	fb01 f303 	mul.w	r3, r1, r3
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	3332      	adds	r3, #50	; 0x32
 8006542:	4a2a      	ldr	r2, [pc, #168]	; (80065ec <UART_SetConfig+0x38c>)
 8006544:	fba2 2303 	umull	r2, r3, r2, r3
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800654e:	441e      	add	r6, r3
 8006550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006552:	4618      	mov	r0, r3
 8006554:	f04f 0100 	mov.w	r1, #0
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	1894      	adds	r4, r2, r2
 800655e:	603c      	str	r4, [r7, #0]
 8006560:	415b      	adcs	r3, r3
 8006562:	607b      	str	r3, [r7, #4]
 8006564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006568:	1812      	adds	r2, r2, r0
 800656a:	eb41 0303 	adc.w	r3, r1, r3
 800656e:	f04f 0400 	mov.w	r4, #0
 8006572:	f04f 0500 	mov.w	r5, #0
 8006576:	00dd      	lsls	r5, r3, #3
 8006578:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800657c:	00d4      	lsls	r4, r2, #3
 800657e:	4622      	mov	r2, r4
 8006580:	462b      	mov	r3, r5
 8006582:	eb12 0a00 	adds.w	sl, r2, r0
 8006586:	eb43 0b01 	adc.w	fp, r3, r1
 800658a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	4618      	mov	r0, r3
 8006590:	f04f 0100 	mov.w	r1, #0
 8006594:	f04f 0200 	mov.w	r2, #0
 8006598:	f04f 0300 	mov.w	r3, #0
 800659c:	008b      	lsls	r3, r1, #2
 800659e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065a2:	0082      	lsls	r2, r0, #2
 80065a4:	4650      	mov	r0, sl
 80065a6:	4659      	mov	r1, fp
 80065a8:	f7fa fb06 	bl	8000bb8 <__aeabi_uldivmod>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4b0e      	ldr	r3, [pc, #56]	; (80065ec <UART_SetConfig+0x38c>)
 80065b2:	fba3 1302 	umull	r1, r3, r3, r2
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	2164      	movs	r1, #100	; 0x64
 80065ba:	fb01 f303 	mul.w	r3, r1, r3
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	3332      	adds	r3, #50	; 0x32
 80065c4:	4a09      	ldr	r2, [pc, #36]	; (80065ec <UART_SetConfig+0x38c>)
 80065c6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	f003 020f 	and.w	r2, r3, #15
 80065d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4432      	add	r2, r6
 80065d6:	609a      	str	r2, [r3, #8]
}
 80065d8:	bf00      	nop
 80065da:	377c      	adds	r7, #124	; 0x7c
 80065dc:	46bd      	mov	sp, r7
 80065de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e2:	bf00      	nop
 80065e4:	40011000 	.word	0x40011000
 80065e8:	40011400 	.word	0x40011400
 80065ec:	51eb851f 	.word	0x51eb851f

080065f0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80065f0:	b084      	sub	sp, #16
 80065f2:	b480      	push	{r7}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	f107 001c 	add.w	r0, r7, #28
 80065fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006606:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006608:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800660a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800660e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006612:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006616:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800661a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800662a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	b004      	add	sp, #16
 8006644:	4770      	bx	lr

08006646 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006682:	b580      	push	{r7, lr}
 8006684:	b082      	sub	sp, #8
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2203      	movs	r2, #3
 800668e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006690:	2002      	movs	r0, #2
 8006692:	f7fb fc1d 	bl	8001ed0 <HAL_Delay>
  
  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0303 	and.w	r3, r3, #3
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80066da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80066e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80066e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80066f6:	f023 030f 	bic.w	r3, r3, #15
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	b2db      	uxtb	r3, r3
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3314      	adds	r3, #20
 8006738:	461a      	mov	r2, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	4413      	add	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
}  
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006776:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800677c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006782:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800679a:	2300      	movs	r3, #0

}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80067b6:	2310      	movs	r3, #16
 80067b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067ba:	2340      	movs	r3, #64	; 0x40
 80067bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067c8:	f107 0308 	add.w	r3, r7, #8
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff ff74 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80067d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d8:	2110      	movs	r1, #16
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fa44 	bl	8006c68 <SDMMC_GetCmdResp1>
 80067e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067e2:	69fb      	ldr	r3, [r7, #28]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3720      	adds	r7, #32
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80067fa:	2311      	movs	r3, #17
 80067fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067fe:	2340      	movs	r3, #64	; 0x40
 8006800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800680a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800680c:	f107 0308 	add.w	r3, r7, #8
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff ff52 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006818:	f241 3288 	movw	r2, #5000	; 0x1388
 800681c:	2111      	movs	r1, #17
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa22 	bl	8006c68 <SDMMC_GetCmdResp1>
 8006824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006826:	69fb      	ldr	r3, [r7, #28]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800683e:	2312      	movs	r3, #18
 8006840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006842:	2340      	movs	r3, #64	; 0x40
 8006844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800684a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800684e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006850:	f107 0308 	add.w	r3, r7, #8
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff ff30 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800685c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006860:	2112      	movs	r1, #18
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fa00 	bl	8006c68 <SDMMC_GetCmdResp1>
 8006868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800686a:	69fb      	ldr	r3, [r7, #28]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3720      	adds	r7, #32
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b088      	sub	sp, #32
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006882:	2318      	movs	r3, #24
 8006884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006886:	2340      	movs	r3, #64	; 0x40
 8006888:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800688a:	2300      	movs	r3, #0
 800688c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800688e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006892:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006894:	f107 0308 	add.w	r3, r7, #8
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff ff0e 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80068a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a4:	2118      	movs	r1, #24
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f9de 	bl	8006c68 <SDMMC_GetCmdResp1>
 80068ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068ae:	69fb      	ldr	r3, [r7, #28]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3720      	adds	r7, #32
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80068c6:	2319      	movs	r3, #25
 80068c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068ca:	2340      	movs	r3, #64	; 0x40
 80068cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068d8:	f107 0308 	add.w	r3, r7, #8
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff feec 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80068e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e8:	2119      	movs	r1, #25
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f9bc 	bl	8006c68 <SDMMC_GetCmdResp1>
 80068f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068f2:	69fb      	ldr	r3, [r7, #28]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3720      	adds	r7, #32
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006908:	230c      	movs	r3, #12
 800690a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800690c:	2340      	movs	r3, #64	; 0x40
 800690e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006910:	2300      	movs	r3, #0
 8006912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006918:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800691a:	f107 0308 	add.w	r3, r7, #8
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff fecb 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006926:	4a05      	ldr	r2, [pc, #20]	; (800693c <SDMMC_CmdStopTransfer+0x40>)
 8006928:	210c      	movs	r1, #12
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f99c 	bl	8006c68 <SDMMC_GetCmdResp1>
 8006930:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006932:	69fb      	ldr	r3, [r7, #28]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3720      	adds	r7, #32
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	05f5e100 	.word	0x05f5e100

08006940 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08a      	sub	sp, #40	; 0x28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006950:	2307      	movs	r3, #7
 8006952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006954:	2340      	movs	r3, #64	; 0x40
 8006956:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006958:	2300      	movs	r3, #0
 800695a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800695c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006960:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006962:	f107 0310 	add.w	r3, r7, #16
 8006966:	4619      	mov	r1, r3
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f7ff fea7 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800696e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006972:	2107      	movs	r1, #7
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 f977 	bl	8006c68 <SDMMC_GetCmdResp1>
 800697a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800697e:	4618      	mov	r0, r3
 8006980:	3728      	adds	r7, #40	; 0x28
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b088      	sub	sp, #32
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800699a:	2300      	movs	r3, #0
 800699c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800699e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069a4:	f107 0308 	add.w	r3, r7, #8
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff fe86 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f92d 	bl	8006c10 <SDMMC_GetCmdError>
 80069b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069b8:	69fb      	ldr	r3, [r7, #28]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3720      	adds	r7, #32
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b088      	sub	sp, #32
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80069ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80069ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80069d0:	2308      	movs	r3, #8
 80069d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069d4:	2340      	movs	r3, #64	; 0x40
 80069d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069d8:	2300      	movs	r3, #0
 80069da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069e2:	f107 0308 	add.w	r3, r7, #8
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff fe67 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fb24 	bl	800703c <SDMMC_GetCmdResp7>
 80069f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069f6:	69fb      	ldr	r3, [r7, #28]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3720      	adds	r7, #32
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006a0e:	2337      	movs	r3, #55	; 0x37
 8006a10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a12:	2340      	movs	r3, #64	; 0x40
 8006a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a20:	f107 0308 	add.w	r3, r7, #8
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fe48 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a30:	2137      	movs	r1, #55	; 0x37
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f918 	bl	8006c68 <SDMMC_GetCmdResp1>
 8006a38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3720      	adds	r7, #32
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006a5a:	2329      	movs	r3, #41	; 0x29
 8006a5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a5e:	2340      	movs	r3, #64	; 0x40
 8006a60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a62:	2300      	movs	r3, #0
 8006a64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a6c:	f107 0308 	add.w	r3, r7, #8
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff fe22 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fa2b 	bl	8006ed4 <SDMMC_GetCmdResp3>
 8006a7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a80:	69fb      	ldr	r3, [r7, #28]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3720      	adds	r7, #32
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b088      	sub	sp, #32
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006a98:	2306      	movs	r3, #6
 8006a9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a9c:	2340      	movs	r3, #64	; 0x40
 8006a9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006aaa:	f107 0308 	add.w	r3, r7, #8
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff fe03 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aba:	2106      	movs	r1, #6
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f8d3 	bl	8006c68 <SDMMC_GetCmdResp1>
 8006ac2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3720      	adds	r7, #32
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b088      	sub	sp, #32
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006ada:	2333      	movs	r3, #51	; 0x33
 8006adc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ade:	2340      	movs	r3, #64	; 0x40
 8006ae0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006aec:	f107 0308 	add.w	r3, r7, #8
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff fde2 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006afc:	2133      	movs	r1, #51	; 0x33
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f8b2 	bl	8006c68 <SDMMC_GetCmdResp1>
 8006b04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b06:	69fb      	ldr	r3, [r7, #28]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3720      	adds	r7, #32
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006b20:	23c0      	movs	r3, #192	; 0xc0
 8006b22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b24:	2300      	movs	r3, #0
 8006b26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b2e:	f107 0308 	add.w	r3, r7, #8
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff fdc1 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f982 	bl	8006e44 <SDMMC_GetCmdResp2>
 8006b40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b42:	69fb      	ldr	r3, [r7, #28]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006b5a:	2309      	movs	r3, #9
 8006b5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006b5e:	23c0      	movs	r3, #192	; 0xc0
 8006b60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b62:	2300      	movs	r3, #0
 8006b64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b6c:	f107 0308 	add.w	r3, r7, #8
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff fda2 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f963 	bl	8006e44 <SDMMC_GetCmdResp2>
 8006b7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b80:	69fb      	ldr	r3, [r7, #28]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3720      	adds	r7, #32
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b088      	sub	sp, #32
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b9c:	2340      	movs	r3, #64	; 0x40
 8006b9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006baa:	f107 0308 	add.w	r3, r7, #8
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff fd83 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	2103      	movs	r1, #3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f9c8 	bl	8006f50 <SDMMC_GetCmdResp6>
 8006bc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3720      	adds	r7, #32
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006bda:	230d      	movs	r3, #13
 8006bdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bde:	2340      	movs	r3, #64	; 0x40
 8006be0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006be2:	2300      	movs	r3, #0
 8006be4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bec:	f107 0308 	add.w	r3, r7, #8
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff fd62 	bl	80066bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfc:	210d      	movs	r1, #13
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f832 	bl	8006c68 <SDMMC_GetCmdResp1>
 8006c04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c06:	69fb      	ldr	r3, [r7, #28]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3720      	adds	r7, #32
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c18:	4b11      	ldr	r3, [pc, #68]	; (8006c60 <SDMMC_GetCmdError+0x50>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a11      	ldr	r2, [pc, #68]	; (8006c64 <SDMMC_GetCmdError+0x54>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	0a5b      	lsrs	r3, r3, #9
 8006c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c28:	fb02 f303 	mul.w	r3, r2, r3
 8006c2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	1e5a      	subs	r2, r3, #1
 8006c32:	60fa      	str	r2, [r7, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d102      	bne.n	8006c3e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c3c:	e009      	b.n	8006c52 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f1      	beq.n	8006c2e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	22c5      	movs	r2, #197	; 0xc5
 8006c4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	20000010 	.word	0x20000010
 8006c64:	10624dd3 	.word	0x10624dd3

08006c68 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	460b      	mov	r3, r1
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006c76:	4b70      	ldr	r3, [pc, #448]	; (8006e38 <SDMMC_GetCmdResp1+0x1d0>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a70      	ldr	r2, [pc, #448]	; (8006e3c <SDMMC_GetCmdResp1+0x1d4>)
 8006c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c80:	0a5a      	lsrs	r2, r3, #9
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	fb02 f303 	mul.w	r3, r2, r3
 8006c88:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	1e5a      	subs	r2, r3, #1
 8006c8e:	61fa      	str	r2, [r7, #28]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d102      	bne.n	8006c9a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c98:	e0c9      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0ef      	beq.n	8006c8a <SDMMC_GetCmdResp1+0x22>
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1ea      	bne.n	8006c8a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d004      	beq.n	8006cca <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2204      	movs	r2, #4
 8006cc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006cc6:	2304      	movs	r3, #4
 8006cc8:	e0b1      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d004      	beq.n	8006ce0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e0a6      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	22c5      	movs	r2, #197	; 0xc5
 8006ce4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f7ff fd12 	bl	8006710 <SDIO_GetCommandResponse>
 8006cec:	4603      	mov	r3, r0
 8006cee:	461a      	mov	r2, r3
 8006cf0:	7afb      	ldrb	r3, [r7, #11]
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d001      	beq.n	8006cfa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e099      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff fd14 	bl	800672a <SDIO_GetResponse>
 8006d02:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4b4e      	ldr	r3, [pc, #312]	; (8006e40 <SDMMC_GetCmdResp1+0x1d8>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	e08d      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	da02      	bge.n	8006d1e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d1c:	e087      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006d28:	2340      	movs	r3, #64	; 0x40
 8006d2a:	e080      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006d36:	2380      	movs	r3, #128	; 0x80
 8006d38:	e079      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d48:	e071      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d58:	e069      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d68:	e061      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006d74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d78:	e059      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d88:	e051      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d98:	e049      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006da4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006da8:	e041      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006db4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006db8:	e039      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dc8:	e031      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006dd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006dd8:	e029      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006de4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006de8:	e021      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006df4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006df8:	e019      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006e04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e08:	e011      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006e14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e18:	e009      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006e24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006e28:	e001      	b.n	8006e2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3720      	adds	r7, #32
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000010 	.word	0x20000010
 8006e3c:	10624dd3 	.word	0x10624dd3
 8006e40:	fdffe008 	.word	0xfdffe008

08006e44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e4c:	4b1f      	ldr	r3, [pc, #124]	; (8006ecc <SDMMC_GetCmdResp2+0x88>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a1f      	ldr	r2, [pc, #124]	; (8006ed0 <SDMMC_GetCmdResp2+0x8c>)
 8006e52:	fba2 2303 	umull	r2, r3, r2, r3
 8006e56:	0a5b      	lsrs	r3, r3, #9
 8006e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e5c:	fb02 f303 	mul.w	r3, r2, r3
 8006e60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	1e5a      	subs	r2, r3, #1
 8006e66:	60fa      	str	r2, [r7, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d102      	bne.n	8006e72 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e70:	e026      	b.n	8006ec0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0ef      	beq.n	8006e62 <SDMMC_GetCmdResp2+0x1e>
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1ea      	bne.n	8006e62 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d004      	beq.n	8006ea2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e9e:	2304      	movs	r3, #4
 8006ea0:	e00e      	b.n	8006ec0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e003      	b.n	8006ec0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	22c5      	movs	r2, #197	; 0xc5
 8006ebc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	20000010 	.word	0x20000010
 8006ed0:	10624dd3 	.word	0x10624dd3

08006ed4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006edc:	4b1a      	ldr	r3, [pc, #104]	; (8006f48 <SDMMC_GetCmdResp3+0x74>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a1a      	ldr	r2, [pc, #104]	; (8006f4c <SDMMC_GetCmdResp3+0x78>)
 8006ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee6:	0a5b      	lsrs	r3, r3, #9
 8006ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eec:	fb02 f303 	mul.w	r3, r2, r3
 8006ef0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	1e5a      	subs	r2, r3, #1
 8006ef6:	60fa      	str	r2, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006efc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f00:	e01b      	b.n	8006f3a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0ef      	beq.n	8006ef2 <SDMMC_GetCmdResp3+0x1e>
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1ea      	bne.n	8006ef2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d004      	beq.n	8006f32 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f2e:	2304      	movs	r3, #4
 8006f30:	e003      	b.n	8006f3a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	22c5      	movs	r2, #197	; 0xc5
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	20000010 	.word	0x20000010
 8006f4c:	10624dd3 	.word	0x10624dd3

08006f50 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f5e:	4b35      	ldr	r3, [pc, #212]	; (8007034 <SDMMC_GetCmdResp6+0xe4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a35      	ldr	r2, [pc, #212]	; (8007038 <SDMMC_GetCmdResp6+0xe8>)
 8006f64:	fba2 2303 	umull	r2, r3, r2, r3
 8006f68:	0a5b      	lsrs	r3, r3, #9
 8006f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6e:	fb02 f303 	mul.w	r3, r2, r3
 8006f72:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	1e5a      	subs	r2, r3, #1
 8006f78:	61fa      	str	r2, [r7, #28]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d102      	bne.n	8006f84 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f82:	e052      	b.n	800702a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f88:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0ef      	beq.n	8006f74 <SDMMC_GetCmdResp6+0x24>
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1ea      	bne.n	8006f74 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa2:	f003 0304 	and.w	r3, r3, #4
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d004      	beq.n	8006fb4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2204      	movs	r2, #4
 8006fae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fb0:	2304      	movs	r3, #4
 8006fb2:	e03a      	b.n	800702a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d004      	beq.n	8006fca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e02f      	b.n	800702a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f7ff fba0 	bl	8006710 <SDIO_GetCommandResponse>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d001      	beq.n	8006fde <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e025      	b.n	800702a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	22c5      	movs	r2, #197	; 0xc5
 8006fe2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f7ff fb9f 	bl	800672a <SDIO_GetResponse>
 8006fec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d106      	bne.n	8007006 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	0c1b      	lsrs	r3, r3, #16
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007002:	2300      	movs	r3, #0
 8007004:	e011      	b.n	800702a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007014:	e009      	b.n	800702a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007024:	e001      	b.n	800702a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800702a:	4618      	mov	r0, r3
 800702c:	3720      	adds	r7, #32
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20000010 	.word	0x20000010
 8007038:	10624dd3 	.word	0x10624dd3

0800703c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007044:	4b22      	ldr	r3, [pc, #136]	; (80070d0 <SDMMC_GetCmdResp7+0x94>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a22      	ldr	r2, [pc, #136]	; (80070d4 <SDMMC_GetCmdResp7+0x98>)
 800704a:	fba2 2303 	umull	r2, r3, r2, r3
 800704e:	0a5b      	lsrs	r3, r3, #9
 8007050:	f241 3288 	movw	r2, #5000	; 0x1388
 8007054:	fb02 f303 	mul.w	r3, r2, r3
 8007058:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	1e5a      	subs	r2, r3, #1
 800705e:	60fa      	str	r2, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d102      	bne.n	800706a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007064:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007068:	e02c      	b.n	80070c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0ef      	beq.n	800705a <SDMMC_GetCmdResp7+0x1e>
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1ea      	bne.n	800705a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2204      	movs	r2, #4
 8007094:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007096:	2304      	movs	r3, #4
 8007098:	e014      	b.n	80070c4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d004      	beq.n	80070b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e009      	b.n	80070c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2240      	movs	r2, #64	; 0x40
 80070c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80070c2:	2300      	movs	r3, #0
  
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	20000010 	.word	0x20000010
 80070d4:	10624dd3 	.word	0x10624dd3

080070d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80070dc:	4904      	ldr	r1, [pc, #16]	; (80070f0 <MX_FATFS_Init+0x18>)
 80070de:	4805      	ldr	r0, [pc, #20]	; (80070f4 <MX_FATFS_Init+0x1c>)
 80070e0:	f004 fedc 	bl	800be9c <FATFS_LinkDriver>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
 80070e8:	4b03      	ldr	r3, [pc, #12]	; (80070f8 <MX_FATFS_Init+0x20>)
 80070ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80070ec:	bf00      	nop
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000e14 	.word	0x20000e14
 80070f4:	0800eca8 	.word	0x0800eca8
 80070f8:	20000e10 	.word	0x20000e10

080070fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007100:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007102:	4618      	mov	r0, r3
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007116:	f000 f896 	bl	8007246 <BSP_SD_IsDetected>
 800711a:	4603      	mov	r3, r0
 800711c:	2b01      	cmp	r3, #1
 800711e:	d001      	beq.n	8007124 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e012      	b.n	800714a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007124:	480b      	ldr	r0, [pc, #44]	; (8007154 <BSP_SD_Init+0x48>)
 8007126:	f7fc fb87 	bl	8003838 <HAL_SD_Init>
 800712a:	4603      	mov	r3, r0
 800712c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d109      	bne.n	8007148 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007134:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007138:	4806      	ldr	r0, [pc, #24]	; (8007154 <BSP_SD_Init+0x48>)
 800713a:	f7fd f953 	bl	80043e4 <HAL_SD_ConfigWideBusOperation>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007148:	79fb      	ldrb	r3, [r7, #7]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000c74 	.word	0x20000c74

08007158 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	68f9      	ldr	r1, [r7, #12]
 800716e:	4806      	ldr	r0, [pc, #24]	; (8007188 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007170:	f7fc fc10 	bl	8003994 <HAL_SD_ReadBlocks_DMA>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	20000c74 	.word	0x20000c74

0800718c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	68f9      	ldr	r1, [r7, #12]
 80071a2:	4806      	ldr	r0, [pc, #24]	; (80071bc <BSP_SD_WriteBlocks_DMA+0x30>)
 80071a4:	f7fc fcd8 	bl	8003b58 <HAL_SD_WriteBlocks_DMA>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	20000c74 	.word	0x20000c74

080071c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80071c4:	4805      	ldr	r0, [pc, #20]	; (80071dc <BSP_SD_GetCardState+0x1c>)
 80071c6:	f7fd f9a7 	bl	8004518 <HAL_SD_GetCardState>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	bf14      	ite	ne
 80071d0:	2301      	movne	r3, #1
 80071d2:	2300      	moveq	r3, #0
 80071d4:	b2db      	uxtb	r3, r3
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20000c74 	.word	0x20000c74

080071e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	4803      	ldr	r0, [pc, #12]	; (80071f8 <BSP_SD_GetCardInfo+0x18>)
 80071ec:	f7fd f8ce 	bl	800438c <HAL_SD_GetCardInfo>
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20000c74 	.word	0x20000c74

080071fc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007204:	f000 f818 	bl	8007238 <BSP_SD_AbortCallback>
}
 8007208:	bf00      	nop
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007218:	f000 f98c 	bl	8007534 <BSP_SD_WriteCpltCallback>
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800722c:	f000 f98e 	bl	800754c <BSP_SD_ReadCpltCallback>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0

}
 800723c:	bf00      	nop
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800724c:	2301      	movs	r3, #1
 800724e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	b2db      	uxtb	r3, r3
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007268:	f7fa fe26 	bl	8001eb8 <HAL_GetTick>
 800726c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800726e:	e006      	b.n	800727e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007270:	f7ff ffa6 	bl	80071c0 <BSP_SD_GetCardState>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800727a:	2300      	movs	r3, #0
 800727c:	e009      	b.n	8007292 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800727e:	f7fa fe1b 	bl	8001eb8 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	429a      	cmp	r2, r3
 800728c:	d8f0      	bhi.n	8007270 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800728e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	4603      	mov	r3, r0
 80072a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80072a6:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <SD_CheckStatus+0x38>)
 80072a8:	2201      	movs	r2, #1
 80072aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80072ac:	f7ff ff88 	bl	80071c0 <BSP_SD_GetCardState>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d107      	bne.n	80072c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80072b6:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <SD_CheckStatus+0x38>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f023 0301 	bic.w	r3, r3, #1
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	4b04      	ldr	r3, [pc, #16]	; (80072d4 <SD_CheckStatus+0x38>)
 80072c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80072c6:	4b03      	ldr	r3, [pc, #12]	; (80072d4 <SD_CheckStatus+0x38>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	b2db      	uxtb	r3, r3
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000019 	.word	0x20000019

080072d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80072e2:	f7ff ff13 	bl	800710c <BSP_SD_Init>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d107      	bne.n	80072fc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff ffd4 	bl	800729c <SD_CheckStatus>
 80072f4:	4603      	mov	r3, r0
 80072f6:	461a      	mov	r2, r3
 80072f8:	4b04      	ldr	r3, [pc, #16]	; (800730c <SD_initialize+0x34>)
 80072fa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80072fc:	4b03      	ldr	r3, [pc, #12]	; (800730c <SD_initialize+0x34>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	b2db      	uxtb	r3, r3
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000019 	.word	0x20000019

08007310 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff ffbd 	bl	800729c <SD_CheckStatus>
 8007322:	4603      	mov	r3, r0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	607a      	str	r2, [r7, #4]
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	4603      	mov	r3, r0
 800733a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007340:	f247 5030 	movw	r0, #30000	; 0x7530
 8007344:	f7ff ff8c 	bl	8007260 <SD_CheckStatusWithTimeout>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	da01      	bge.n	8007352 <SD_read+0x26>
  {
    return res;
 800734e:	7dfb      	ldrb	r3, [r7, #23]
 8007350:	e03b      	b.n	80073ca <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	68b8      	ldr	r0, [r7, #8]
 8007358:	f7ff fefe 	bl	8007158 <BSP_SD_ReadBlocks_DMA>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d132      	bne.n	80073c8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007362:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <SD_read+0xa8>)
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007368:	f7fa fda6 	bl	8001eb8 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800736e:	bf00      	nop
 8007370:	4b18      	ldr	r3, [pc, #96]	; (80073d4 <SD_read+0xa8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d108      	bne.n	800738a <SD_read+0x5e>
 8007378:	f7fa fd9e 	bl	8001eb8 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	f247 522f 	movw	r2, #29999	; 0x752f
 8007386:	4293      	cmp	r3, r2
 8007388:	d9f2      	bls.n	8007370 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800738a:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <SD_read+0xa8>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	75fb      	strb	r3, [r7, #23]
 8007396:	e017      	b.n	80073c8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007398:	4b0e      	ldr	r3, [pc, #56]	; (80073d4 <SD_read+0xa8>)
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800739e:	f7fa fd8b 	bl	8001eb8 <HAL_GetTick>
 80073a2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80073a4:	e007      	b.n	80073b6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80073a6:	f7ff ff0b 	bl	80071c0 <BSP_SD_GetCardState>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d102      	bne.n	80073b6 <SD_read+0x8a>
          {
            res = RES_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80073b4:	e008      	b.n	80073c8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80073b6:	f7fa fd7f 	bl	8001eb8 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	f247 522f 	movw	r2, #29999	; 0x752f
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d9ee      	bls.n	80073a6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	200006c0 	.word	0x200006c0

080073d8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
 80073e2:	603b      	str	r3, [r7, #0]
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80073ec:	4b24      	ldr	r3, [pc, #144]	; (8007480 <SD_write+0xa8>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80073f2:	f247 5030 	movw	r0, #30000	; 0x7530
 80073f6:	f7ff ff33 	bl	8007260 <SD_CheckStatusWithTimeout>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	da01      	bge.n	8007404 <SD_write+0x2c>
  {
    return res;
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	e038      	b.n	8007476 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	68b8      	ldr	r0, [r7, #8]
 800740a:	f7ff febf 	bl	800718c <BSP_SD_WriteBlocks_DMA>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d12f      	bne.n	8007474 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007414:	f7fa fd50 	bl	8001eb8 <HAL_GetTick>
 8007418:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800741a:	bf00      	nop
 800741c:	4b18      	ldr	r3, [pc, #96]	; (8007480 <SD_write+0xa8>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d108      	bne.n	8007436 <SD_write+0x5e>
 8007424:	f7fa fd48 	bl	8001eb8 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	f247 522f 	movw	r2, #29999	; 0x752f
 8007432:	4293      	cmp	r3, r2
 8007434:	d9f2      	bls.n	800741c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007436:	4b12      	ldr	r3, [pc, #72]	; (8007480 <SD_write+0xa8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d102      	bne.n	8007444 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	75fb      	strb	r3, [r7, #23]
 8007442:	e017      	b.n	8007474 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007444:	4b0e      	ldr	r3, [pc, #56]	; (8007480 <SD_write+0xa8>)
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800744a:	f7fa fd35 	bl	8001eb8 <HAL_GetTick>
 800744e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007450:	e007      	b.n	8007462 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007452:	f7ff feb5 	bl	80071c0 <BSP_SD_GetCardState>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d102      	bne.n	8007462 <SD_write+0x8a>
          {
            res = RES_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	75fb      	strb	r3, [r7, #23]
            break;
 8007460:	e008      	b.n	8007474 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007462:	f7fa fd29 	bl	8001eb8 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	f247 522f 	movw	r2, #29999	; 0x752f
 8007470:	4293      	cmp	r3, r2
 8007472:	d9ee      	bls.n	8007452 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8007474:	7dfb      	ldrb	r3, [r7, #23]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	200006bc 	.word	0x200006bc

08007484 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08c      	sub	sp, #48	; 0x30
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	603a      	str	r2, [r7, #0]
 800748e:	71fb      	strb	r3, [r7, #7]
 8007490:	460b      	mov	r3, r1
 8007492:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800749a:	4b25      	ldr	r3, [pc, #148]	; (8007530 <SD_ioctl+0xac>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <SD_ioctl+0x28>
 80074a8:	2303      	movs	r3, #3
 80074aa:	e03c      	b.n	8007526 <SD_ioctl+0xa2>

  switch (cmd)
 80074ac:	79bb      	ldrb	r3, [r7, #6]
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d834      	bhi.n	800751c <SD_ioctl+0x98>
 80074b2:	a201      	add	r2, pc, #4	; (adr r2, 80074b8 <SD_ioctl+0x34>)
 80074b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b8:	080074c9 	.word	0x080074c9
 80074bc:	080074d1 	.word	0x080074d1
 80074c0:	080074e9 	.word	0x080074e9
 80074c4:	08007503 	.word	0x08007503
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074ce:	e028      	b.n	8007522 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80074d0:	f107 030c 	add.w	r3, r7, #12
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff fe83 	bl	80071e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80074da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074e6:	e01c      	b.n	8007522 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80074e8:	f107 030c 	add.w	r3, r7, #12
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff fe77 	bl	80071e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007500:	e00f      	b.n	8007522 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007502:	f107 030c 	add.w	r3, r7, #12
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff fe6a 	bl	80071e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	0a5a      	lsrs	r2, r3, #9
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800751a:	e002      	b.n	8007522 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800751c:	2304      	movs	r3, #4
 800751e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007526:	4618      	mov	r0, r3
 8007528:	3730      	adds	r7, #48	; 0x30
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000019 	.word	0x20000019

08007534 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8007538:	4b03      	ldr	r3, [pc, #12]	; (8007548 <BSP_SD_WriteCpltCallback+0x14>)
 800753a:	2201      	movs	r2, #1
 800753c:	601a      	str	r2, [r3, #0]
}
 800753e:	bf00      	nop
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	200006bc 	.word	0x200006bc

0800754c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800754c:	b480      	push	{r7}
 800754e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8007550:	4b03      	ldr	r3, [pc, #12]	; (8007560 <BSP_SD_ReadCpltCallback+0x14>)
 8007552:	2201      	movs	r2, #1
 8007554:	601a      	str	r2, [r3, #0]
}
 8007556:	bf00      	nop
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	200006c0 	.word	0x200006c0

08007564 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800756e:	79fb      	ldrb	r3, [r7, #7]
 8007570:	4a08      	ldr	r2, [pc, #32]	; (8007594 <disk_status+0x30>)
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	79fa      	ldrb	r2, [r7, #7]
 800757c:	4905      	ldr	r1, [pc, #20]	; (8007594 <disk_status+0x30>)
 800757e:	440a      	add	r2, r1
 8007580:	7a12      	ldrb	r2, [r2, #8]
 8007582:	4610      	mov	r0, r2
 8007584:	4798      	blx	r3
 8007586:	4603      	mov	r3, r0
 8007588:	73fb      	strb	r3, [r7, #15]
  return stat;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	20000b4c 	.word	0x20000b4c

08007598 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	4a0d      	ldr	r2, [pc, #52]	; (80075e0 <disk_initialize+0x48>)
 80075aa:	5cd3      	ldrb	r3, [r2, r3]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d111      	bne.n	80075d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80075b0:	79fb      	ldrb	r3, [r7, #7]
 80075b2:	4a0b      	ldr	r2, [pc, #44]	; (80075e0 <disk_initialize+0x48>)
 80075b4:	2101      	movs	r1, #1
 80075b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80075b8:	79fb      	ldrb	r3, [r7, #7]
 80075ba:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <disk_initialize+0x48>)
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	79fa      	ldrb	r2, [r7, #7]
 80075c6:	4906      	ldr	r1, [pc, #24]	; (80075e0 <disk_initialize+0x48>)
 80075c8:	440a      	add	r2, r1
 80075ca:	7a12      	ldrb	r2, [r2, #8]
 80075cc:	4610      	mov	r0, r2
 80075ce:	4798      	blx	r3
 80075d0:	4603      	mov	r3, r0
 80075d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000b4c 	.word	0x20000b4c

080075e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80075e4:	b590      	push	{r4, r7, lr}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	607a      	str	r2, [r7, #4]
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	4603      	mov	r3, r0
 80075f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	4a0a      	ldr	r2, [pc, #40]	; (8007620 <disk_read+0x3c>)
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	689c      	ldr	r4, [r3, #8]
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	4a07      	ldr	r2, [pc, #28]	; (8007620 <disk_read+0x3c>)
 8007604:	4413      	add	r3, r2
 8007606:	7a18      	ldrb	r0, [r3, #8]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	47a0      	blx	r4
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]
  return res;
 8007614:	7dfb      	ldrb	r3, [r7, #23]
}
 8007616:	4618      	mov	r0, r3
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	bd90      	pop	{r4, r7, pc}
 800761e:	bf00      	nop
 8007620:	20000b4c 	.word	0x20000b4c

08007624 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007624:	b590      	push	{r4, r7, lr}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	4603      	mov	r3, r0
 8007632:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	4a0a      	ldr	r2, [pc, #40]	; (8007660 <disk_write+0x3c>)
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	68dc      	ldr	r4, [r3, #12]
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	4a07      	ldr	r2, [pc, #28]	; (8007660 <disk_write+0x3c>)
 8007644:	4413      	add	r3, r2
 8007646:	7a18      	ldrb	r0, [r3, #8]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	68b9      	ldr	r1, [r7, #8]
 800764e:	47a0      	blx	r4
 8007650:	4603      	mov	r3, r0
 8007652:	75fb      	strb	r3, [r7, #23]
  return res;
 8007654:	7dfb      	ldrb	r3, [r7, #23]
}
 8007656:	4618      	mov	r0, r3
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	bd90      	pop	{r4, r7, pc}
 800765e:	bf00      	nop
 8007660:	20000b4c 	.word	0x20000b4c

08007664 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	603a      	str	r2, [r7, #0]
 800766e:	71fb      	strb	r3, [r7, #7]
 8007670:	460b      	mov	r3, r1
 8007672:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007674:	79fb      	ldrb	r3, [r7, #7]
 8007676:	4a09      	ldr	r2, [pc, #36]	; (800769c <disk_ioctl+0x38>)
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	79fa      	ldrb	r2, [r7, #7]
 8007682:	4906      	ldr	r1, [pc, #24]	; (800769c <disk_ioctl+0x38>)
 8007684:	440a      	add	r2, r1
 8007686:	7a10      	ldrb	r0, [r2, #8]
 8007688:	79b9      	ldrb	r1, [r7, #6]
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	4798      	blx	r3
 800768e:	4603      	mov	r3, r0
 8007690:	73fb      	strb	r3, [r7, #15]
  return res;
 8007692:	7bfb      	ldrb	r3, [r7, #15]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20000b4c 	.word	0x20000b4c

080076a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3301      	adds	r3, #1
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80076b0:	89fb      	ldrh	r3, [r7, #14]
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	b21a      	sxth	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	b21b      	sxth	r3, r3
 80076bc:	4313      	orrs	r3, r2
 80076be:	b21b      	sxth	r3, r3
 80076c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80076c2:	89fb      	ldrh	r3, [r7, #14]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3303      	adds	r3, #3
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	021b      	lsls	r3, r3, #8
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	3202      	adds	r2, #2
 80076e8:	7812      	ldrb	r2, [r2, #0]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	021b      	lsls	r3, r3, #8
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	3201      	adds	r2, #1
 80076f6:	7812      	ldrb	r2, [r2, #0]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	021b      	lsls	r3, r3, #8
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	4313      	orrs	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]
	return rv;
 8007708:	68fb      	ldr	r3, [r7, #12]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8007716:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800771a:	b08d      	sub	sp, #52	; 0x34
 800771c:	af00      	add	r7, sp, #0
 800771e:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	3307      	adds	r3, #7
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	b2da      	uxtb	r2, r3
 8007728:	f04f 0300 	mov.w	r3, #0
 800772c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
 8007730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007734:	f04f 0000 	mov.w	r0, #0
 8007738:	f04f 0100 	mov.w	r1, #0
 800773c:	0219      	lsls	r1, r3, #8
 800773e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007742:	0210      	lsls	r0, r2, #8
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	3306      	adds	r3, #6
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	b2da      	uxtb	r2, r3
 800774c:	f04f 0300 	mov.w	r3, #0
 8007750:	ea40 0402 	orr.w	r4, r0, r2
 8007754:	ea41 0503 	orr.w	r5, r1, r3
 8007758:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
 800775c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007760:	f04f 0000 	mov.w	r0, #0
 8007764:	f04f 0100 	mov.w	r1, #0
 8007768:	0219      	lsls	r1, r3, #8
 800776a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800776e:	0210      	lsls	r0, r2, #8
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	3305      	adds	r3, #5
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	b2da      	uxtb	r2, r3
 8007778:	f04f 0300 	mov.w	r3, #0
 800777c:	ea40 0802 	orr.w	r8, r0, r2
 8007780:	ea41 0903 	orr.w	r9, r1, r3
 8007784:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
 8007788:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800778c:	f04f 0000 	mov.w	r0, #0
 8007790:	f04f 0100 	mov.w	r1, #0
 8007794:	0219      	lsls	r1, r3, #8
 8007796:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800779a:	0210      	lsls	r0, r2, #8
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	3304      	adds	r3, #4
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	f04f 0300 	mov.w	r3, #0
 80077a8:	ea40 0402 	orr.w	r4, r0, r2
 80077ac:	61bc      	str	r4, [r7, #24]
 80077ae:	430b      	orrs	r3, r1
 80077b0:	61fb      	str	r3, [r7, #28]
 80077b2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80077b6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
 80077ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	020b      	lsls	r3, r1, #8
 80077c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077cc:	0202      	lsls	r2, r0, #8
 80077ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077d0:	3103      	adds	r1, #3
 80077d2:	7809      	ldrb	r1, [r1, #0]
 80077d4:	b2c8      	uxtb	r0, r1
 80077d6:	f04f 0100 	mov.w	r1, #0
 80077da:	ea42 0400 	orr.w	r4, r2, r0
 80077de:	613c      	str	r4, [r7, #16]
 80077e0:	430b      	orrs	r3, r1
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80077e8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
 80077ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	020b      	lsls	r3, r1, #8
 80077fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077fe:	0202      	lsls	r2, r0, #8
 8007800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007802:	3102      	adds	r1, #2
 8007804:	7809      	ldrb	r1, [r1, #0]
 8007806:	b2c8      	uxtb	r0, r1
 8007808:	f04f 0100 	mov.w	r1, #0
 800780c:	ea42 0400 	orr.w	r4, r2, r0
 8007810:	60bc      	str	r4, [r7, #8]
 8007812:	430b      	orrs	r3, r1
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800781a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
 800781e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007822:	f04f 0200 	mov.w	r2, #0
 8007826:	f04f 0300 	mov.w	r3, #0
 800782a:	020b      	lsls	r3, r1, #8
 800782c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007830:	0202      	lsls	r2, r0, #8
 8007832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007834:	3101      	adds	r1, #1
 8007836:	7809      	ldrb	r1, [r1, #0]
 8007838:	b2c8      	uxtb	r0, r1
 800783a:	f04f 0100 	mov.w	r1, #0
 800783e:	ea42 0400 	orr.w	r4, r2, r0
 8007842:	603c      	str	r4, [r7, #0]
 8007844:	430b      	orrs	r3, r1
 8007846:	607b      	str	r3, [r7, #4]
 8007848:	e9d7 3400 	ldrd	r3, r4, [r7]
 800784c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 8007850:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007854:	f04f 0200 	mov.w	r2, #0
 8007858:	f04f 0300 	mov.w	r3, #0
 800785c:	020b      	lsls	r3, r1, #8
 800785e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007862:	0202      	lsls	r2, r0, #8
 8007864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007866:	7809      	ldrb	r1, [r1, #0]
 8007868:	b2c8      	uxtb	r0, r1
 800786a:	f04f 0100 	mov.w	r1, #0
 800786e:	ea42 0a00 	orr.w	sl, r2, r0
 8007872:	ea43 0b01 	orr.w	fp, r3, r1
 8007876:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
 800787a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 800787e:	4610      	mov	r0, r2
 8007880:	4619      	mov	r1, r3
 8007882:	3734      	adds	r7, #52	; 0x34
 8007884:	46bd      	mov	sp, r7
 8007886:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800788a:	4770      	bx	lr

0800788c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	887a      	ldrh	r2, [r7, #2]
 80078a0:	b2d2      	uxtb	r2, r2
 80078a2:	701a      	strb	r2, [r3, #0]
 80078a4:	887b      	ldrh	r3, [r7, #2]
 80078a6:	0a1b      	lsrs	r3, r3, #8
 80078a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	887a      	ldrh	r2, [r7, #2]
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	701a      	strb	r2, [r3, #0]
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	607a      	str	r2, [r7, #4]
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	b2d2      	uxtb	r2, r2
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	0a1b      	lsrs	r3, r3, #8
 80078dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	b2d2      	uxtb	r2, r2
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	0a1b      	lsrs	r3, r3, #8
 80078ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	607a      	str	r2, [r7, #4]
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	b2d2      	uxtb	r2, r2
 80078fa:	701a      	strb	r2, [r3, #0]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	701a      	strb	r2, [r3, #0]
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800791a:	b480      	push	{r7}
 800791c:	b085      	sub	sp, #20
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	60fa      	str	r2, [r7, #12]
 800792c:	783a      	ldrb	r2, [r7, #0]
 800792e:	701a      	strb	r2, [r3, #0]
 8007930:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007934:	f04f 0200 	mov.w	r2, #0
 8007938:	f04f 0300 	mov.w	r3, #0
 800793c:	0a02      	lsrs	r2, r0, #8
 800793e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007942:	0a0b      	lsrs	r3, r1, #8
 8007944:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	60fa      	str	r2, [r7, #12]
 800794e:	783a      	ldrb	r2, [r7, #0]
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007956:	f04f 0200 	mov.w	r2, #0
 800795a:	f04f 0300 	mov.w	r3, #0
 800795e:	0a02      	lsrs	r2, r0, #8
 8007960:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007964:	0a0b      	lsrs	r3, r1, #8
 8007966:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	60fa      	str	r2, [r7, #12]
 8007970:	783a      	ldrb	r2, [r7, #0]
 8007972:	701a      	strb	r2, [r3, #0]
 8007974:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007978:	f04f 0200 	mov.w	r2, #0
 800797c:	f04f 0300 	mov.w	r3, #0
 8007980:	0a02      	lsrs	r2, r0, #8
 8007982:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007986:	0a0b      	lsrs	r3, r1, #8
 8007988:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	60fa      	str	r2, [r7, #12]
 8007992:	783a      	ldrb	r2, [r7, #0]
 8007994:	701a      	strb	r2, [r3, #0]
 8007996:	e9d7 0100 	ldrd	r0, r1, [r7]
 800799a:	f04f 0200 	mov.w	r2, #0
 800799e:	f04f 0300 	mov.w	r3, #0
 80079a2:	0a02      	lsrs	r2, r0, #8
 80079a4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80079a8:	0a0b      	lsrs	r3, r1, #8
 80079aa:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	60fa      	str	r2, [r7, #12]
 80079b4:	783a      	ldrb	r2, [r7, #0]
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	f04f 0300 	mov.w	r3, #0
 80079c4:	0a02      	lsrs	r2, r0, #8
 80079c6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80079ca:	0a0b      	lsrs	r3, r1, #8
 80079cc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	60fa      	str	r2, [r7, #12]
 80079d6:	783a      	ldrb	r2, [r7, #0]
 80079d8:	701a      	strb	r2, [r3, #0]
 80079da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079de:	f04f 0200 	mov.w	r2, #0
 80079e2:	f04f 0300 	mov.w	r3, #0
 80079e6:	0a02      	lsrs	r2, r0, #8
 80079e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80079ec:	0a0b      	lsrs	r3, r1, #8
 80079ee:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	60fa      	str	r2, [r7, #12]
 80079f8:	783a      	ldrb	r2, [r7, #0]
 80079fa:	701a      	strb	r2, [r3, #0]
 80079fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a00:	f04f 0200 	mov.w	r2, #0
 8007a04:	f04f 0300 	mov.w	r3, #0
 8007a08:	0a02      	lsrs	r2, r0, #8
 8007a0a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007a0e:	0a0b      	lsrs	r3, r1, #8
 8007a10:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	60fa      	str	r2, [r7, #12]
 8007a1a:	783a      	ldrb	r2, [r7, #0]
 8007a1c:	701a      	strb	r2, [r3, #0]
}
 8007a1e:	bf00      	nop
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007a2a:	b480      	push	{r7}
 8007a2c:	b087      	sub	sp, #28
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00d      	beq.n	8007a60 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	1c53      	adds	r3, r2, #1
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	1c59      	adds	r1, r3, #1
 8007a4e:	6179      	str	r1, [r7, #20]
 8007a50:	7812      	ldrb	r2, [r2, #0]
 8007a52:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	607b      	str	r3, [r7, #4]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1f1      	bne.n	8007a44 <mem_cpy+0x1a>
	}
}
 8007a60:	bf00      	nop
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	617a      	str	r2, [r7, #20]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	b2d2      	uxtb	r2, r2
 8007a86:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	607b      	str	r3, [r7, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1f3      	bne.n	8007a7c <mem_set+0x10>
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007aa2:	b480      	push	{r7}
 8007aa4:	b089      	sub	sp, #36	; 0x24
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	60f8      	str	r0, [r7, #12]
 8007aaa:	60b9      	str	r1, [r7, #8]
 8007aac:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	61fb      	str	r3, [r7, #28]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	61fa      	str	r2, [r7, #28]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	61ba      	str	r2, [r7, #24]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	1acb      	subs	r3, r1, r3
 8007ace:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	607b      	str	r3, [r7, #4]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <mem_cmp+0x40>
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0eb      	beq.n	8007aba <mem_cmp+0x18>

	return r;
 8007ae2:	697b      	ldr	r3, [r7, #20]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3724      	adds	r7, #36	; 0x24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007afa:	e002      	b.n	8007b02 <chk_chr+0x12>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3301      	adds	r3, #1
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d005      	beq.n	8007b16 <chk_chr+0x26>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d1f2      	bne.n	8007afc <chk_chr+0xc>
	return *str;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	781b      	ldrb	r3, [r3, #0]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
	...

08007b28 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b32:	2300      	movs	r3, #0
 8007b34:	60bb      	str	r3, [r7, #8]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	e029      	b.n	8007b90 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007b3c:	4a27      	ldr	r2, [pc, #156]	; (8007bdc <chk_lock+0xb4>)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	011b      	lsls	r3, r3, #4
 8007b42:	4413      	add	r3, r2
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d01d      	beq.n	8007b86 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b4a:	4a24      	ldr	r2, [pc, #144]	; (8007bdc <chk_lock+0xb4>)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	4413      	add	r3, r2
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d116      	bne.n	8007b8a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007b5c:	4a1f      	ldr	r2, [pc, #124]	; (8007bdc <chk_lock+0xb4>)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	4413      	add	r3, r2
 8007b64:	3304      	adds	r3, #4
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d10c      	bne.n	8007b8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b70:	4a1a      	ldr	r2, [pc, #104]	; (8007bdc <chk_lock+0xb4>)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	4413      	add	r3, r2
 8007b78:	3308      	adds	r3, #8
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d102      	bne.n	8007b8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b84:	e007      	b.n	8007b96 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007b86:	2301      	movs	r3, #1
 8007b88:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d9d2      	bls.n	8007b3c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d109      	bne.n	8007bb0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d102      	bne.n	8007ba8 <chk_lock+0x80>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d101      	bne.n	8007bac <chk_lock+0x84>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	e010      	b.n	8007bce <chk_lock+0xa6>
 8007bac:	2312      	movs	r3, #18
 8007bae:	e00e      	b.n	8007bce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d108      	bne.n	8007bc8 <chk_lock+0xa0>
 8007bb6:	4a09      	ldr	r2, [pc, #36]	; (8007bdc <chk_lock+0xb4>)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	4413      	add	r3, r2
 8007bbe:	330c      	adds	r3, #12
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc6:	d101      	bne.n	8007bcc <chk_lock+0xa4>
 8007bc8:	2310      	movs	r3, #16
 8007bca:	e000      	b.n	8007bce <chk_lock+0xa6>
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	200006cc 	.word	0x200006cc

08007be0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007be6:	2300      	movs	r3, #0
 8007be8:	607b      	str	r3, [r7, #4]
 8007bea:	e002      	b.n	8007bf2 <enq_lock+0x12>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	607b      	str	r3, [r7, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d806      	bhi.n	8007c06 <enq_lock+0x26>
 8007bf8:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <enq_lock+0x40>)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	4413      	add	r3, r2
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1f2      	bne.n	8007bec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	bf14      	ite	ne
 8007c0c:	2301      	movne	r3, #1
 8007c0e:	2300      	moveq	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	200006cc 	.word	0x200006cc

08007c24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	e01f      	b.n	8007c74 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007c34:	4a41      	ldr	r2, [pc, #260]	; (8007d3c <inc_lock+0x118>)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	011b      	lsls	r3, r3, #4
 8007c3a:	4413      	add	r3, r2
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d113      	bne.n	8007c6e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007c46:	4a3d      	ldr	r2, [pc, #244]	; (8007d3c <inc_lock+0x118>)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	4413      	add	r3, r2
 8007c4e:	3304      	adds	r3, #4
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d109      	bne.n	8007c6e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007c5a:	4a38      	ldr	r2, [pc, #224]	; (8007d3c <inc_lock+0x118>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	4413      	add	r3, r2
 8007c62:	3308      	adds	r3, #8
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d006      	beq.n	8007c7c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3301      	adds	r3, #1
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d9dc      	bls.n	8007c34 <inc_lock+0x10>
 8007c7a:	e000      	b.n	8007c7e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007c7c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d132      	bne.n	8007cea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c84:	2300      	movs	r3, #0
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	e002      	b.n	8007c90 <inc_lock+0x6c>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d806      	bhi.n	8007ca4 <inc_lock+0x80>
 8007c96:	4a29      	ldr	r2, [pc, #164]	; (8007d3c <inc_lock+0x118>)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	4413      	add	r3, r2
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1f2      	bne.n	8007c8a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d101      	bne.n	8007cae <inc_lock+0x8a>
 8007caa:	2300      	movs	r3, #0
 8007cac:	e040      	b.n	8007d30 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	4922      	ldr	r1, [pc, #136]	; (8007d3c <inc_lock+0x118>)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	440b      	add	r3, r1
 8007cba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	491e      	ldr	r1, [pc, #120]	; (8007d3c <inc_lock+0x118>)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	011b      	lsls	r3, r3, #4
 8007cc6:	440b      	add	r3, r1
 8007cc8:	3304      	adds	r3, #4
 8007cca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cd0:	491a      	ldr	r1, [pc, #104]	; (8007d3c <inc_lock+0x118>)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	440b      	add	r3, r1
 8007cd8:	3308      	adds	r3, #8
 8007cda:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007cdc:	4a17      	ldr	r2, [pc, #92]	; (8007d3c <inc_lock+0x118>)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	4413      	add	r3, r2
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d009      	beq.n	8007d04 <inc_lock+0xe0>
 8007cf0:	4a12      	ldr	r2, [pc, #72]	; (8007d3c <inc_lock+0x118>)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	4413      	add	r3, r2
 8007cf8:	330c      	adds	r3, #12
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <inc_lock+0xe0>
 8007d00:	2300      	movs	r3, #0
 8007d02:	e015      	b.n	8007d30 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d108      	bne.n	8007d1c <inc_lock+0xf8>
 8007d0a:	4a0c      	ldr	r2, [pc, #48]	; (8007d3c <inc_lock+0x118>)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	011b      	lsls	r3, r3, #4
 8007d10:	4413      	add	r3, r2
 8007d12:	330c      	adds	r3, #12
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	3301      	adds	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	e001      	b.n	8007d20 <inc_lock+0xfc>
 8007d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d20:	4906      	ldr	r1, [pc, #24]	; (8007d3c <inc_lock+0x118>)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	011b      	lsls	r3, r3, #4
 8007d26:	440b      	add	r3, r1
 8007d28:	330c      	adds	r3, #12
 8007d2a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3301      	adds	r3, #1
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	200006cc 	.word	0x200006cc

08007d40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	607b      	str	r3, [r7, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d825      	bhi.n	8007da0 <dec_lock+0x60>
		n = Files[i].ctr;
 8007d54:	4a17      	ldr	r2, [pc, #92]	; (8007db4 <dec_lock+0x74>)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	4413      	add	r3, r2
 8007d5c:	330c      	adds	r3, #12
 8007d5e:	881b      	ldrh	r3, [r3, #0]
 8007d60:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007d62:	89fb      	ldrh	r3, [r7, #14]
 8007d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d68:	d101      	bne.n	8007d6e <dec_lock+0x2e>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007d6e:	89fb      	ldrh	r3, [r7, #14]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <dec_lock+0x3a>
 8007d74:	89fb      	ldrh	r3, [r7, #14]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007d7a:	4a0e      	ldr	r2, [pc, #56]	; (8007db4 <dec_lock+0x74>)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	011b      	lsls	r3, r3, #4
 8007d80:	4413      	add	r3, r2
 8007d82:	330c      	adds	r3, #12
 8007d84:	89fa      	ldrh	r2, [r7, #14]
 8007d86:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007d88:	89fb      	ldrh	r3, [r7, #14]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d105      	bne.n	8007d9a <dec_lock+0x5a>
 8007d8e:	4a09      	ldr	r2, [pc, #36]	; (8007db4 <dec_lock+0x74>)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	4413      	add	r3, r2
 8007d96:	2200      	movs	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	737b      	strb	r3, [r7, #13]
 8007d9e:	e001      	b.n	8007da4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007da0:	2302      	movs	r3, #2
 8007da2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007da4:	7b7b      	ldrb	r3, [r7, #13]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	200006cc 	.word	0x200006cc

08007db8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	e010      	b.n	8007de8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007dc6:	4a0d      	ldr	r2, [pc, #52]	; (8007dfc <clear_lock+0x44>)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	4413      	add	r3, r2
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d105      	bne.n	8007de2 <clear_lock+0x2a>
 8007dd6:	4a09      	ldr	r2, [pc, #36]	; (8007dfc <clear_lock+0x44>)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	011b      	lsls	r3, r3, #4
 8007ddc:	4413      	add	r3, r2
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3301      	adds	r3, #1
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d9eb      	bls.n	8007dc6 <clear_lock+0xe>
	}
}
 8007dee:	bf00      	nop
 8007df0:	bf00      	nop
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	200006cc 	.word	0x200006cc

08007e00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	78db      	ldrb	r3, [r3, #3]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d034      	beq.n	8007e7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	7858      	ldrb	r0, [r3, #1]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e24:	2301      	movs	r3, #1
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	f7ff fbfc 	bl	8007624 <disk_write>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	73fb      	strb	r3, [r7, #15]
 8007e36:	e022      	b.n	8007e7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	1ad2      	subs	r2, r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d217      	bcs.n	8007e7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	789b      	ldrb	r3, [r3, #2]
 8007e52:	613b      	str	r3, [r7, #16]
 8007e54:	e010      	b.n	8007e78 <sync_window+0x78>
					wsect += fs->fsize;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	7858      	ldrb	r0, [r3, #1]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	f7ff fbd9 	bl	8007624 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d8eb      	bhi.n	8007e56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d01b      	beq.n	8007ed8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff ffad 	bl	8007e00 <sync_window>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d113      	bne.n	8007ed8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	7858      	ldrb	r0, [r3, #1]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007eba:	2301      	movs	r3, #1
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	f7ff fb91 	bl	80075e4 <disk_read>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d004      	beq.n	8007ed2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ecc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7ff ff87 	bl	8007e00 <sync_window>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d158      	bne.n	8007fae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d148      	bne.n	8007f96 <sync_fs+0xb2>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	791b      	ldrb	r3, [r3, #4]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d144      	bne.n	8007f96 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3338      	adds	r3, #56	; 0x38
 8007f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f14:	2100      	movs	r1, #0
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff fda8 	bl	8007a6c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3338      	adds	r3, #56	; 0x38
 8007f20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f24:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7ff fcaf 	bl	800788c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3338      	adds	r3, #56	; 0x38
 8007f32:	4921      	ldr	r1, [pc, #132]	; (8007fb8 <sync_fs+0xd4>)
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff fcc4 	bl	80078c2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3338      	adds	r3, #56	; 0x38
 8007f3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007f42:	491e      	ldr	r1, [pc, #120]	; (8007fbc <sync_fs+0xd8>)
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7ff fcbc 	bl	80078c2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3338      	adds	r3, #56	; 0x38
 8007f4e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	4619      	mov	r1, r3
 8007f58:	4610      	mov	r0, r2
 8007f5a:	f7ff fcb2 	bl	80078c2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3338      	adds	r3, #56	; 0x38
 8007f62:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	f7ff fca8 	bl	80078c2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	7858      	ldrb	r0, [r3, #1]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	f7ff fb4a 	bl	8007624 <disk_write>
			fs->fsi_flag = 0;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	785b      	ldrb	r3, [r3, #1]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff fb60 	bl	8007664 <disk_ioctl>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <sync_fs+0xca>
 8007faa:	2301      	movs	r3, #1
 8007fac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	41615252 	.word	0x41615252
 8007fbc:	61417272 	.word	0x61417272

08007fc0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	3b02      	subs	r3, #2
 8007fce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	3b02      	subs	r3, #2
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d301      	bcc.n	8007fe0 <clust2sect+0x20>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	e008      	b.n	8007ff2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	895b      	ldrh	r3, [r3, #10]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	fb03 f202 	mul.w	r2, r3, r2
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff0:	4413      	add	r3, r2
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
	...

08008000 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	6809      	ldr	r1, [r1, #0]
 800800e:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	2901      	cmp	r1, #1
 8008014:	d904      	bls.n	8008020 <get_fat+0x20>
 8008016:	69b9      	ldr	r1, [r7, #24]
 8008018:	69c9      	ldr	r1, [r1, #28]
 800801a:	6838      	ldr	r0, [r7, #0]
 800801c:	4288      	cmp	r0, r1
 800801e:	d302      	bcc.n	8008026 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008020:	2301      	movs	r3, #1
 8008022:	61fb      	str	r3, [r7, #28]
 8008024:	e102      	b.n	800822c <get_fat+0x22c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008026:	f04f 31ff 	mov.w	r1, #4294967295
 800802a:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800802c:	69b9      	ldr	r1, [r7, #24]
 800802e:	7809      	ldrb	r1, [r1, #0]
 8008030:	3901      	subs	r1, #1
 8008032:	2903      	cmp	r1, #3
 8008034:	f200 80ee 	bhi.w	8008214 <get_fat+0x214>
 8008038:	a001      	add	r0, pc, #4	; (adr r0, 8008040 <get_fat+0x40>)
 800803a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800803e:	bf00      	nop
 8008040:	08008051 	.word	0x08008051
 8008044:	080080d9 	.word	0x080080d9
 8008048:	0800810f 	.word	0x0800810f
 800804c:	08008147 	.word	0x08008147
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	085b      	lsrs	r3, r3, #1
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4413      	add	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	0a5b      	lsrs	r3, r3, #9
 8008066:	4413      	add	r3, r2
 8008068:	4619      	mov	r1, r3
 800806a:	69b8      	ldr	r0, [r7, #24]
 800806c:	f7ff ff0c 	bl	8007e88 <move_window>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	f040 80d1 	bne.w	800821a <get_fat+0x21a>
			wc = fs->win[bc++ % SS(fs)];
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	1c5a      	adds	r2, r3, #1
 800807c:	60fa      	str	r2, [r7, #12]
 800807e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	4413      	add	r3, r2
 8008086:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800808a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	0a5b      	lsrs	r3, r3, #9
 8008094:	4413      	add	r3, r2
 8008096:	4619      	mov	r1, r3
 8008098:	69b8      	ldr	r0, [r7, #24]
 800809a:	f7ff fef5 	bl	8007e88 <move_window>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f040 80bc 	bne.w	800821e <get_fat+0x21e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	4413      	add	r3, r2
 80080b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80080b4:	021b      	lsls	r3, r3, #8
 80080b6:	461a      	mov	r2, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <get_fat+0xce>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	091b      	lsrs	r3, r3, #4
 80080cc:	e002      	b.n	80080d4 <get_fat+0xd4>
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080d4:	61fb      	str	r3, [r7, #28]
			break;
 80080d6:	e0a9      	b.n	800822c <get_fat+0x22c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	0a1b      	lsrs	r3, r3, #8
 80080e0:	4413      	add	r3, r2
 80080e2:	4619      	mov	r1, r3
 80080e4:	69b8      	ldr	r0, [r7, #24]
 80080e6:	f7ff fecf 	bl	8007e88 <move_window>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f040 8098 	bne.w	8008222 <get_fat+0x222>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008100:	4413      	add	r3, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f7ff facc 	bl	80076a0 <ld_word>
 8008108:	4603      	mov	r3, r0
 800810a:	61fb      	str	r3, [r7, #28]
			break;
 800810c:	e08e      	b.n	800822c <get_fat+0x22c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	09db      	lsrs	r3, r3, #7
 8008116:	4413      	add	r3, r2
 8008118:	4619      	mov	r1, r3
 800811a:	69b8      	ldr	r0, [r7, #24]
 800811c:	f7ff feb4 	bl	8007e88 <move_window>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d17f      	bne.n	8008226 <get_fat+0x226>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008134:	4413      	add	r3, r2
 8008136:	4618      	mov	r0, r3
 8008138:	f7ff faca 	bl	80076d0 <ld_dword>
 800813c:	4603      	mov	r3, r0
 800813e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008142:	61fb      	str	r3, [r7, #28]
			break;
 8008144:	e072      	b.n	800822c <get_fat+0x22c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800814c:	4301      	orrs	r1, r0
 800814e:	d061      	beq.n	8008214 <get_fat+0x214>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8008150:	6879      	ldr	r1, [r7, #4]
 8008152:	6889      	ldr	r1, [r1, #8]
 8008154:	6838      	ldr	r0, [r7, #0]
 8008156:	1a41      	subs	r1, r0, r1
 8008158:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800815a:	6879      	ldr	r1, [r7, #4]
 800815c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8008160:	f110 32ff 	adds.w	r2, r0, #4294967295
 8008164:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008168:	f04f 0000 	mov.w	r0, #0
 800816c:	f04f 0100 	mov.w	r1, #0
 8008170:	0a50      	lsrs	r0, r2, #9
 8008172:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8008176:	0a59      	lsrs	r1, r3, #9
 8008178:	4602      	mov	r2, r0
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	895b      	ldrh	r3, [r3, #10]
 800817e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008182:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	79db      	ldrb	r3, [r3, #7]
 8008188:	2b02      	cmp	r3, #2
 800818a:	d10e      	bne.n	80081aa <get_fat+0x1aa>
					if (cofs <= clen) {
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	429a      	cmp	r2, r3
 8008192:	d80a      	bhi.n	80081aa <get_fat+0x1aa>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	429a      	cmp	r2, r3
 800819a:	d002      	beq.n	80081a2 <get_fat+0x1a2>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	3301      	adds	r3, #1
 80081a0:	e001      	b.n	80081a6 <get_fat+0x1a6>
 80081a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80081a6:	61fb      	str	r3, [r7, #28]
						break;
 80081a8:	e040      	b.n	800822c <get_fat+0x22c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	79db      	ldrb	r3, [r3, #7]
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d108      	bne.n	80081c4 <get_fat+0x1c4>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d203      	bcs.n	80081c4 <get_fat+0x1c4>
					val = clst + 1; 	/* Generate the value */
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	3301      	adds	r3, #1
 80081c0:	61fb      	str	r3, [r7, #28]
					break;
 80081c2:	e033      	b.n	800822c <get_fat+0x22c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	79db      	ldrb	r3, [r3, #7]
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d023      	beq.n	8008214 <get_fat+0x214>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <get_fat+0x1dc>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80081d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80081d8:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80081da:	e027      	b.n	800822c <get_fat+0x22c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	09db      	lsrs	r3, r3, #7
 80081e4:	4413      	add	r3, r2
 80081e6:	4619      	mov	r1, r3
 80081e8:	69b8      	ldr	r0, [r7, #24]
 80081ea:	f7ff fe4d 	bl	8007e88 <move_window>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d11a      	bne.n	800822a <get_fat+0x22a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008202:	4413      	add	r3, r2
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff fa63 	bl	80076d0 <ld_dword>
 800820a:	4603      	mov	r3, r0
 800820c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008210:	61fb      	str	r3, [r7, #28]
					break;
 8008212:	e00b      	b.n	800822c <get_fat+0x22c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008214:	2301      	movs	r3, #1
 8008216:	61fb      	str	r3, [r7, #28]
 8008218:	e008      	b.n	800822c <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800821a:	bf00      	nop
 800821c:	e006      	b.n	800822c <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800821e:	bf00      	nop
 8008220:	e004      	b.n	800822c <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008222:	bf00      	nop
 8008224:	e002      	b.n	800822c <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008226:	bf00      	nop
 8008228:	e000      	b.n	800822c <get_fat+0x22c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800822a:	bf00      	nop
		}
	}

	return val;
 800822c:	69fb      	ldr	r3, [r7, #28]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3720      	adds	r7, #32
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop

08008238 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008238:	b590      	push	{r4, r7, lr}
 800823a:	b089      	sub	sp, #36	; 0x24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008244:	2302      	movs	r3, #2
 8008246:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b01      	cmp	r3, #1
 800824c:	f240 80d6 	bls.w	80083fc <put_fat+0x1c4>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	429a      	cmp	r2, r3
 8008258:	f080 80d0 	bcs.w	80083fc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b04      	cmp	r3, #4
 8008262:	f300 80d4 	bgt.w	800840e <put_fat+0x1d6>
 8008266:	2b03      	cmp	r3, #3
 8008268:	f280 8093 	bge.w	8008392 <put_fat+0x15a>
 800826c:	2b01      	cmp	r3, #1
 800826e:	d002      	beq.n	8008276 <put_fat+0x3e>
 8008270:	2b02      	cmp	r3, #2
 8008272:	d06e      	beq.n	8008352 <put_fat+0x11a>
 8008274:	e0cb      	b.n	800840e <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	61bb      	str	r3, [r7, #24]
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	085b      	lsrs	r3, r3, #1
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	4413      	add	r3, r2
 8008282:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	0a5b      	lsrs	r3, r3, #9
 800828c:	4413      	add	r3, r2
 800828e:	4619      	mov	r1, r3
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f7ff fdf9 	bl	8007e88 <move_window>
 8008296:	4603      	mov	r3, r0
 8008298:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800829a:	7ffb      	ldrb	r3, [r7, #31]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f040 80af 	bne.w	8008400 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	1c59      	adds	r1, r3, #1
 80082ac:	61b9      	str	r1, [r7, #24]
 80082ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b2:	4413      	add	r3, r2
 80082b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00d      	beq.n	80082dc <put_fat+0xa4>
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	b25b      	sxtb	r3, r3
 80082c6:	f003 030f 	and.w	r3, r3, #15
 80082ca:	b25a      	sxtb	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	011b      	lsls	r3, r3, #4
 80082d2:	b25b      	sxtb	r3, r3
 80082d4:	4313      	orrs	r3, r2
 80082d6:	b25b      	sxtb	r3, r3
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	e001      	b.n	80082e0 <put_fat+0xa8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2201      	movs	r2, #1
 80082e8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	0a5b      	lsrs	r3, r3, #9
 80082f2:	4413      	add	r3, r2
 80082f4:	4619      	mov	r1, r3
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f7ff fdc6 	bl	8007e88 <move_window>
 80082fc:	4603      	mov	r3, r0
 80082fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008300:	7ffb      	ldrb	r3, [r7, #31]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d17e      	bne.n	8008404 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008312:	4413      	add	r3, r2
 8008314:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d003      	beq.n	8008328 <put_fat+0xf0>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	091b      	lsrs	r3, r3, #4
 8008324:	b2db      	uxtb	r3, r3
 8008326:	e00e      	b.n	8008346 <put_fat+0x10e>
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	b25b      	sxtb	r3, r3
 800832e:	f023 030f 	bic.w	r3, r3, #15
 8008332:	b25a      	sxtb	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	0a1b      	lsrs	r3, r3, #8
 8008338:	b25b      	sxtb	r3, r3
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	b25b      	sxtb	r3, r3
 8008340:	4313      	orrs	r3, r2
 8008342:	b25b      	sxtb	r3, r3
 8008344:	b2db      	uxtb	r3, r3
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	70da      	strb	r2, [r3, #3]
			break;
 8008350:	e05d      	b.n	800840e <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	0a1b      	lsrs	r3, r3, #8
 800835a:	4413      	add	r3, r2
 800835c:	4619      	mov	r1, r3
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f7ff fd92 	bl	8007e88 <move_window>
 8008364:	4603      	mov	r3, r0
 8008366:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008368:	7ffb      	ldrb	r3, [r7, #31]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d14c      	bne.n	8008408 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800837c:	4413      	add	r3, r2
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	b292      	uxth	r2, r2
 8008382:	4611      	mov	r1, r2
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff fa81 	bl	800788c <st_word>
			fs->wflag = 1;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2201      	movs	r2, #1
 800838e:	70da      	strb	r2, [r3, #3]
			break;
 8008390:	e03d      	b.n	800840e <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	09db      	lsrs	r3, r3, #7
 800839a:	4413      	add	r3, r2
 800839c:	4619      	mov	r1, r3
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7ff fd72 	bl	8007e88 <move_window>
 80083a4:	4603      	mov	r3, r0
 80083a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083a8:	7ffb      	ldrb	r3, [r7, #31]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d12e      	bne.n	800840c <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	d012      	beq.n	80083dc <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80083ca:	4413      	add	r3, r2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7ff f97f 	bl	80076d0 <ld_dword>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80083d8:	4323      	orrs	r3, r4
 80083da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80083ea:	4413      	add	r3, r2
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7ff fa67 	bl	80078c2 <st_dword>
			fs->wflag = 1;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2201      	movs	r2, #1
 80083f8:	70da      	strb	r2, [r3, #3]
			break;
 80083fa:	e008      	b.n	800840e <put_fat+0x1d6>
		}
	}
 80083fc:	bf00      	nop
 80083fe:	e006      	b.n	800840e <put_fat+0x1d6>
			if (res != FR_OK) break;
 8008400:	bf00      	nop
 8008402:	e004      	b.n	800840e <put_fat+0x1d6>
			if (res != FR_OK) break;
 8008404:	bf00      	nop
 8008406:	e002      	b.n	800840e <put_fat+0x1d6>
			if (res != FR_OK) break;
 8008408:	bf00      	nop
 800840a:	e000      	b.n	800840e <put_fat+0x1d6>
			if (res != FR_OK) break;
 800840c:	bf00      	nop
	return res;
 800840e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3724      	adds	r7, #36	; 0x24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd90      	pop	{r4, r7, pc}

08008418 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	; 0x28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	3b02      	subs	r3, #2
 8008428:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	3b02      	subs	r3, #2
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	429a      	cmp	r2, r3
 8008434:	d301      	bcc.n	800843a <find_bitmap+0x22>
 8008436:	2300      	movs	r3, #0
 8008438:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	61fb      	str	r3, [r7, #28]
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	61bb      	str	r3, [r7, #24]
 8008442:	2300      	movs	r3, #0
 8008444:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	0b1b      	lsrs	r3, r3, #12
 800844e:	4413      	add	r3, r2
 8008450:	4619      	mov	r1, r3
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f7ff fd18 	bl	8007e88 <move_window>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <find_bitmap+0x4c>
 800845e:	f04f 33ff 	mov.w	r3, #4294967295
 8008462:	e051      	b.n	8008508 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	08db      	lsrs	r3, r3, #3
 8008468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800846c:	623b      	str	r3, [r7, #32]
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	2201      	movs	r2, #1
 8008476:	fa02 f303 	lsl.w	r3, r2, r3
 800847a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	4413      	add	r3, r2
 8008484:	3338      	adds	r3, #56	; 0x38
 8008486:	781a      	ldrb	r2, [r3, #0]
 8008488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800848c:	4013      	ands	r3, r2
 800848e:	74fb      	strb	r3, [r7, #19]
 8008490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	3301      	adds	r3, #1
 800849e:	61fb      	str	r3, [r7, #28]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	3b02      	subs	r3, #2
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d307      	bcc.n	80084bc <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 80084ac:	2300      	movs	r3, #0
 80084ae:	61fb      	str	r3, [r7, #28]
 80084b0:	2300      	movs	r3, #0
 80084b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084ba:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80084bc:	7cfb      	ldrb	r3, [r7, #19]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d109      	bne.n	80084d6 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	3301      	adds	r3, #1
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d106      	bne.n	80084de <find_bitmap+0xc6>
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	3302      	adds	r3, #2
 80084d4:	e018      	b.n	8008508 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	61bb      	str	r3, [r7, #24]
 80084da:	2300      	movs	r3, #0
 80084dc:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80084de:	69fa      	ldr	r2, [r7, #28]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d101      	bne.n	80084ea <find_bitmap+0xd2>
 80084e6:	2300      	movs	r3, #0
 80084e8:	e00e      	b.n	8008508 <find_bitmap+0xf0>
			} while (bm);
 80084ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1c5      	bne.n	800847e <find_bitmap+0x66>
			bm = 1;
 80084f2:	2301      	movs	r3, #1
 80084f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	3301      	adds	r3, #1
 80084fc:	623b      	str	r3, [r7, #32]
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008504:	d3bb      	bcc.n	800847e <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8008506:	e79e      	b.n	8008446 <find_bitmap+0x2e>
	}
}
 8008508:	4618      	mov	r0, r3
 800850a:	3728      	adds	r7, #40	; 0x28
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	3b02      	subs	r3, #2
 8008522:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	0b1b      	lsrs	r3, r3, #12
 800852c:	4413      	add	r3, r2
 800852e:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	08db      	lsrs	r3, r3, #3
 8008534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008538:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f003 0307 	and.w	r3, r3, #7
 8008540:	2201      	movs	r2, #1
 8008542:	fa02 f303 	lsl.w	r3, r2, r3
 8008546:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	617a      	str	r2, [r7, #20]
 800854e:	4619      	mov	r1, r3
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f7ff fc99 	bl	8007e88 <move_window>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <change_bitmap+0x50>
 800855c:	2301      	movs	r3, #1
 800855e:	e03d      	b.n	80085dc <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	4413      	add	r3, r2
 8008566:	3338      	adds	r3, #56	; 0x38
 8008568:	781a      	ldrb	r2, [r3, #0]
 800856a:	7ffb      	ldrb	r3, [r7, #31]
 800856c:	4013      	ands	r3, r2
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	bf14      	ite	ne
 8008574:	2301      	movne	r3, #1
 8008576:	2300      	moveq	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	461a      	mov	r2, r3
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	4293      	cmp	r3, r2
 8008580:	d101      	bne.n	8008586 <change_bitmap+0x76>
 8008582:	2302      	movs	r3, #2
 8008584:	e02a      	b.n	80085dc <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	4413      	add	r3, r2
 800858c:	3338      	adds	r3, #56	; 0x38
 800858e:	781a      	ldrb	r2, [r3, #0]
 8008590:	7ffb      	ldrb	r3, [r7, #31]
 8008592:	4053      	eors	r3, r2
 8008594:	b2d9      	uxtb	r1, r3
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	4413      	add	r3, r2
 800859c:	3338      	adds	r3, #56	; 0x38
 800859e:	460a      	mov	r2, r1
 80085a0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2201      	movs	r2, #1
 80085a6:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3b01      	subs	r3, #1
 80085ac:	607b      	str	r3, [r7, #4]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <change_bitmap+0xa8>
 80085b4:	2300      	movs	r3, #0
 80085b6:	e011      	b.n	80085dc <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 80085b8:	7ffb      	ldrb	r3, [r7, #31]
 80085ba:	005b      	lsls	r3, r3, #1
 80085bc:	77fb      	strb	r3, [r7, #31]
 80085be:	7ffb      	ldrb	r3, [r7, #31]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1cd      	bne.n	8008560 <change_bitmap+0x50>
			bm = 1;
 80085c4:	2301      	movs	r3, #1
 80085c6:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	3301      	adds	r3, #1
 80085cc:	61bb      	str	r3, [r7, #24]
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085d4:	d3c4      	bcc.n	8008560 <change_bitmap+0x50>
		i = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80085da:	e7b5      	b.n	8008548 <change_bitmap+0x38>
	}
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3720      	adds	r7, #32
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	79db      	ldrb	r3, [r3, #7]
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d121      	bne.n	8008638 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	613b      	str	r3, [r7, #16]
 8008600:	e014      	b.n	800862c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	3301      	adds	r3, #1
 800860a:	461a      	mov	r2, r3
 800860c:	6979      	ldr	r1, [r7, #20]
 800860e:	f7ff fe13 	bl	8008238 <put_fat>
 8008612:	4603      	mov	r3, r0
 8008614:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8008616:	7bfb      	ldrb	r3, [r7, #15]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <fill_first_frag+0x3c>
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	e00c      	b.n	800863a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	3301      	adds	r3, #1
 8008624:	617b      	str	r3, [r7, #20]
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	3b01      	subs	r3, #1
 800862a:	613b      	str	r3, [r7, #16]
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e7      	bne.n	8008602 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b086      	sub	sp, #24
 8008646:	af00      	add	r7, sp, #0
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	60b9      	str	r1, [r7, #8]
 800864c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800864e:	e020      	b.n	8008692 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	1c59      	adds	r1, r3, #1
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d905      	bls.n	8008672 <fill_last_frag+0x30>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	3302      	adds	r3, #2
 8008670:	e000      	b.n	8008674 <fill_last_frag+0x32>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	461a      	mov	r2, r3
 8008676:	f7ff fddf 	bl	8008238 <put_fat>
 800867a:	4603      	mov	r3, r0
 800867c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <fill_last_frag+0x46>
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	e009      	b.n	800869c <fill_last_frag+0x5a>
		obj->n_frag--;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	1e5a      	subs	r2, r3, #1
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1da      	bne.n	8008650 <fill_last_frag+0xe>
	}
	return FR_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08a      	sub	sp, #40	; 0x28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d904      	bls.n	80086d2 <remove_chain+0x2e>
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d301      	bcc.n	80086d6 <remove_chain+0x32>
 80086d2:	2302      	movs	r3, #2
 80086d4:	e096      	b.n	8008804 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d014      	beq.n	8008706 <remove_chain+0x62>
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d103      	bne.n	80086ec <remove_chain+0x48>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	79db      	ldrb	r3, [r3, #7]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d00c      	beq.n	8008706 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80086ec:	f04f 32ff 	mov.w	r2, #4294967295
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	69b8      	ldr	r0, [r7, #24]
 80086f4:	f7ff fda0 	bl	8008238 <put_fat>
 80086f8:	4603      	mov	r3, r0
 80086fa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80086fc:	7ffb      	ldrb	r3, [r7, #31]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <remove_chain+0x62>
 8008702:	7ffb      	ldrb	r3, [r7, #31]
 8008704:	e07e      	b.n	8008804 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f7ff fc79 	bl	8008000 <get_fat>
 800870e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d055      	beq.n	80087c2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d101      	bne.n	8008720 <remove_chain+0x7c>
 800871c:	2302      	movs	r3, #2
 800871e:	e071      	b.n	8008804 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008726:	d101      	bne.n	800872c <remove_chain+0x88>
 8008728:	2301      	movs	r3, #1
 800872a:	e06b      	b.n	8008804 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b04      	cmp	r3, #4
 8008732:	d00b      	beq.n	800874c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008734:	2200      	movs	r2, #0
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	69b8      	ldr	r0, [r7, #24]
 800873a:	f7ff fd7d 	bl	8008238 <put_fat>
 800873e:	4603      	mov	r3, r0
 8008740:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008742:	7ffb      	ldrb	r3, [r7, #31]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <remove_chain+0xa8>
 8008748:	7ffb      	ldrb	r3, [r7, #31]
 800874a:	e05b      	b.n	8008804 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	699a      	ldr	r2, [r3, #24]
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	69db      	ldr	r3, [r3, #28]
 8008754:	3b02      	subs	r3, #2
 8008756:	429a      	cmp	r2, r3
 8008758:	d20b      	bcs.n	8008772 <remove_chain+0xce>
			fs->free_clst++;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	1c5a      	adds	r2, r3, #1
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	791b      	ldrb	r3, [r3, #4]
 8008768:	f043 0301 	orr.w	r3, r3, #1
 800876c:	b2da      	uxtb	r2, r3
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	3301      	adds	r3, #1
 8008776:	697a      	ldr	r2, [r7, #20]
 8008778:	429a      	cmp	r2, r3
 800877a:	d102      	bne.n	8008782 <remove_chain+0xde>
			ecl = nxt;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	623b      	str	r3, [r7, #32]
 8008780:	e017      	b.n	80087b2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b04      	cmp	r3, #4
 8008788:	d10f      	bne.n	80087aa <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800878a:	6a3a      	ldr	r2, [r7, #32]
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	2300      	movs	r3, #0
 8008794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008796:	69b8      	ldr	r0, [r7, #24]
 8008798:	f7ff feba 	bl	8008510 <change_bitmap>
 800879c:	4603      	mov	r3, r0
 800879e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80087a0:	7ffb      	ldrb	r3, [r7, #31]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <remove_chain+0x106>
 80087a6:	7ffb      	ldrb	r3, [r7, #31]
 80087a8:	e02c      	b.n	8008804 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	623b      	str	r3, [r7, #32]
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d3a2      	bcc.n	8008706 <remove_chain+0x62>
 80087c0:	e000      	b.n	80087c4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80087c2:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d11a      	bne.n	8008802 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d103      	bne.n	80087da <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	71da      	strb	r2, [r3, #7]
 80087d8:	e013      	b.n	8008802 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	79db      	ldrb	r3, [r3, #7]
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d10f      	bne.n	8008802 <remove_chain+0x15e>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d30a      	bcc.n	8008802 <remove_chain+0x15e>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	4413      	add	r3, r2
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d802      	bhi.n	8008802 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2202      	movs	r2, #2
 8008800:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3728      	adds	r7, #40	; 0x28
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10d      	bne.n	800883e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d004      	beq.n	8008838 <create_chain+0x2c>
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	429a      	cmp	r2, r3
 8008836:	d31b      	bcc.n	8008870 <create_chain+0x64>
 8008838:	2301      	movs	r3, #1
 800883a:	61bb      	str	r3, [r7, #24]
 800883c:	e018      	b.n	8008870 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff fbdd 	bl	8008000 <get_fat>
 8008846:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d801      	bhi.n	8008852 <create_chain+0x46>
 800884e:	2301      	movs	r3, #1
 8008850:	e0d9      	b.n	8008a06 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008858:	d101      	bne.n	800885e <create_chain+0x52>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	e0d3      	b.n	8008a06 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	429a      	cmp	r2, r3
 8008866:	d201      	bcs.n	800886c <create_chain+0x60>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	e0cc      	b.n	8008a06 <create_chain+0x1fa>
		scl = clst;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b04      	cmp	r3, #4
 8008876:	d164      	bne.n	8008942 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8008878:	2201      	movs	r2, #1
 800887a:	69b9      	ldr	r1, [r7, #24]
 800887c:	6938      	ldr	r0, [r7, #16]
 800887e:	f7ff fdcb 	bl	8008418 <find_bitmap>
 8008882:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <create_chain+0x86>
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008890:	d101      	bne.n	8008896 <create_chain+0x8a>
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	e0b7      	b.n	8008a06 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8008896:	2301      	movs	r3, #1
 8008898:	2201      	movs	r2, #1
 800889a:	69f9      	ldr	r1, [r7, #28]
 800889c:	6938      	ldr	r0, [r7, #16]
 800889e:	f7ff fe37 	bl	8008510 <change_bitmap>
 80088a2:	4603      	mov	r3, r0
 80088a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d101      	bne.n	80088b0 <create_chain+0xa4>
 80088ac:	2301      	movs	r3, #1
 80088ae:	e0aa      	b.n	8008a06 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d102      	bne.n	80088bc <create_chain+0xb0>
 80088b6:	f04f 33ff 	mov.w	r3, #4294967295
 80088ba:	e0a4      	b.n	8008a06 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d103      	bne.n	80088ca <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2202      	movs	r2, #2
 80088c6:	71da      	strb	r2, [r3, #7]
 80088c8:	e011      	b.n	80088ee <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	79db      	ldrb	r3, [r3, #7]
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d10d      	bne.n	80088ee <create_chain+0xe2>
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	3301      	adds	r3, #1
 80088d6:	69fa      	ldr	r2, [r7, #28]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d008      	beq.n	80088ee <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	1ad2      	subs	r2, r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2203      	movs	r2, #3
 80088ec:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	79db      	ldrb	r3, [r3, #7]
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d064      	beq.n	80089c0 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	3301      	adds	r3, #1
 80088fa:	69fa      	ldr	r2, [r7, #28]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d10b      	bne.n	8008918 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <create_chain+0x104>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	3301      	adds	r3, #1
 800890e:	e000      	b.n	8008912 <create_chain+0x106>
 8008910:	2302      	movs	r3, #2
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	61d3      	str	r3, [r2, #28]
 8008916:	e053      	b.n	80089c0 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <create_chain+0x11a>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff fe89 	bl	8008642 <fill_last_frag>
 8008930:	4603      	mov	r3, r0
 8008932:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8008934:	7dfb      	ldrb	r3, [r7, #23]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d142      	bne.n	80089c0 <create_chain+0x1b4>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	61da      	str	r2, [r3, #28]
 8008940:	e03e      	b.n	80089c0 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	3301      	adds	r3, #1
 800894a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	429a      	cmp	r2, r3
 8008954:	d307      	bcc.n	8008966 <create_chain+0x15a>
				ncl = 2;
 8008956:	2302      	movs	r3, #2
 8008958:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800895a:	69fa      	ldr	r2, [r7, #28]
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	429a      	cmp	r2, r3
 8008960:	d901      	bls.n	8008966 <create_chain+0x15a>
 8008962:	2300      	movs	r3, #0
 8008964:	e04f      	b.n	8008a06 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008966:	69f9      	ldr	r1, [r7, #28]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff fb49 	bl	8008000 <get_fat>
 800896e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00e      	beq.n	8008994 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d003      	beq.n	8008984 <create_chain+0x178>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008982:	d101      	bne.n	8008988 <create_chain+0x17c>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	e03e      	b.n	8008a06 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	429a      	cmp	r2, r3
 800898e:	d1da      	bne.n	8008946 <create_chain+0x13a>
 8008990:	2300      	movs	r3, #0
 8008992:	e038      	b.n	8008a06 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8008994:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008996:	f04f 32ff 	mov.w	r2, #4294967295
 800899a:	69f9      	ldr	r1, [r7, #28]
 800899c:	6938      	ldr	r0, [r7, #16]
 800899e:	f7ff fc4b 	bl	8008238 <put_fat>
 80089a2:	4603      	mov	r3, r0
 80089a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d109      	bne.n	80089c0 <create_chain+0x1b4>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d006      	beq.n	80089c0 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6938      	ldr	r0, [r7, #16]
 80089b8:	f7ff fc3e 	bl	8008238 <put_fat>
 80089bc:	4603      	mov	r3, r0
 80089be:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80089c0:	7dfb      	ldrb	r3, [r7, #23]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d116      	bne.n	80089f4 <create_chain+0x1e8>
		fs->last_clst = ncl;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	69fa      	ldr	r2, [r7, #28]
 80089ca:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	699a      	ldr	r2, [r3, #24]
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	69db      	ldr	r3, [r3, #28]
 80089d4:	3b02      	subs	r3, #2
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d804      	bhi.n	80089e4 <create_chain+0x1d8>
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	1e5a      	subs	r2, r3, #1
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	791b      	ldrb	r3, [r3, #4]
 80089e8:	f043 0301 	orr.w	r3, r3, #1
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	711a      	strb	r2, [r3, #4]
 80089f2:	e007      	b.n	8008a04 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d102      	bne.n	8008a00 <create_chain+0x1f4>
 80089fa:	f04f 33ff 	mov.w	r3, #4294967295
 80089fe:	e000      	b.n	8008a02 <create_chain+0x1f6>
 8008a00:	2301      	movs	r3, #1
 8008a02:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008a04:	69fb      	ldr	r3, [r7, #28]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3720      	adds	r7, #32
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b088      	sub	sp, #32
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	60f8      	str	r0, [r7, #12]
 8008a16:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a24:	3304      	adds	r3, #4
 8008a26:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a2c:	f04f 0000 	mov.w	r0, #0
 8008a30:	f04f 0100 	mov.w	r1, #0
 8008a34:	0a50      	lsrs	r0, r2, #9
 8008a36:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8008a3a:	0a59      	lsrs	r1, r3, #9
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	895b      	ldrh	r3, [r3, #10]
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	f04f 0300 	mov.w	r3, #0
 8008a46:	f7f8 f8b7 	bl	8000bb8 <__aeabi_uldivmod>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4613      	mov	r3, r2
 8008a50:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	1d1a      	adds	r2, r3, #4
 8008a56:	61ba      	str	r2, [r7, #24]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <clmt_clust+0x58>
 8008a62:	2300      	movs	r3, #0
 8008a64:	e010      	b.n	8008a88 <clmt_clust+0x7a>
		if (cl < ncl) break;	/* In this fragment? */
 8008a66:	69fa      	ldr	r2, [r7, #28]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d307      	bcc.n	8008a7e <clmt_clust+0x70>
		cl -= ncl; tbl++;		/* Next fragment */
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a7c:	e7e9      	b.n	8008a52 <clmt_clust+0x44>
		if (cl < ncl) break;	/* In this fragment? */
 8008a7e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3720      	adds	r7, #32
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	d102      	bne.n	8008aae <dir_sdi+0x1e>
 8008aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aac:	e001      	b.n	8008ab2 <dir_sdi+0x22>
 8008aae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d904      	bls.n	8008ac2 <dir_sdi+0x32>
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	f003 031f 	and.w	r3, r3, #31
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <dir_sdi+0x36>
		return FR_INT_ERR;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e066      	b.n	8008b94 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d109      	bne.n	8008aec <dir_sdi+0x5c>
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d905      	bls.n	8008aec <dir_sdi+0x5c>
		clst = fs->dirbase;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10c      	bne.n	8008b0c <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	095b      	lsrs	r3, r3, #5
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	8912      	ldrh	r2, [r2, #8]
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d301      	bcc.n	8008b02 <dir_sdi+0x72>
 8008afe:	2302      	movs	r3, #2
 8008b00:	e048      	b.n	8008b94 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	639a      	str	r2, [r3, #56]	; 0x38
 8008b0a:	e029      	b.n	8008b60 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	895b      	ldrh	r3, [r3, #10]
 8008b10:	025b      	lsls	r3, r3, #9
 8008b12:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b14:	e019      	b.n	8008b4a <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6979      	ldr	r1, [r7, #20]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff fa70 	bl	8008000 <get_fat>
 8008b20:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b28:	d101      	bne.n	8008b2e <dir_sdi+0x9e>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e032      	b.n	8008b94 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d904      	bls.n	8008b3e <dir_sdi+0xae>
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d301      	bcc.n	8008b42 <dir_sdi+0xb2>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e028      	b.n	8008b94 <dir_sdi+0x104>
			ofs -= csz;
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d2e1      	bcs.n	8008b16 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8008b52:	6979      	ldr	r1, [r7, #20]
 8008b54:	6938      	ldr	r0, [r7, #16]
 8008b56:	f7ff fa33 	bl	8007fc0 <clust2sect>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <dir_sdi+0xe2>
 8008b6e:	2302      	movs	r3, #2
 8008b70:	e010      	b.n	8008b94 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	0a5b      	lsrs	r3, r3, #9
 8008b7a:	441a      	add	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8c:	441a      	add	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3718      	adds	r7, #24
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb0:	3320      	adds	r3, #32
 8008bb2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00b      	beq.n	8008bd4 <dir_next+0x38>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b04      	cmp	r3, #4
 8008bc2:	d102      	bne.n	8008bca <dir_next+0x2e>
 8008bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc8:	e001      	b.n	8008bce <dir_next+0x32>
 8008bca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d801      	bhi.n	8008bd8 <dir_next+0x3c>
 8008bd4:	2304      	movs	r3, #4
 8008bd6:	e0b2      	b.n	8008d3e <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f040 80a0 	bne.w	8008d24 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10b      	bne.n	8008c0e <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	095b      	lsrs	r3, r3, #5
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	8912      	ldrh	r2, [r2, #8]
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	f0c0 8090 	bcc.w	8008d24 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	639a      	str	r2, [r3, #56]	; 0x38
 8008c0a:	2304      	movs	r3, #4
 8008c0c:	e097      	b.n	8008d3e <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	0a5b      	lsrs	r3, r3, #9
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	8952      	ldrh	r2, [r2, #10]
 8008c16:	3a01      	subs	r2, #1
 8008c18:	4013      	ands	r3, r2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f040 8082 	bne.w	8008d24 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c26:	4619      	mov	r1, r3
 8008c28:	4610      	mov	r0, r2
 8008c2a:	f7ff f9e9 	bl	8008000 <get_fat>
 8008c2e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d801      	bhi.n	8008c3a <dir_next+0x9e>
 8008c36:	2302      	movs	r3, #2
 8008c38:	e081      	b.n	8008d3e <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c40:	d101      	bne.n	8008c46 <dir_next+0xaa>
 8008c42:	2301      	movs	r3, #1
 8008c44:	e07b      	b.n	8008d3e <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d35f      	bcc.n	8008d10 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d104      	bne.n	8008c60 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	e06e      	b.n	8008d3e <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c66:	4619      	mov	r1, r3
 8008c68:	4610      	mov	r0, r2
 8008c6a:	f7ff fdcf 	bl	800880c <create_chain>
 8008c6e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <dir_next+0xde>
 8008c76:	2307      	movs	r3, #7
 8008c78:	e061      	b.n	8008d3e <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <dir_next+0xe8>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e05c      	b.n	8008d3e <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8a:	d101      	bne.n	8008c90 <dir_next+0xf4>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e056      	b.n	8008d3e <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	79db      	ldrb	r3, [r3, #7]
 8008c94:	f043 0304 	orr.w	r3, r3, #4
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f7ff f8ae 	bl	8007e00 <sync_window>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <dir_next+0x112>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e047      	b.n	8008d3e <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3338      	adds	r3, #56	; 0x38
 8008cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fe fed7 	bl	8007a6c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	6979      	ldr	r1, [r7, #20]
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f7ff f97b 	bl	8007fc0 <clust2sect>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	635a      	str	r2, [r3, #52]	; 0x34
 8008cd0:	e012      	b.n	8008cf8 <dir_next+0x15c>
						fs->wflag = 1;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f7ff f891 	bl	8007e00 <sync_window>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <dir_next+0x14c>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e02a      	b.n	8008d3e <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	3301      	adds	r3, #1
 8008cec:	613b      	str	r3, [r7, #16]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	635a      	str	r2, [r3, #52]	; 0x34
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	895b      	ldrh	r3, [r3, #10]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d3e6      	bcc.n	8008cd2 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	1ad2      	subs	r2, r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8008d16:	6979      	ldr	r1, [r7, #20]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7ff f951 	bl	8007fc0 <clust2sect>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d36:	441a      	add	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b086      	sub	sp, #24
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008d56:	2100      	movs	r1, #0
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff fe99 	bl	8008a90 <dir_sdi>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d140      	bne.n	8008dea <dir_alloc+0xa4>
		n = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	4619      	mov	r1, r3
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f7ff f888 	bl	8007e88 <move_window>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d132      	bne.n	8008de8 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b04      	cmp	r3, #4
 8008d88:	d108      	bne.n	8008d9c <dir_alloc+0x56>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	b25b      	sxtb	r3, r3
 8008d92:	43db      	mvns	r3, r3
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	09db      	lsrs	r3, r3, #7
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	e00f      	b.n	8008dbc <dir_alloc+0x76>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2be5      	cmp	r3, #229	; 0xe5
 8008da4:	d004      	beq.n	8008db0 <dir_alloc+0x6a>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <dir_alloc+0x6e>
 8008db0:	2301      	movs	r3, #1
 8008db2:	e000      	b.n	8008db6 <dir_alloc+0x70>
 8008db4:	2300      	movs	r3, #0
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d007      	beq.n	8008dd0 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	613b      	str	r3, [r7, #16]
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d102      	bne.n	8008dd4 <dir_alloc+0x8e>
 8008dce:	e00c      	b.n	8008dea <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff fee0 	bl	8008b9c <dir_next>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0c2      	beq.n	8008d6c <dir_alloc+0x26>
 8008de6:	e000      	b.n	8008dea <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8008de8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	2b04      	cmp	r3, #4
 8008dee:	d101      	bne.n	8008df4 <dir_alloc+0xae>
 8008df0:	2307      	movs	r3, #7
 8008df2:	75fb      	strb	r3, [r7, #23]
	return res;
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	331a      	adds	r3, #26
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fe fc47 	bl	80076a0 <ld_word>
 8008e12:	4603      	mov	r3, r0
 8008e14:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d109      	bne.n	8008e32 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	3314      	adds	r3, #20
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fe fc3c 	bl	80076a0 <ld_word>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	041b      	lsls	r3, r3, #16
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008e32:	68fb      	ldr	r3, [r7, #12]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	331a      	adds	r3, #26
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	b292      	uxth	r2, r2
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe fd1a 	bl	800788c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b03      	cmp	r3, #3
 8008e5e:	d109      	bne.n	8008e74 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f103 0214 	add.w	r2, r3, #20
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	0c1b      	lsrs	r3, r3, #16
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	4610      	mov	r0, r2
 8008e70:	f7fe fd0c 	bl	800788c <st_word>
	}
}
 8008e74:	bf00      	nop
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008e7c:	b590      	push	{r4, r7, lr}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	331a      	adds	r3, #26
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe fc08 	bl	80076a0 <ld_word>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <cmp_lfn+0x1e>
 8008e96:	2300      	movs	r3, #0
 8008e98:	e059      	b.n	8008f4e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ea2:	1e5a      	subs	r2, r3, #1
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	005b      	lsls	r3, r3, #1
 8008ea8:	4413      	add	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	81fb      	strh	r3, [r7, #14]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	e033      	b.n	8008f22 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008eba:	4a27      	ldr	r2, [pc, #156]	; (8008f58 <cmp_lfn+0xdc>)
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fe fbe9 	bl	80076a0 <ld_word>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008ed2:	89fb      	ldrh	r3, [r7, #14]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d01a      	beq.n	8008f0e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2bfe      	cmp	r3, #254	; 0xfe
 8008edc:	d812      	bhi.n	8008f04 <cmp_lfn+0x88>
 8008ede:	89bb      	ldrh	r3, [r7, #12]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f003 f827 	bl	800bf34 <ff_wtoupper>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	461c      	mov	r4, r3
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	617a      	str	r2, [r7, #20]
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f003 f81b 	bl	800bf34 <ff_wtoupper>
 8008efe:	4603      	mov	r3, r0
 8008f00:	429c      	cmp	r4, r3
 8008f02:	d001      	beq.n	8008f08 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008f04:	2300      	movs	r3, #0
 8008f06:	e022      	b.n	8008f4e <cmp_lfn+0xd2>
			}
			wc = uc;
 8008f08:	89bb      	ldrh	r3, [r7, #12]
 8008f0a:	81fb      	strh	r3, [r7, #14]
 8008f0c:	e006      	b.n	8008f1c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008f0e:	89bb      	ldrh	r3, [r7, #12]
 8008f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d001      	beq.n	8008f1c <cmp_lfn+0xa0>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	e018      	b.n	8008f4e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	613b      	str	r3, [r7, #16]
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b0c      	cmp	r3, #12
 8008f26:	d9c8      	bls.n	8008eba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <cmp_lfn+0xd0>
 8008f34:	89fb      	ldrh	r3, [r7, #14]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d008      	beq.n	8008f4c <cmp_lfn+0xd0>
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	4413      	add	r3, r2
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <cmp_lfn+0xd0>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e000      	b.n	8008f4e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008f4c:	2301      	movs	r3, #1
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	371c      	adds	r7, #28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd90      	pop	{r4, r7, pc}
 8008f56:	bf00      	nop
 8008f58:	0800ed3c 	.word	0x0800ed3c

08008f5c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	331a      	adds	r3, #26
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fb98 	bl	80076a0 <ld_word>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <pick_lfn+0x1e>
 8008f76:	2300      	movs	r3, #0
 8008f78:	e04d      	b.n	8009016 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f82:	1e5a      	subs	r2, r3, #1
 8008f84:	4613      	mov	r3, r2
 8008f86:	005b      	lsls	r3, r3, #1
 8008f88:	4413      	add	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4413      	add	r3, r2
 8008f8e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f90:	2301      	movs	r3, #1
 8008f92:	81fb      	strh	r3, [r7, #14]
 8008f94:	2300      	movs	r3, #0
 8008f96:	613b      	str	r3, [r7, #16]
 8008f98:	e028      	b.n	8008fec <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008f9a:	4a21      	ldr	r2, [pc, #132]	; (8009020 <pick_lfn+0xc4>)
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fe fb79 	bl	80076a0 <ld_word>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008fb2:	89fb      	ldrh	r3, [r7, #14]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00f      	beq.n	8008fd8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	2bfe      	cmp	r3, #254	; 0xfe
 8008fbc:	d901      	bls.n	8008fc2 <pick_lfn+0x66>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	e029      	b.n	8009016 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8008fc2:	89bb      	ldrh	r3, [r7, #12]
 8008fc4:	81fb      	strh	r3, [r7, #14]
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	1c5a      	adds	r2, r3, #1
 8008fca:	617a      	str	r2, [r7, #20]
 8008fcc:	005b      	lsls	r3, r3, #1
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	89fa      	ldrh	r2, [r7, #14]
 8008fd4:	801a      	strh	r2, [r3, #0]
 8008fd6:	e006      	b.n	8008fe6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008fd8:	89bb      	ldrh	r3, [r7, #12]
 8008fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d001      	beq.n	8008fe6 <pick_lfn+0x8a>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	e017      	b.n	8009016 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	613b      	str	r3, [r7, #16]
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	2b0c      	cmp	r3, #12
 8008ff0:	d9d3      	bls.n	8008f9a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2bfe      	cmp	r3, #254	; 0xfe
 8009002:	d901      	bls.n	8009008 <pick_lfn+0xac>
 8009004:	2300      	movs	r3, #0
 8009006:	e006      	b.n	8009016 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	4413      	add	r3, r2
 8009010:	2200      	movs	r2, #0
 8009012:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8009014:	2301      	movs	r3, #1
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	0800ed3c 	.word	0x0800ed3c

08009024 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	4611      	mov	r1, r2
 8009030:	461a      	mov	r2, r3
 8009032:	460b      	mov	r3, r1
 8009034:	71fb      	strb	r3, [r7, #7]
 8009036:	4613      	mov	r3, r2
 8009038:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	330d      	adds	r3, #13
 800903e:	79ba      	ldrb	r2, [r7, #6]
 8009040:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	330b      	adds	r3, #11
 8009046:	220f      	movs	r2, #15
 8009048:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	330c      	adds	r3, #12
 800904e:	2200      	movs	r2, #0
 8009050:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	331a      	adds	r3, #26
 8009056:	2100      	movs	r1, #0
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fc17 	bl	800788c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	1e5a      	subs	r2, r3, #1
 8009062:	4613      	mov	r3, r2
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800906e:	2300      	movs	r3, #0
 8009070:	82fb      	strh	r3, [r7, #22]
 8009072:	2300      	movs	r3, #0
 8009074:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009076:	8afb      	ldrh	r3, [r7, #22]
 8009078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800907c:	4293      	cmp	r3, r2
 800907e:	d007      	beq.n	8009090 <put_lfn+0x6c>
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	1c5a      	adds	r2, r3, #1
 8009084:	61fa      	str	r2, [r7, #28]
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	4413      	add	r3, r2
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009090:	4a17      	ldr	r2, [pc, #92]	; (80090f0 <put_lfn+0xcc>)
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	4413      	add	r3, r2
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	461a      	mov	r2, r3
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	4413      	add	r3, r2
 800909e:	8afa      	ldrh	r2, [r7, #22]
 80090a0:	4611      	mov	r1, r2
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe fbf2 	bl	800788c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80090a8:	8afb      	ldrh	r3, [r7, #22]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d102      	bne.n	80090b4 <put_lfn+0x90>
 80090ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090b2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	3301      	adds	r3, #1
 80090b8:	61bb      	str	r3, [r7, #24]
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	2b0c      	cmp	r3, #12
 80090be:	d9da      	bls.n	8009076 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80090c0:	8afb      	ldrh	r3, [r7, #22]
 80090c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d006      	beq.n	80090d8 <put_lfn+0xb4>
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	4413      	add	r3, r2
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d103      	bne.n	80090e0 <put_lfn+0xbc>
 80090d8:	79fb      	ldrb	r3, [r7, #7]
 80090da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090de:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	79fa      	ldrb	r2, [r7, #7]
 80090e4:	701a      	strb	r2, [r3, #0]
}
 80090e6:	bf00      	nop
 80090e8:	3720      	adds	r7, #32
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	0800ed3c 	.word	0x0800ed3c

080090f4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b08c      	sub	sp, #48	; 0x30
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009102:	220b      	movs	r2, #11
 8009104:	68b9      	ldr	r1, [r7, #8]
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f7fe fc8f 	bl	8007a2a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	2b05      	cmp	r3, #5
 8009110:	d92b      	bls.n	800916a <gen_numname+0x76>
		sr = seq;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009116:	e022      	b.n	800915e <gen_numname+0x6a>
			wc = *lfn++;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	1c9a      	adds	r2, r3, #2
 800911c:	607a      	str	r2, [r7, #4]
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009122:	2300      	movs	r3, #0
 8009124:	62bb      	str	r3, [r7, #40]	; 0x28
 8009126:	e017      	b.n	8009158 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	005a      	lsls	r2, r3, #1
 800912c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	4413      	add	r3, r2
 8009134:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009136:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009138:	085b      	lsrs	r3, r3, #1
 800913a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d005      	beq.n	8009152 <gen_numname+0x5e>
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800914c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009150:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009154:	3301      	adds	r3, #1
 8009156:	62bb      	str	r3, [r7, #40]	; 0x28
 8009158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915a:	2b0f      	cmp	r3, #15
 800915c:	d9e4      	bls.n	8009128 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1d8      	bne.n	8009118 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800916a:	2307      	movs	r3, #7
 800916c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	f003 030f 	and.w	r3, r3, #15
 8009176:	b2db      	uxtb	r3, r3
 8009178:	3330      	adds	r3, #48	; 0x30
 800917a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800917e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009182:	2b39      	cmp	r3, #57	; 0x39
 8009184:	d904      	bls.n	8009190 <gen_numname+0x9c>
 8009186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800918a:	3307      	adds	r3, #7
 800918c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	1e5a      	subs	r2, r3, #1
 8009194:	62ba      	str	r2, [r7, #40]	; 0x28
 8009196:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800919a:	4413      	add	r3, r2
 800919c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80091a0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	091b      	lsrs	r3, r3, #4
 80091a8:	603b      	str	r3, [r7, #0]
	} while (seq);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1de      	bne.n	800916e <gen_numname+0x7a>
	ns[i] = '~';
 80091b0:	f107 0214 	add.w	r2, r7, #20
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	4413      	add	r3, r2
 80091b8:	227e      	movs	r2, #126	; 0x7e
 80091ba:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80091bc:	2300      	movs	r3, #0
 80091be:	627b      	str	r3, [r7, #36]	; 0x24
 80091c0:	e002      	b.n	80091c8 <gen_numname+0xd4>
 80091c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c4:	3301      	adds	r3, #1
 80091c6:	627b      	str	r3, [r7, #36]	; 0x24
 80091c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d205      	bcs.n	80091dc <gen_numname+0xe8>
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	4413      	add	r3, r2
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b20      	cmp	r3, #32
 80091da:	d1f2      	bne.n	80091c2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80091dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091de:	2b07      	cmp	r3, #7
 80091e0:	d808      	bhi.n	80091f4 <gen_numname+0x100>
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80091e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80091ec:	4413      	add	r3, r2
 80091ee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80091f2:	e000      	b.n	80091f6 <gen_numname+0x102>
 80091f4:	2120      	movs	r1, #32
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	627a      	str	r2, [r7, #36]	; 0x24
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	460a      	mov	r2, r1
 8009202:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	2b07      	cmp	r3, #7
 8009208:	d9e8      	bls.n	80091dc <gen_numname+0xe8>
}
 800920a:	bf00      	nop
 800920c:	bf00      	nop
 800920e:	3730      	adds	r7, #48	; 0x30
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009220:	230b      	movs	r3, #11
 8009222:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	b2da      	uxtb	r2, r3
 8009228:	0852      	lsrs	r2, r2, #1
 800922a:	01db      	lsls	r3, r3, #7
 800922c:	4313      	orrs	r3, r2
 800922e:	b2da      	uxtb	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	1c59      	adds	r1, r3, #1
 8009234:	6079      	str	r1, [r7, #4]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	4413      	add	r3, r2
 800923a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	3b01      	subs	r3, #1
 8009240:	60bb      	str	r3, [r7, #8]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1ed      	bne.n	8009224 <sum_sfn+0x10>
	return sum;
 8009248:	7bfb      	ldrb	r3, [r7, #15]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr

08009256 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8009256:	b480      	push	{r7}
 8009258:	b087      	sub	sp, #28
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3301      	adds	r3, #1
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	3301      	adds	r3, #1
 8009266:	015b      	lsls	r3, r3, #5
 8009268:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800926a:	2300      	movs	r3, #0
 800926c:	827b      	strh	r3, [r7, #18]
 800926e:	2300      	movs	r3, #0
 8009270:	617b      	str	r3, [r7, #20]
 8009272:	e018      	b.n	80092a6 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d103      	bne.n	8009282 <xdir_sum+0x2c>
			i++;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	3301      	adds	r3, #1
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	e00e      	b.n	80092a0 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8009282:	8a7b      	ldrh	r3, [r7, #18]
 8009284:	03db      	lsls	r3, r3, #15
 8009286:	b29a      	uxth	r2, r3
 8009288:	8a7b      	ldrh	r3, [r7, #18]
 800928a:	085b      	lsrs	r3, r3, #1
 800928c:	b29b      	uxth	r3, r3
 800928e:	4413      	add	r3, r2
 8009290:	b29a      	uxth	r2, r3
 8009292:	6879      	ldr	r1, [r7, #4]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	440b      	add	r3, r1
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	b29b      	uxth	r3, r3
 800929c:	4413      	add	r3, r2
 800929e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	3301      	adds	r3, #1
 80092a4:	617b      	str	r3, [r7, #20]
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d3e2      	bcc.n	8009274 <xdir_sum+0x1e>
		}
	}
	return sum;
 80092ae:	8a7b      	ldrh	r3, [r7, #18]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	371c      	adds	r7, #28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 80092c8:	e01f      	b.n	800930a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 80092ca:	89bb      	ldrh	r3, [r7, #12]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f002 fe31 	bl	800bf34 <ff_wtoupper>
 80092d2:	4603      	mov	r3, r0
 80092d4:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80092d6:	89fb      	ldrh	r3, [r7, #14]
 80092d8:	03db      	lsls	r3, r3, #15
 80092da:	b29a      	uxth	r2, r3
 80092dc:	89fb      	ldrh	r3, [r7, #14]
 80092de:	085b      	lsrs	r3, r3, #1
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	4413      	add	r3, r2
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	89bb      	ldrh	r3, [r7, #12]
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	4413      	add	r3, r2
 80092ee:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80092f0:	89fb      	ldrh	r3, [r7, #14]
 80092f2:	03db      	lsls	r3, r3, #15
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	89fb      	ldrh	r3, [r7, #14]
 80092f8:	085b      	lsrs	r3, r3, #1
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	4413      	add	r3, r2
 80092fe:	b29a      	uxth	r2, r3
 8009300:	89bb      	ldrh	r3, [r7, #12]
 8009302:	0a1b      	lsrs	r3, r3, #8
 8009304:	b29b      	uxth	r3, r3
 8009306:	4413      	add	r3, r2
 8009308:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	1c9a      	adds	r2, r3, #2
 800930e:	607a      	str	r2, [r7, #4]
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	81bb      	strh	r3, [r7, #12]
 8009314:	89bb      	ldrh	r3, [r7, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1d7      	bne.n	80092ca <xname_sum+0xe>
	}
	return sum;
 800931a:	89fb      	ldrh	r3, [r7, #14]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8009324:	b590      	push	{r4, r7, lr}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933c:	4619      	mov	r1, r3
 800933e:	4610      	mov	r0, r2
 8009340:	f7fe fda2 	bl	8007e88 <move_window>
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <load_xdir+0x2e>
 800934e:	7bfb      	ldrb	r3, [r7, #15]
 8009350:	e09f      	b.n	8009492 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b85      	cmp	r3, #133	; 0x85
 800935a:	d001      	beq.n	8009360 <load_xdir+0x3c>
 800935c:	2302      	movs	r3, #2
 800935e:	e098      	b.n	8009492 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009364:	2220      	movs	r2, #32
 8009366:	4619      	mov	r1, r3
 8009368:	6938      	ldr	r0, [r7, #16]
 800936a:	f7fe fb5e 	bl	8007a2a <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	3301      	adds	r3, #1
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	3301      	adds	r3, #1
 8009376:	015b      	lsls	r3, r3, #5
 8009378:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2b5f      	cmp	r3, #95	; 0x5f
 800937e:	d903      	bls.n	8009388 <load_xdir+0x64>
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009386:	d901      	bls.n	800938c <load_xdir+0x68>
 8009388:	2302      	movs	r3, #2
 800938a:	e082      	b.n	8009492 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800938c:	2100      	movs	r1, #0
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff fc04 	bl	8008b9c <dir_next>
 8009394:	4603      	mov	r3, r0
 8009396:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <load_xdir+0x7e>
 800939e:	7bfb      	ldrb	r3, [r7, #15]
 80093a0:	e077      	b.n	8009492 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093aa:	4619      	mov	r1, r3
 80093ac:	4610      	mov	r0, r2
 80093ae:	f7fe fd6b 	bl	8007e88 <move_window>
 80093b2:	4603      	mov	r3, r0
 80093b4:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <load_xdir+0x9c>
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
 80093be:	e068      	b.n	8009492 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2bc0      	cmp	r3, #192	; 0xc0
 80093c8:	d001      	beq.n	80093ce <load_xdir+0xaa>
 80093ca:	2302      	movs	r3, #2
 80093cc:	e061      	b.n	8009492 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f103 0020 	add.w	r0, r3, #32
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d8:	2220      	movs	r2, #32
 80093da:	4619      	mov	r1, r3
 80093dc:	f7fe fb25 	bl	8007a2a <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	3323      	adds	r3, #35	; 0x23
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	332c      	adds	r3, #44	; 0x2c
 80093e8:	4a2c      	ldr	r2, [pc, #176]	; (800949c <load_xdir+0x178>)
 80093ea:	fba2 2303 	umull	r2, r3, r2, r3
 80093ee:	08db      	lsrs	r3, r3, #3
 80093f0:	015b      	lsls	r3, r3, #5
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d201      	bcs.n	80093fc <load_xdir+0xd8>
 80093f8:	2302      	movs	r3, #2
 80093fa:	e04a      	b.n	8009492 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 80093fc:	2340      	movs	r3, #64	; 0x40
 80093fe:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8009400:	2100      	movs	r1, #0
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7ff fbca 	bl	8008b9c <dir_next>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <load_xdir+0xf2>
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	e03d      	b.n	8009492 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941e:	4619      	mov	r1, r3
 8009420:	4610      	mov	r0, r2
 8009422:	f7fe fd31 	bl	8007e88 <move_window>
 8009426:	4603      	mov	r3, r0
 8009428:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <load_xdir+0x110>
 8009430:	7bfb      	ldrb	r3, [r7, #15]
 8009432:	e02e      	b.n	8009492 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2bc1      	cmp	r3, #193	; 0xc1
 800943c:	d001      	beq.n	8009442 <load_xdir+0x11e>
 800943e:	2302      	movs	r3, #2
 8009440:	e027      	b.n	8009492 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009448:	d208      	bcs.n	800945c <load_xdir+0x138>
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	18d0      	adds	r0, r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009454:	2220      	movs	r2, #32
 8009456:	4619      	mov	r1, r3
 8009458:	f7fe fae7 	bl	8007a2a <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	3320      	adds	r3, #32
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	429a      	cmp	r2, r3
 8009468:	d3ca      	bcc.n	8009400 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009470:	d80e      	bhi.n	8009490 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8009472:	6938      	ldr	r0, [r7, #16]
 8009474:	f7ff feef 	bl	8009256 <xdir_sum>
 8009478:	4603      	mov	r3, r0
 800947a:	461c      	mov	r4, r3
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	3302      	adds	r3, #2
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe f90d 	bl	80076a0 <ld_word>
 8009486:	4603      	mov	r3, r0
 8009488:	429c      	cmp	r4, r3
 800948a:	d001      	beq.n	8009490 <load_xdir+0x16c>
 800948c:	2302      	movs	r3, #2
 800948e:	e000      	b.n	8009492 <load_xdir+0x16e>
	}
	return FR_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	371c      	adds	r7, #28
 8009496:	46bd      	mov	sp, r7
 8009498:	bd90      	pop	{r4, r7, pc}
 800949a:	bf00      	nop
 800949c:	88888889 	.word	0x88888889

080094a0 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 80094a0:	b5b0      	push	{r4, r5, r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	6808      	ldr	r0, [r1, #0]
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6a08      	ldr	r0, [r1, #32]
 80094b6:	6879      	ldr	r1, [r7, #4]
 80094b8:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80094ba:	6839      	ldr	r1, [r7, #0]
 80094bc:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80094be:	b2c8      	uxtb	r0, r1
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80094c8:	4608      	mov	r0, r1
 80094ca:	f04f 0100 	mov.w	r1, #0
 80094ce:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 80094d2:	f04f 0500 	mov.w	r5, #0
 80094d6:	ea00 0204 	and.w	r2, r0, r4
 80094da:	ea01 0305 	and.w	r3, r1, r5
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7ff facc 	bl	8008a90 <dir_sdi>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d104      	bne.n	800950c <load_obj_dir+0x6c>
		res = load_xdir(dp);		/* Load the object's entry block */
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff ff0e 	bl	8009324 <load_xdir>
 8009508:	4603      	mov	r3, r0
 800950a:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800950c:	7bfb      	ldrb	r3, [r7, #15]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bdb0      	pop	{r4, r5, r7, pc}

08009516 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8009516:	b590      	push	{r4, r7, lr}
 8009518:	b087      	sub	sp, #28
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	1c9c      	adds	r4, r3, #2
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f7ff fe93 	bl	8009256 <xdir_sum>
 8009530:	4603      	mov	r3, r0
 8009532:	4619      	mov	r1, r3
 8009534:	4620      	mov	r0, r4
 8009536:	f7fe f9a9 	bl	800788c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	3301      	adds	r3, #1
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	3301      	adds	r3, #1
 8009542:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff faa0 	bl	8008a90 <dir_sdi>
 8009550:	4603      	mov	r3, r0
 8009552:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8009554:	e026      	b.n	80095a4 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955e:	4619      	mov	r1, r3
 8009560:	4610      	mov	r0, r2
 8009562:	f7fe fc91 	bl	8007e88 <move_window>
 8009566:	4603      	mov	r3, r0
 8009568:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800956a:	7dfb      	ldrb	r3, [r7, #23]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d11d      	bne.n	80095ac <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009574:	2220      	movs	r2, #32
 8009576:	68f9      	ldr	r1, [r7, #12]
 8009578:	4618      	mov	r0, r3
 800957a:	f7fe fa56 	bl	8007a2a <mem_cpy>
		dp->obj.fs->wflag = 1;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2201      	movs	r2, #1
 8009584:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	3b01      	subs	r3, #1
 800958a:	613b      	str	r3, [r7, #16]
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00e      	beq.n	80095b0 <store_xdir+0x9a>
		dirb += SZDIRE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3320      	adds	r3, #32
 8009596:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8009598:	2100      	movs	r1, #0
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7ff fafe 	bl	8008b9c <dir_next>
 80095a0:	4603      	mov	r3, r0
 80095a2:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d0d5      	beq.n	8009556 <store_xdir+0x40>
 80095aa:	e002      	b.n	80095b2 <store_xdir+0x9c>
		if (res != FR_OK) break;
 80095ac:	bf00      	nop
 80095ae:	e000      	b.n	80095b2 <store_xdir+0x9c>
		if (--nent == 0) break;
 80095b0:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <store_xdir+0xa8>
 80095b8:	7dfb      	ldrb	r3, [r7, #23]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d101      	bne.n	80095c2 <store_xdir+0xac>
 80095be:	7dfb      	ldrb	r3, [r7, #23]
 80095c0:	e000      	b.n	80095c4 <store_xdir+0xae>
 80095c2:	2302      	movs	r3, #2
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	371c      	adds	r7, #28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd90      	pop	{r4, r7, pc}

080095cc <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 80095cc:	b590      	push	{r4, r7, lr}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 80095d6:	2240      	movs	r2, #64	; 0x40
 80095d8:	2100      	movs	r1, #0
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7fe fa46 	bl	8007a6c <mem_set>
	dirb[XDIR_Type] = 0x85;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2285      	movs	r2, #133	; 0x85
 80095e4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3320      	adds	r3, #32
 80095ea:	22c0      	movs	r2, #192	; 0xc0
 80095ec:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 80095ee:	2300      	movs	r3, #0
 80095f0:	72bb      	strb	r3, [r7, #10]
 80095f2:	2301      	movs	r3, #1
 80095f4:	72fb      	strb	r3, [r7, #11]
 80095f6:	2301      	movs	r3, #1
 80095f8:	813b      	strh	r3, [r7, #8]
 80095fa:	2340      	movs	r3, #64	; 0x40
 80095fc:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	60fa      	str	r2, [r7, #12]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	4413      	add	r3, r2
 8009608:	22c1      	movs	r2, #193	; 0xc1
 800960a:	701a      	strb	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	1c5a      	adds	r2, r3, #1
 8009610:	60fa      	str	r2, [r7, #12]
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	4413      	add	r3, r2
 8009616:	2200      	movs	r2, #0
 8009618:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800961a:	893b      	ldrh	r3, [r7, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00b      	beq.n	8009638 <create_xdir+0x6c>
 8009620:	7abb      	ldrb	r3, [r7, #10]
 8009622:	005b      	lsls	r3, r3, #1
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	4413      	add	r3, r2
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	813b      	strh	r3, [r7, #8]
 800962c:	893b      	ldrh	r3, [r7, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <create_xdir+0x6c>
 8009632:	7abb      	ldrb	r3, [r7, #10]
 8009634:	3301      	adds	r3, #1
 8009636:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	4413      	add	r3, r2
 800963e:	893a      	ldrh	r2, [r7, #8]
 8009640:	4611      	mov	r1, r2
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe f922 	bl	800788c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3302      	adds	r3, #2
 800964c:	60fb      	str	r3, [r7, #12]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f003 031f 	and.w	r3, r3, #31
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e0      	bne.n	800961a <create_xdir+0x4e>
		nb++;
 8009658:	7afb      	ldrb	r3, [r7, #11]
 800965a:	3301      	adds	r3, #1
 800965c:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800965e:	7abb      	ldrb	r3, [r7, #10]
 8009660:	005b      	lsls	r3, r3, #1
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	4413      	add	r3, r2
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1c8      	bne.n	80095fe <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3323      	adds	r3, #35	; 0x23
 8009670:	7aba      	ldrb	r2, [r7, #10]
 8009672:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3301      	adds	r3, #1
 8009678:	7afa      	ldrb	r2, [r7, #11]
 800967a:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8009682:	6838      	ldr	r0, [r7, #0]
 8009684:	f7ff fe1a 	bl	80092bc <xname_sum>
 8009688:	4603      	mov	r3, r0
 800968a:	4619      	mov	r1, r3
 800968c:	4620      	mov	r0, r4
 800968e:	f7fe f8fd 	bl	800788c <st_word>
}
 8009692:	bf00      	nop
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	bd90      	pop	{r4, r7, pc}

0800969a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b086      	sub	sp, #24
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80096a4:	2304      	movs	r3, #4
 80096a6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80096ae:	23ff      	movs	r3, #255	; 0xff
 80096b0:	757b      	strb	r3, [r7, #21]
 80096b2:	23ff      	movs	r3, #255	; 0xff
 80096b4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80096b6:	e09f      	b.n	80097f8 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096bc:	4619      	mov	r1, r3
 80096be:	6938      	ldr	r0, [r7, #16]
 80096c0:	f7fe fbe2 	bl	8007e88 <move_window>
 80096c4:	4603      	mov	r3, r0
 80096c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80096c8:	7dfb      	ldrb	r3, [r7, #23]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f040 809a 	bne.w	8009804 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80096d8:	7dbb      	ldrb	r3, [r7, #22]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80096de:	2304      	movs	r3, #4
 80096e0:	75fb      	strb	r3, [r7, #23]
 80096e2:	e096      	b.n	8009812 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d118      	bne.n	800971e <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 80096ec:	7dbb      	ldrb	r3, [r7, #22]
 80096ee:	2b85      	cmp	r3, #133	; 0x85
 80096f0:	d179      	bne.n	80097e6 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff fe12 	bl	8009324 <load_xdir>
 8009700:	4603      	mov	r3, r0
 8009702:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8009704:	7dfb      	ldrb	r3, [r7, #23]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d17e      	bne.n	8009808 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	3304      	adds	r3, #4
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009716:	b2da      	uxtb	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	719a      	strb	r2, [r3, #6]
					}
					break;
 800971c:	e074      	b.n	8009808 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009722:	330b      	adds	r3, #11
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800972a:	73fb      	strb	r3, [r7, #15]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	7bfa      	ldrb	r2, [r7, #15]
 8009730:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009732:	7dbb      	ldrb	r3, [r7, #22]
 8009734:	2be5      	cmp	r3, #229	; 0xe5
 8009736:	d00e      	beq.n	8009756 <dir_read+0xbc>
 8009738:	7dbb      	ldrb	r3, [r7, #22]
 800973a:	2b2e      	cmp	r3, #46	; 0x2e
 800973c:	d00b      	beq.n	8009756 <dir_read+0xbc>
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	f023 0320 	bic.w	r3, r3, #32
 8009744:	2b08      	cmp	r3, #8
 8009746:	bf0c      	ite	eq
 8009748:	2301      	moveq	r3, #1
 800974a:	2300      	movne	r3, #0
 800974c:	b2db      	uxtb	r3, r3
 800974e:	461a      	mov	r2, r3
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	4293      	cmp	r3, r2
 8009754:	d002      	beq.n	800975c <dir_read+0xc2>
				ord = 0xFF;
 8009756:	23ff      	movs	r3, #255	; 0xff
 8009758:	757b      	strb	r3, [r7, #21]
 800975a:	e044      	b.n	80097e6 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	2b0f      	cmp	r3, #15
 8009760:	d12f      	bne.n	80097c2 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8009762:	7dbb      	ldrb	r3, [r7, #22]
 8009764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00d      	beq.n	8009788 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009770:	7b5b      	ldrb	r3, [r3, #13]
 8009772:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8009774:	7dbb      	ldrb	r3, [r7, #22]
 8009776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800977a:	75bb      	strb	r3, [r7, #22]
 800977c:	7dbb      	ldrb	r3, [r7, #22]
 800977e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009788:	7dba      	ldrb	r2, [r7, #22]
 800978a:	7d7b      	ldrb	r3, [r7, #21]
 800978c:	429a      	cmp	r2, r3
 800978e:	d115      	bne.n	80097bc <dir_read+0x122>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009794:	330d      	adds	r3, #13
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	7d3a      	ldrb	r2, [r7, #20]
 800979a:	429a      	cmp	r2, r3
 800979c:	d10e      	bne.n	80097bc <dir_read+0x122>
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a6:	4619      	mov	r1, r3
 80097a8:	4610      	mov	r0, r2
 80097aa:	f7ff fbd7 	bl	8008f5c <pick_lfn>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d003      	beq.n	80097bc <dir_read+0x122>
 80097b4:	7d7b      	ldrb	r3, [r7, #21]
 80097b6:	3b01      	subs	r3, #1
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	e000      	b.n	80097be <dir_read+0x124>
 80097bc:	23ff      	movs	r3, #255	; 0xff
 80097be:	757b      	strb	r3, [r7, #21]
 80097c0:	e011      	b.n	80097e6 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80097c2:	7d7b      	ldrb	r3, [r7, #21]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d109      	bne.n	80097dc <dir_read+0x142>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7ff fd21 	bl	8009214 <sum_sfn>
 80097d2:	4603      	mov	r3, r0
 80097d4:	461a      	mov	r2, r3
 80097d6:	7d3b      	ldrb	r3, [r7, #20]
 80097d8:	4293      	cmp	r3, r2
 80097da:	d017      	beq.n	800980c <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f04f 32ff 	mov.w	r2, #4294967295
 80097e2:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 80097e4:	e012      	b.n	800980c <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80097e6:	2100      	movs	r1, #0
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff f9d7 	bl	8008b9c <dir_next>
 80097ee:	4603      	mov	r3, r0
 80097f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10b      	bne.n	8009810 <dir_read+0x176>
	while (dp->sect) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f47f af5b 	bne.w	80096b8 <dir_read+0x1e>
 8009802:	e006      	b.n	8009812 <dir_read+0x178>
		if (res != FR_OK) break;
 8009804:	bf00      	nop
 8009806:	e004      	b.n	8009812 <dir_read+0x178>
					break;
 8009808:	bf00      	nop
 800980a:	e002      	b.n	8009812 <dir_read+0x178>
					break;
 800980c:	bf00      	nop
 800980e:	e000      	b.n	8009812 <dir_read+0x178>
		if (res != FR_OK) break;
 8009810:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <dir_read+0x184>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009828:	b590      	push	{r4, r7, lr}
 800982a:	b089      	sub	sp, #36	; 0x24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009836:	2100      	movs	r1, #0
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff f929 	bl	8008a90 <dir_sdi>
 800983e:	4603      	mov	r3, r0
 8009840:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8009842:	7ffb      	ldrb	r3, [r7, #31]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <dir_find+0x24>
 8009848:	7ffb      	ldrb	r3, [r7, #31]
 800984a:	e112      	b.n	8009a72 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	2b04      	cmp	r3, #4
 8009852:	d164      	bne.n	800991e <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff fd2f 	bl	80092bc <xname_sum>
 800985e:	4603      	mov	r3, r0
 8009860:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009862:	e04f      	b.n	8009904 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	3324      	adds	r3, #36	; 0x24
 800986a:	4618      	mov	r0, r3
 800986c:	f7fd ff18 	bl	80076a0 <ld_word>
 8009870:	4603      	mov	r3, r0
 8009872:	461a      	mov	r2, r3
 8009874:	893b      	ldrh	r3, [r7, #8]
 8009876:	4293      	cmp	r3, r2
 8009878:	d000      	beq.n	800987c <dir_find+0x54>
 800987a:	e043      	b.n	8009904 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009884:	76fb      	strb	r3, [r7, #27]
 8009886:	2340      	movs	r3, #64	; 0x40
 8009888:	617b      	str	r3, [r7, #20]
 800988a:	2300      	movs	r3, #0
 800988c:	613b      	str	r3, [r7, #16]
 800988e:	e029      	b.n	80098e4 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f003 031f 	and.w	r3, r3, #31
 8009896:	2b00      	cmp	r3, #0
 8009898:	d102      	bne.n	80098a0 <dir_find+0x78>
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	3302      	adds	r3, #2
 800989e:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	691a      	ldr	r2, [r3, #16]
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	4413      	add	r3, r2
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fd fef9 	bl	80076a0 <ld_word>
 80098ae:	4603      	mov	r3, r0
 80098b0:	4618      	mov	r0, r3
 80098b2:	f002 fb3f 	bl	800bf34 <ff_wtoupper>
 80098b6:	4603      	mov	r3, r0
 80098b8:	461c      	mov	r4, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	68da      	ldr	r2, [r3, #12]
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	4413      	add	r3, r2
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f002 fb34 	bl	800bf34 <ff_wtoupper>
 80098cc:	4603      	mov	r3, r0
 80098ce:	429c      	cmp	r4, r3
 80098d0:	d10c      	bne.n	80098ec <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80098d2:	7efb      	ldrb	r3, [r7, #27]
 80098d4:	3b01      	subs	r3, #1
 80098d6:	76fb      	strb	r3, [r7, #27]
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	3302      	adds	r3, #2
 80098dc:	617b      	str	r3, [r7, #20]
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	3301      	adds	r3, #1
 80098e2:	613b      	str	r3, [r7, #16]
 80098e4:	7efb      	ldrb	r3, [r7, #27]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1d2      	bne.n	8009890 <dir_find+0x68>
 80098ea:	e000      	b.n	80098ee <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80098ec:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80098ee:	7efb      	ldrb	r3, [r7, #27]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d107      	bne.n	8009904 <dir_find+0xdc>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	68da      	ldr	r2, [r3, #12]
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	005b      	lsls	r3, r3, #1
 80098fc:	4413      	add	r3, r2
 80098fe:	881b      	ldrh	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d009      	beq.n	8009918 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009904:	2100      	movs	r1, #0
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7ff fec7 	bl	800969a <dir_read>
 800990c:	4603      	mov	r3, r0
 800990e:	77fb      	strb	r3, [r7, #31]
 8009910:	7ffb      	ldrb	r3, [r7, #31]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0a6      	beq.n	8009864 <dir_find+0x3c>
 8009916:	e000      	b.n	800991a <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8009918:	bf00      	nop
		}
		return res;
 800991a:	7ffb      	ldrb	r3, [r7, #31]
 800991c:	e0a9      	b.n	8009a72 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800991e:	23ff      	movs	r3, #255	; 0xff
 8009920:	773b      	strb	r3, [r7, #28]
 8009922:	7f3b      	ldrb	r3, [r7, #28]
 8009924:	777b      	strb	r3, [r7, #29]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f04f 32ff 	mov.w	r2, #4294967295
 800992c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009932:	4619      	mov	r1, r3
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f7fe faa7 	bl	8007e88 <move_window>
 800993a:	4603      	mov	r3, r0
 800993c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800993e:	7ffb      	ldrb	r3, [r7, #31]
 8009940:	2b00      	cmp	r3, #0
 8009942:	f040 8090 	bne.w	8009a66 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800994e:	7fbb      	ldrb	r3, [r7, #30]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <dir_find+0x132>
 8009954:	2304      	movs	r3, #4
 8009956:	77fb      	strb	r3, [r7, #31]
 8009958:	e08a      	b.n	8009a70 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800995e:	330b      	adds	r3, #11
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009966:	72fb      	strb	r3, [r7, #11]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	7afa      	ldrb	r2, [r7, #11]
 800996c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800996e:	7fbb      	ldrb	r3, [r7, #30]
 8009970:	2be5      	cmp	r3, #229	; 0xe5
 8009972:	d007      	beq.n	8009984 <dir_find+0x15c>
 8009974:	7afb      	ldrb	r3, [r7, #11]
 8009976:	f003 0308 	and.w	r3, r3, #8
 800997a:	2b00      	cmp	r3, #0
 800997c:	d009      	beq.n	8009992 <dir_find+0x16a>
 800997e:	7afb      	ldrb	r3, [r7, #11]
 8009980:	2b0f      	cmp	r3, #15
 8009982:	d006      	beq.n	8009992 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009984:	23ff      	movs	r3, #255	; 0xff
 8009986:	777b      	strb	r3, [r7, #29]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f04f 32ff 	mov.w	r2, #4294967295
 800998e:	64da      	str	r2, [r3, #76]	; 0x4c
 8009990:	e05e      	b.n	8009a50 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009992:	7afb      	ldrb	r3, [r7, #11]
 8009994:	2b0f      	cmp	r3, #15
 8009996:	d136      	bne.n	8009a06 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800999e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d154      	bne.n	8009a50 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80099a6:	7fbb      	ldrb	r3, [r7, #30]
 80099a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00d      	beq.n	80099cc <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b4:	7b5b      	ldrb	r3, [r3, #13]
 80099b6:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80099b8:	7fbb      	ldrb	r3, [r7, #30]
 80099ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099be:	77bb      	strb	r3, [r7, #30]
 80099c0:	7fbb      	ldrb	r3, [r7, #30]
 80099c2:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80099cc:	7fba      	ldrb	r2, [r7, #30]
 80099ce:	7f7b      	ldrb	r3, [r7, #29]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d115      	bne.n	8009a00 <dir_find+0x1d8>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d8:	330d      	adds	r3, #13
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	7f3a      	ldrb	r2, [r7, #28]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d10e      	bne.n	8009a00 <dir_find+0x1d8>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	68da      	ldr	r2, [r3, #12]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ea:	4619      	mov	r1, r3
 80099ec:	4610      	mov	r0, r2
 80099ee:	f7ff fa45 	bl	8008e7c <cmp_lfn>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <dir_find+0x1d8>
 80099f8:	7f7b      	ldrb	r3, [r7, #29]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	e000      	b.n	8009a02 <dir_find+0x1da>
 8009a00:	23ff      	movs	r3, #255	; 0xff
 8009a02:	777b      	strb	r3, [r7, #29]
 8009a04:	e024      	b.n	8009a50 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009a06:	7f7b      	ldrb	r3, [r7, #29]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d109      	bne.n	8009a20 <dir_find+0x1f8>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7ff fbff 	bl	8009214 <sum_sfn>
 8009a16:	4603      	mov	r3, r0
 8009a18:	461a      	mov	r2, r3
 8009a1a:	7f3b      	ldrb	r3, [r7, #28]
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d024      	beq.n	8009a6a <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10a      	bne.n	8009a44 <dir_find+0x21c>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	3340      	adds	r3, #64	; 0x40
 8009a36:	220b      	movs	r2, #11
 8009a38:	4619      	mov	r1, r3
 8009a3a:	f7fe f832 	bl	8007aa2 <mem_cmp>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d014      	beq.n	8009a6e <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009a44:	23ff      	movs	r3, #255	; 0xff
 8009a46:	777b      	strb	r3, [r7, #29]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4e:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009a50:	2100      	movs	r1, #0
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff f8a2 	bl	8008b9c <dir_next>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8009a5c:	7ffb      	ldrb	r3, [r7, #31]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f43f af65 	beq.w	800992e <dir_find+0x106>
 8009a64:	e004      	b.n	8009a70 <dir_find+0x248>
		if (res != FR_OK) break;
 8009a66:	bf00      	nop
 8009a68:	e002      	b.n	8009a70 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009a6a:	bf00      	nop
 8009a6c:	e000      	b.n	8009a70 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009a6e:	bf00      	nop

	return res;
 8009a70:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3724      	adds	r7, #36	; 0x24
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd90      	pop	{r4, r7, pc}
	...

08009a7c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009a7c:	b5b0      	push	{r4, r5, r7, lr}
 8009a7e:	b0a0      	sub	sp, #128	; 0x80
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8009a90:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <dir_register+0x20>
 8009a98:	2306      	movs	r3, #6
 8009a9a:	e188      	b.n	8009dae <dir_register+0x332>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	677b      	str	r3, [r7, #116]	; 0x74
 8009aa0:	e002      	b.n	8009aa8 <dir_register+0x2c>
 8009aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	677b      	str	r3, [r7, #116]	; 0x74
 8009aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aaa:	68da      	ldr	r2, [r3, #12]
 8009aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	4413      	add	r3, r2
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1f4      	bne.n	8009aa2 <dir_register+0x26>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	2b04      	cmp	r3, #4
 8009abe:	f040 809e 	bne.w	8009bfe <dir_register+0x182>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8009ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ac4:	330e      	adds	r3, #14
 8009ac6:	4abc      	ldr	r2, [pc, #752]	; (8009db8 <dir_register+0x33c>)
 8009ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8009acc:	08db      	lsrs	r3, r3, #3
 8009ace:	3302      	adds	r3, #2
 8009ad0:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8009ad2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff f936 	bl	8008d46 <dir_alloc>
 8009ada:	4603      	mov	r3, r0
 8009adc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8009ae0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d002      	beq.n	8009aee <dir_register+0x72>
 8009ae8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009aec:	e15f      	b.n	8009dae <dir_register+0x332>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009af4:	3b01      	subs	r3, #1
 8009af6:	015b      	lsls	r3, r3, #5
 8009af8:	1ad2      	subs	r2, r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d071      	beq.n	8009bea <dir_register+0x16e>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	79db      	ldrb	r3, [r3, #7]
 8009b0a:	f003 0304 	and.w	r3, r3, #4
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d06b      	beq.n	8009bea <dir_register+0x16e>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b1a:	895b      	ldrh	r3, [r3, #10]
 8009b1c:	025b      	lsls	r3, r3, #9
 8009b1e:	461a      	mov	r2, r3
 8009b20:	f04f 0300 	mov.w	r3, #0
 8009b24:	1884      	adds	r4, r0, r2
 8009b26:	eb41 0503 	adc.w	r5, r1, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	e9c3 4504 	strd	r4, r5, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fd56 	bl	80085e4 <fill_first_frag>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8009b3e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <dir_register+0xd0>
 8009b46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009b4a:	e130      	b.n	8009dae <dir_register+0x332>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b52:	f04f 32ff 	mov.w	r2, #4294967295
 8009b56:	4619      	mov	r1, r3
 8009b58:	f7fe fd73 	bl	8008642 <fill_last_frag>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8009b62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d002      	beq.n	8009b70 <dir_register+0xf4>
 8009b6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009b6e:	e11e      	b.n	8009dae <dir_register+0x332>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	f107 0308 	add.w	r3, r7, #8
 8009b76:	4611      	mov	r1, r2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7ff fc91 	bl	80094a0 <load_obj_dir>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8009b84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <dir_register+0x116>
 8009b8c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009b90:	e10d      	b.n	8009dae <dir_register+0x332>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8009b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009ba0:	4608      	mov	r0, r1
 8009ba2:	f7fd feba 	bl	800791a <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8009ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009bb4:	4608      	mov	r0, r1
 8009bb6:	f7fd feb0 	bl	800791a <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	79da      	ldrb	r2, [r3, #7]
 8009bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	3321      	adds	r3, #33	; 0x21
 8009bc4:	f042 0201 	orr.w	r2, r2, #1
 8009bc8:	b2d2      	uxtb	r2, r2
 8009bca:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8009bcc:	f107 0308 	add.w	r3, r7, #8
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff fca0 	bl	8009516 <store_xdir>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8009bdc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d002      	beq.n	8009bea <dir_register+0x16e>
 8009be4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009be8:	e0e1      	b.n	8009dae <dir_register+0x332>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8009bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bec:	691a      	ldr	r2, [r3, #16]
 8009bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	f7ff fce9 	bl	80095cc <create_xdir>
		return FR_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e0d7      	b.n	8009dae <dir_register+0x332>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8009c04:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009c08:	220c      	movs	r2, #12
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fd ff0d 	bl	8007a2a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009c10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d033      	beq.n	8009c84 <dir_register+0x208>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2240      	movs	r2, #64	; 0x40
 8009c20:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8009c24:	2301      	movs	r3, #1
 8009c26:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c28:	e016      	b.n	8009c58 <dir_register+0x1dc>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8009c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c32:	68da      	ldr	r2, [r3, #12]
 8009c34:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8009c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c3a:	f7ff fa5b 	bl	80090f4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7ff fdf2 	bl	8009828 <dir_find>
 8009c44:	4603      	mov	r3, r0
 8009c46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8009c4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d106      	bne.n	8009c60 <dir_register+0x1e4>
		for (n = 1; n < 100; n++) {
 8009c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c54:	3301      	adds	r3, #1
 8009c56:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c5a:	2b63      	cmp	r3, #99	; 0x63
 8009c5c:	d9e5      	bls.n	8009c2a <dir_register+0x1ae>
 8009c5e:	e000      	b.n	8009c62 <dir_register+0x1e6>
			if (res != FR_OK) break;
 8009c60:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c64:	2b64      	cmp	r3, #100	; 0x64
 8009c66:	d101      	bne.n	8009c6c <dir_register+0x1f0>
 8009c68:	2307      	movs	r3, #7
 8009c6a:	e0a0      	b.n	8009dae <dir_register+0x332>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009c6c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	d002      	beq.n	8009c7a <dir_register+0x1fe>
 8009c74:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009c78:	e099      	b.n	8009dae <dir_register+0x332>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009c7a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009c84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c88:	f003 0302 	and.w	r3, r3, #2
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d007      	beq.n	8009ca0 <dir_register+0x224>
 8009c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c92:	330c      	adds	r3, #12
 8009c94:	4a49      	ldr	r2, [pc, #292]	; (8009dbc <dir_register+0x340>)
 8009c96:	fba2 2303 	umull	r2, r3, r2, r3
 8009c9a:	089b      	lsrs	r3, r3, #2
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	e000      	b.n	8009ca2 <dir_register+0x226>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009ca4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7ff f84d 	bl	8008d46 <dir_alloc>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009cb2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d14a      	bne.n	8009d50 <dir_register+0x2d4>
 8009cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	673b      	str	r3, [r7, #112]	; 0x70
 8009cc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d044      	beq.n	8009d50 <dir_register+0x2d4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ccc:	015b      	lsls	r3, r3, #5
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7fe fedc 	bl	8008a90 <dir_sdi>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8009cde:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d134      	bne.n	8009d50 <dir_register+0x2d4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	3340      	adds	r3, #64	; 0x40
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7ff fa92 	bl	8009214 <sum_sfn>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009cfe:	f7fe f8c3 	bl	8007e88 <move_window>
 8009d02:	4603      	mov	r3, r0
 8009d04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8009d08:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d11e      	bne.n	8009d4e <dir_register+0x2d2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d12:	68d8      	ldr	r0, [r3, #12]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d1a:	b2da      	uxtb	r2, r3
 8009d1c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8009d20:	f7ff f980 	bl	8009024 <put_lfn>
				fs->wflag = 1;
 8009d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d26:	2201      	movs	r2, #1
 8009d28:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7fe ff35 	bl	8008b9c <dir_next>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8009d38:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d107      	bne.n	8009d50 <dir_register+0x2d4>
 8009d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d42:	3b01      	subs	r3, #1
 8009d44:	673b      	str	r3, [r7, #112]	; 0x70
 8009d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1d4      	bne.n	8009cf6 <dir_register+0x27a>
 8009d4c:	e000      	b.n	8009d50 <dir_register+0x2d4>
				if (res != FR_OK) break;
 8009d4e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009d50:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d128      	bne.n	8009daa <dir_register+0x32e>
		res = move_window(fs, dp->sect);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009d60:	f7fe f892 	bl	8007e88 <move_window>
 8009d64:	4603      	mov	r3, r0
 8009d66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8009d6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d11b      	bne.n	8009daa <dir_register+0x32e>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d76:	2220      	movs	r2, #32
 8009d78:	2100      	movs	r1, #0
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fd fe76 	bl	8007a6c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	3340      	adds	r3, #64	; 0x40
 8009d88:	220b      	movs	r2, #11
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	f7fd fe4d 	bl	8007a2a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9a:	330c      	adds	r3, #12
 8009d9c:	f002 0218 	and.w	r2, r2, #24
 8009da0:	b2d2      	uxtb	r2, r2
 8009da2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009da6:	2201      	movs	r2, #1
 8009da8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009daa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3780      	adds	r7, #128	; 0x80
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bdb0      	pop	{r4, r5, r7, pc}
 8009db6:	bf00      	nop
 8009db8:	88888889 	.word	0x88888889
 8009dbc:	4ec4ec4f 	.word	0x4ec4ec4f

08009dc0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08a      	sub	sp, #40	; 0x28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	613b      	str	r3, [r7, #16]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	2300      	movs	r3, #0
 8009dda:	617b      	str	r3, [r7, #20]
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	61ba      	str	r2, [r7, #24]
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	4413      	add	r3, r2
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009dee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009df0:	2b1f      	cmp	r3, #31
 8009df2:	d940      	bls.n	8009e76 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009df4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009df6:	2b2f      	cmp	r3, #47	; 0x2f
 8009df8:	d006      	beq.n	8009e08 <create_name+0x48>
 8009dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dfc:	2b5c      	cmp	r3, #92	; 0x5c
 8009dfe:	d110      	bne.n	8009e22 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009e00:	e002      	b.n	8009e08 <create_name+0x48>
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	3301      	adds	r3, #1
 8009e06:	61bb      	str	r3, [r7, #24]
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	2b2f      	cmp	r3, #47	; 0x2f
 8009e12:	d0f6      	beq.n	8009e02 <create_name+0x42>
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	4413      	add	r3, r2
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	2b5c      	cmp	r3, #92	; 0x5c
 8009e1e:	d0f0      	beq.n	8009e02 <create_name+0x42>
			break;
 8009e20:	e02a      	b.n	8009e78 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2bfe      	cmp	r3, #254	; 0xfe
 8009e26:	d901      	bls.n	8009e2c <create_name+0x6c>
 8009e28:	2306      	movs	r3, #6
 8009e2a:	e177      	b.n	800a11c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e34:	2101      	movs	r1, #1
 8009e36:	4618      	mov	r0, r3
 8009e38:	f002 f840 	bl	800bebc <ff_convert>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <create_name+0x8a>
 8009e46:	2306      	movs	r3, #6
 8009e48:	e168      	b.n	800a11c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8009e4e:	d809      	bhi.n	8009e64 <create_name+0xa4>
 8009e50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e52:	4619      	mov	r1, r3
 8009e54:	48b3      	ldr	r0, [pc, #716]	; (800a124 <create_name+0x364>)
 8009e56:	f7fd fe4b 	bl	8007af0 <chk_chr>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <create_name+0xa4>
 8009e60:	2306      	movs	r3, #6
 8009e62:	e15b      	b.n	800a11c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	617a      	str	r2, [r7, #20]
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e72:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009e74:	e7b4      	b.n	8009de0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009e76:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	441a      	add	r2, r3
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e84:	2b1f      	cmp	r3, #31
 8009e86:	d801      	bhi.n	8009e8c <create_name+0xcc>
 8009e88:	2304      	movs	r3, #4
 8009e8a:	e000      	b.n	8009e8e <create_name+0xce>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009e92:	e011      	b.n	8009eb8 <create_name+0xf8>
		w = lfn[di - 1];
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	005b      	lsls	r3, r3, #1
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ea8:	2b20      	cmp	r3, #32
 8009eaa:	d002      	beq.n	8009eb2 <create_name+0xf2>
 8009eac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eae:	2b2e      	cmp	r3, #46	; 0x2e
 8009eb0:	d106      	bne.n	8009ec0 <create_name+0x100>
		di--;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1ea      	bne.n	8009e94 <create_name+0xd4>
 8009ebe:	e000      	b.n	8009ec2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009ec0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	005b      	lsls	r3, r3, #1
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	4413      	add	r3, r2
 8009eca:	2200      	movs	r2, #0
 8009ecc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d101      	bne.n	8009ed8 <create_name+0x118>
 8009ed4:	2306      	movs	r3, #6
 8009ed6:	e121      	b.n	800a11c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	3340      	adds	r3, #64	; 0x40
 8009edc:	220b      	movs	r2, #11
 8009ede:	2120      	movs	r1, #32
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fd fdc3 	bl	8007a6c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	61bb      	str	r3, [r7, #24]
 8009eea:	e002      	b.n	8009ef2 <create_name+0x132>
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	4413      	add	r3, r2
 8009efa:	881b      	ldrh	r3, [r3, #0]
 8009efc:	2b20      	cmp	r3, #32
 8009efe:	d0f5      	beq.n	8009eec <create_name+0x12c>
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	005b      	lsls	r3, r3, #1
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	4413      	add	r3, r2
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f0c:	d0ee      	beq.n	8009eec <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d009      	beq.n	8009f28 <create_name+0x168>
 8009f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f18:	f043 0303 	orr.w	r3, r3, #3
 8009f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009f20:	e002      	b.n	8009f28 <create_name+0x168>
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d009      	beq.n	8009f42 <create_name+0x182>
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009f34:	3b01      	subs	r3, #1
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8009f40:	d1ef      	bne.n	8009f22 <create_name+0x162>

	i = b = 0; ni = 8;
 8009f42:	2300      	movs	r3, #0
 8009f44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f48:	2300      	movs	r3, #0
 8009f4a:	623b      	str	r3, [r7, #32]
 8009f4c:	2308      	movs	r3, #8
 8009f4e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	1c5a      	adds	r2, r3, #1
 8009f54:	61ba      	str	r2, [r7, #24]
 8009f56:	005b      	lsls	r3, r3, #1
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	881b      	ldrh	r3, [r3, #0]
 8009f5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f000 8090 	beq.w	800a088 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f6a:	2b20      	cmp	r3, #32
 8009f6c:	d006      	beq.n	8009f7c <create_name+0x1bc>
 8009f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f70:	2b2e      	cmp	r3, #46	; 0x2e
 8009f72:	d10a      	bne.n	8009f8a <create_name+0x1ca>
 8009f74:	69ba      	ldr	r2, [r7, #24]
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d006      	beq.n	8009f8a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f80:	f043 0303 	orr.w	r3, r3, #3
 8009f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f88:	e07d      	b.n	800a086 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009f8a:	6a3a      	ldr	r2, [r7, #32]
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d203      	bcs.n	8009f9a <create_name+0x1da>
 8009f92:	69ba      	ldr	r2, [r7, #24]
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d123      	bne.n	8009fe2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	2b0b      	cmp	r3, #11
 8009f9e:	d106      	bne.n	8009fae <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fa4:	f043 0303 	orr.w	r3, r3, #3
 8009fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009fac:	e06f      	b.n	800a08e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009fae:	69ba      	ldr	r2, [r7, #24]
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d005      	beq.n	8009fc2 <create_name+0x202>
 8009fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fba:	f043 0303 	orr.w	r3, r3, #3
 8009fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009fc2:	69ba      	ldr	r2, [r7, #24]
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d860      	bhi.n	800a08c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	61bb      	str	r3, [r7, #24]
 8009fce:	2308      	movs	r3, #8
 8009fd0:	623b      	str	r3, [r7, #32]
 8009fd2:	230b      	movs	r3, #11
 8009fd4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009fd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009fe0:	e051      	b.n	800a086 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8009fe6:	d914      	bls.n	800a012 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009fe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fea:	2100      	movs	r1, #0
 8009fec:	4618      	mov	r0, r3
 8009fee:	f001 ff65 	bl	800bebc <ff_convert>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <create_name+0x246>
 8009ffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ffe:	3b80      	subs	r3, #128	; 0x80
 800a000:	4a49      	ldr	r2, [pc, #292]	; (800a128 <create_name+0x368>)
 800a002:	5cd3      	ldrb	r3, [r2, r3]
 800a004:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a00a:	f043 0302 	orr.w	r3, r3, #2
 800a00e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a012:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a014:	2b00      	cmp	r3, #0
 800a016:	d007      	beq.n	800a028 <create_name+0x268>
 800a018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a01a:	4619      	mov	r1, r3
 800a01c:	4843      	ldr	r0, [pc, #268]	; (800a12c <create_name+0x36c>)
 800a01e:	f7fd fd67 	bl	8007af0 <chk_chr>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d008      	beq.n	800a03a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a028:	235f      	movs	r3, #95	; 0x5f
 800a02a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a02c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a030:	f043 0303 	orr.w	r3, r3, #3
 800a034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a038:	e01b      	b.n	800a072 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a03a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a03c:	2b40      	cmp	r3, #64	; 0x40
 800a03e:	d909      	bls.n	800a054 <create_name+0x294>
 800a040:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a042:	2b5a      	cmp	r3, #90	; 0x5a
 800a044:	d806      	bhi.n	800a054 <create_name+0x294>
					b |= 2;
 800a046:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a04a:	f043 0302 	orr.w	r3, r3, #2
 800a04e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a052:	e00e      	b.n	800a072 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a056:	2b60      	cmp	r3, #96	; 0x60
 800a058:	d90b      	bls.n	800a072 <create_name+0x2b2>
 800a05a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a05c:	2b7a      	cmp	r3, #122	; 0x7a
 800a05e:	d808      	bhi.n	800a072 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a060:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a064:	f043 0301 	orr.w	r3, r3, #1
 800a068:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a06c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a06e:	3b20      	subs	r3, #32
 800a070:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	1c5a      	adds	r2, r3, #1
 800a076:	623a      	str	r2, [r7, #32]
 800a078:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a07a:	b2d1      	uxtb	r1, r2
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	4413      	add	r3, r2
 800a080:	460a      	mov	r2, r1
 800a082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800a086:	e763      	b.n	8009f50 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a088:	bf00      	nop
 800a08a:	e000      	b.n	800a08e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800a08c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a094:	2be5      	cmp	r3, #229	; 0xe5
 800a096:	d103      	bne.n	800a0a0 <create_name+0x2e0>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2205      	movs	r2, #5
 800a09c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	2b08      	cmp	r3, #8
 800a0a4:	d104      	bne.n	800a0b0 <create_name+0x2f0>
 800a0a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a0b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0b4:	f003 030c 	and.w	r3, r3, #12
 800a0b8:	2b0c      	cmp	r3, #12
 800a0ba:	d005      	beq.n	800a0c8 <create_name+0x308>
 800a0bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0c0:	f003 0303 	and.w	r3, r3, #3
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d105      	bne.n	800a0d4 <create_name+0x314>
 800a0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0cc:	f043 0302 	orr.w	r3, r3, #2
 800a0d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a0d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0d8:	f003 0302 	and.w	r3, r3, #2
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d117      	bne.n	800a110 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a0e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0e4:	f003 0303 	and.w	r3, r3, #3
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d105      	bne.n	800a0f8 <create_name+0x338>
 800a0ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0f0:	f043 0310 	orr.w	r3, r3, #16
 800a0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a0f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0fc:	f003 030c 	and.w	r3, r3, #12
 800a100:	2b04      	cmp	r3, #4
 800a102:	d105      	bne.n	800a110 <create_name+0x350>
 800a104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a108:	f043 0308 	orr.w	r3, r3, #8
 800a10c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a116:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800a11a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3728      	adds	r7, #40	; 0x28
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	0800ec34 	.word	0x0800ec34
 800a128:	0800ecbc 	.word	0x0800ecbc
 800a12c:	0800ec40 	.word	0x0800ec40

0800a130 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a144:	e002      	b.n	800a14c <follow_path+0x1c>
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	3301      	adds	r3, #1
 800a14a:	603b      	str	r3, [r7, #0]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2b2f      	cmp	r3, #47	; 0x2f
 800a152:	d0f8      	beq.n	800a146 <follow_path+0x16>
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	2b5c      	cmp	r3, #92	; 0x5c
 800a15a:	d0f4      	beq.n	800a146 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	2200      	movs	r2, #0
 800a160:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	2200      	movs	r2, #0
 800a166:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	2b1f      	cmp	r3, #31
 800a16e:	d80a      	bhi.n	800a186 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2280      	movs	r2, #128	; 0x80
 800a174:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800a178:	2100      	movs	r1, #0
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7fe fc88 	bl	8008a90 <dir_sdi>
 800a180:	4603      	mov	r3, r0
 800a182:	75fb      	strb	r3, [r7, #23]
 800a184:	e078      	b.n	800a278 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a186:	463b      	mov	r3, r7
 800a188:	4619      	mov	r1, r3
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7ff fe18 	bl	8009dc0 <create_name>
 800a190:	4603      	mov	r3, r0
 800a192:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a194:	7dfb      	ldrb	r3, [r7, #23]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d169      	bne.n	800a26e <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7ff fb44 	bl	8009828 <dir_find>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a1aa:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a1ac:	7dfb      	ldrb	r3, [r7, #23]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00a      	beq.n	800a1c8 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d15c      	bne.n	800a272 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a1b8:	7afb      	ldrb	r3, [r7, #11]
 800a1ba:	f003 0304 	and.w	r3, r3, #4
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d157      	bne.n	800a272 <follow_path+0x142>
 800a1c2:	2305      	movs	r3, #5
 800a1c4:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a1c6:	e054      	b.n	800a272 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a1c8:	7afb      	ldrb	r3, [r7, #11]
 800a1ca:	f003 0304 	and.w	r3, r3, #4
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d151      	bne.n	800a276 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	799b      	ldrb	r3, [r3, #6]
 800a1d6:	f003 0310 	and.w	r3, r3, #16
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d102      	bne.n	800a1e4 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800a1de:	2305      	movs	r3, #5
 800a1e0:	75fb      	strb	r3, [r7, #23]
 800a1e2:	e049      	b.n	800a278 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	2b04      	cmp	r3, #4
 800a1ea:	d130      	bne.n	800a24e <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	689a      	ldr	r2, [r3, #8]
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	79d2      	ldrb	r2, [r2, #7]
 800a204:	431a      	orrs	r2, r3
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	3334      	adds	r3, #52	; 0x34
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fd fa59 	bl	80076d0 <ld_dword>
 800a21e:	4602      	mov	r2, r0
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	3321      	adds	r3, #33	; 0x21
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	f003 0302 	and.w	r3, r3, #2
 800a230:	b2da      	uxtb	r2, r3
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	3338      	adds	r3, #56	; 0x38
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fd fa6a 	bl	8007716 <ld_qword>
 800a242:	4602      	mov	r2, r0
 800a244:	460b      	mov	r3, r1
 800a246:	6939      	ldr	r1, [r7, #16]
 800a248:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800a24c:	e79b      	b.n	800a186 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25c:	4413      	add	r3, r2
 800a25e:	4619      	mov	r1, r3
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f7fe fdcc 	bl	8008dfe <ld_clust>
 800a266:	4602      	mov	r2, r0
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a26c:	e78b      	b.n	800a186 <follow_path+0x56>
			if (res != FR_OK) break;
 800a26e:	bf00      	nop
 800a270:	e002      	b.n	800a278 <follow_path+0x148>
				break;
 800a272:	bf00      	nop
 800a274:	e000      	b.n	800a278 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a276:	bf00      	nop
			}
		}
	}

	return res;
 800a278:	7dfb      	ldrb	r3, [r7, #23]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a282:	b480      	push	{r7}
 800a284:	b087      	sub	sp, #28
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a28a:	f04f 33ff 	mov.w	r3, #4294967295
 800a28e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d031      	beq.n	800a2fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	617b      	str	r3, [r7, #20]
 800a29e:	e002      	b.n	800a2a6 <get_ldnumber+0x24>
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	617b      	str	r3, [r7, #20]
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	2b1f      	cmp	r3, #31
 800a2ac:	d903      	bls.n	800a2b6 <get_ldnumber+0x34>
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2b3a      	cmp	r3, #58	; 0x3a
 800a2b4:	d1f4      	bne.n	800a2a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	2b3a      	cmp	r3, #58	; 0x3a
 800a2bc:	d11c      	bne.n	800a2f8 <get_ldnumber+0x76>
			tp = *path;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	1c5a      	adds	r2, r3, #1
 800a2c8:	60fa      	str	r2, [r7, #12]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	3b30      	subs	r3, #48	; 0x30
 800a2ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2b09      	cmp	r3, #9
 800a2d4:	d80e      	bhi.n	800a2f4 <get_ldnumber+0x72>
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d10a      	bne.n	800a2f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d107      	bne.n	800a2f4 <get_ldnumber+0x72>
					vol = (int)i;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	617b      	str	r3, [r7, #20]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	e002      	b.n	800a2fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a2fc:	693b      	ldr	r3, [r7, #16]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	371c      	adds	r7, #28
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
	...

0800a30c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	70da      	strb	r2, [r3, #3]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f04f 32ff 	mov.w	r2, #4294967295
 800a322:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7fd fdae 	bl	8007e88 <move_window>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <check_fs+0x2a>
 800a332:	2304      	movs	r3, #4
 800a334:	e044      	b.n	800a3c0 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3338      	adds	r3, #56	; 0x38
 800a33a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fd f9ae 	bl	80076a0 <ld_word>
 800a344:	4603      	mov	r3, r0
 800a346:	461a      	mov	r2, r3
 800a348:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d001      	beq.n	800a354 <check_fs+0x48>
 800a350:	2303      	movs	r3, #3
 800a352:	e035      	b.n	800a3c0 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a35a:	2be9      	cmp	r3, #233	; 0xe9
 800a35c:	d009      	beq.n	800a372 <check_fs+0x66>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a364:	2beb      	cmp	r3, #235	; 0xeb
 800a366:	d11e      	bne.n	800a3a6 <check_fs+0x9a>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a36e:	2b90      	cmp	r3, #144	; 0x90
 800a370:	d119      	bne.n	800a3a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	3338      	adds	r3, #56	; 0x38
 800a376:	3336      	adds	r3, #54	; 0x36
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fd f9a9 	bl	80076d0 <ld_dword>
 800a37e:	4603      	mov	r3, r0
 800a380:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a384:	4a10      	ldr	r2, [pc, #64]	; (800a3c8 <check_fs+0xbc>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d101      	bne.n	800a38e <check_fs+0x82>
 800a38a:	2300      	movs	r3, #0
 800a38c:	e018      	b.n	800a3c0 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	3338      	adds	r3, #56	; 0x38
 800a392:	3352      	adds	r3, #82	; 0x52
 800a394:	4618      	mov	r0, r3
 800a396:	f7fd f99b 	bl	80076d0 <ld_dword>
 800a39a:	4603      	mov	r3, r0
 800a39c:	4a0b      	ldr	r2, [pc, #44]	; (800a3cc <check_fs+0xc0>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d101      	bne.n	800a3a6 <check_fs+0x9a>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	e00c      	b.n	800a3c0 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	3338      	adds	r3, #56	; 0x38
 800a3aa:	220b      	movs	r2, #11
 800a3ac:	4908      	ldr	r1, [pc, #32]	; (800a3d0 <check_fs+0xc4>)
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fd fb77 	bl	8007aa2 <mem_cmp>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <check_fs+0xb2>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e000      	b.n	800a3c0 <check_fs+0xb4>
#endif
	return 2;
 800a3be:	2302      	movs	r3, #2
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	00544146 	.word	0x00544146
 800a3cc:	33544146 	.word	0x33544146
 800a3d0:	0800ec48 	.word	0x0800ec48

0800a3d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a3d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a3d8:	b098      	sub	sp, #96	; 0x60
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	60f8      	str	r0, [r7, #12]
 800a3de:	60b9      	str	r1, [r7, #8]
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f7ff ff49 	bl	800a282 <get_ldnumber>
 800a3f0:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800a3f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	da01      	bge.n	800a3fc <find_volume+0x28>
 800a3f8:	230b      	movs	r3, #11
 800a3fa:	e32b      	b.n	800aa54 <find_volume+0x680>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a3fc:	4ab0      	ldr	r2, [pc, #704]	; (800a6c0 <find_volume+0x2ec>)
 800a3fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a404:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d101      	bne.n	800a410 <find_volume+0x3c>
 800a40c:	230c      	movs	r3, #12
 800a40e:	e321      	b.n	800aa54 <find_volume+0x680>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a414:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a416:	79fb      	ldrb	r3, [r7, #7]
 800a418:	f023 0301 	bic.w	r3, r3, #1
 800a41c:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a41e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d01a      	beq.n	800a45c <find_volume+0x88>
		stat = disk_status(fs->drv);
 800a426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a428:	785b      	ldrb	r3, [r3, #1]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fd f89a 	bl	8007564 <disk_status>
 800a430:	4603      	mov	r3, r0
 800a432:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a436:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d10c      	bne.n	800a45c <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a442:	79fb      	ldrb	r3, [r7, #7]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d007      	beq.n	800a458 <find_volume+0x84>
 800a448:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a44c:	f003 0304 	and.w	r3, r3, #4
 800a450:	2b00      	cmp	r3, #0
 800a452:	d001      	beq.n	800a458 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800a454:	230a      	movs	r3, #10
 800a456:	e2fd      	b.n	800aa54 <find_volume+0x680>
			}
			return FR_OK;				/* The file system object is valid */
 800a458:	2300      	movs	r3, #0
 800a45a:	e2fb      	b.n	800aa54 <find_volume+0x680>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a45c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a45e:	2200      	movs	r2, #0
 800a460:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a464:	b2da      	uxtb	r2, r3
 800a466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a468:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46c:	785b      	ldrb	r3, [r3, #1]
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fd f892 	bl	8007598 <disk_initialize>
 800a474:	4603      	mov	r3, r0
 800a476:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a47a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a486:	2303      	movs	r3, #3
 800a488:	e2e4      	b.n	800aa54 <find_volume+0x680>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d007      	beq.n	800a4a0 <find_volume+0xcc>
 800a490:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a494:	f003 0304 	and.w	r3, r3, #4
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800a49c:	230a      	movs	r3, #10
 800a49e:	e2d9      	b.n	800aa54 <find_volume+0x680>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a4a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a4a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a4a8:	f7ff ff30 	bl	800a30c <check_fs>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a4b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d14b      	bne.n	800a552 <find_volume+0x17e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4be:	e01f      	b.n	800a500 <find_volume+0x12c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a4c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4c8:	011b      	lsls	r3, r3, #4
 800a4ca:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a4ce:	4413      	add	r3, r2
 800a4d0:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d006      	beq.n	800a4ea <find_volume+0x116>
 800a4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4de:	3308      	adds	r3, #8
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fd f8f5 	bl	80076d0 <ld_dword>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	e000      	b.n	800a4ec <find_volume+0x118>
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800a4f4:	440b      	add	r3, r1
 800a4f6:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a4fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800a500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a502:	2b03      	cmp	r3, #3
 800a504:	d9dc      	bls.n	800a4c0 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a506:	2300      	movs	r3, #0
 800a508:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800a50a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <find_volume+0x142>
 800a510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a512:	3b01      	subs	r3, #1
 800a514:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a51e:	4413      	add	r3, r2
 800a520:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a524:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d005      	beq.n	800a538 <find_volume+0x164>
 800a52c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a52e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a530:	f7ff feec 	bl	800a30c <check_fs>
 800a534:	4603      	mov	r3, r0
 800a536:	e000      	b.n	800a53a <find_volume+0x166>
 800a538:	2303      	movs	r3, #3
 800a53a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a53e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a542:	2b01      	cmp	r3, #1
 800a544:	d905      	bls.n	800a552 <find_volume+0x17e>
 800a546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a548:	3301      	adds	r3, #1
 800a54a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a54c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d9e1      	bls.n	800a516 <find_volume+0x142>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a556:	2b04      	cmp	r3, #4
 800a558:	d101      	bne.n	800a55e <find_volume+0x18a>
 800a55a:	2301      	movs	r3, #1
 800a55c:	e27a      	b.n	800aa54 <find_volume+0x680>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a55e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a562:	2b01      	cmp	r3, #1
 800a564:	d901      	bls.n	800a56a <find_volume+0x196>
 800a566:	230d      	movs	r3, #13
 800a568:	e274      	b.n	800aa54 <find_volume+0x680>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800a56a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a56e:	2b01      	cmp	r3, #1
 800a570:	f040 80f4 	bne.w	800a75c <find_volume+0x388>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800a574:	230b      	movs	r3, #11
 800a576:	64bb      	str	r3, [r7, #72]	; 0x48
 800a578:	e002      	b.n	800a580 <find_volume+0x1ac>
 800a57a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a57c:	3301      	adds	r3, #1
 800a57e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a582:	2b3f      	cmp	r3, #63	; 0x3f
 800a584:	d806      	bhi.n	800a594 <find_volume+0x1c0>
 800a586:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a58a:	4413      	add	r3, r2
 800a58c:	3338      	adds	r3, #56	; 0x38
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d0f2      	beq.n	800a57a <find_volume+0x1a6>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800a594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a596:	2b3f      	cmp	r3, #63	; 0x3f
 800a598:	d801      	bhi.n	800a59e <find_volume+0x1ca>
 800a59a:	230d      	movs	r3, #13
 800a59c:	e25a      	b.n	800aa54 <find_volume+0x680>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800a59e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5a0:	3338      	adds	r3, #56	; 0x38
 800a5a2:	3368      	adds	r3, #104	; 0x68
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fd f87b 	bl	80076a0 <ld_word>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5b0:	d001      	beq.n	800a5b6 <find_volume+0x1e2>
 800a5b2:	230d      	movs	r3, #13
 800a5b4:	e24e      	b.n	800aa54 <find_volume+0x680>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800a5b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a5bc:	2b09      	cmp	r3, #9
 800a5be:	d001      	beq.n	800a5c4 <find_volume+0x1f0>
			return FR_NO_FILESYSTEM;
 800a5c0:	230d      	movs	r3, #13
 800a5c2:	e247      	b.n	800aa54 <find_volume+0x680>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800a5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5c6:	3338      	adds	r3, #56	; 0x38
 800a5c8:	3348      	adds	r3, #72	; 0x48
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fd f8a3 	bl	8007716 <ld_qword>
 800a5d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	f04f 0300 	mov.w	r3, #0
 800a5d8:	eb10 0802 	adds.w	r8, r0, r2
 800a5dc:	eb41 0903 	adc.w	r9, r1, r3
 800a5e0:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800a5e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	bf08      	it	eq
 800a5ec:	2a00      	cmpeq	r2, #0
 800a5ee:	d301      	bcc.n	800a5f4 <find_volume+0x220>
 800a5f0:	230d      	movs	r3, #13
 800a5f2:	e22f      	b.n	800aa54 <find_volume+0x680>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800a5f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5f6:	3338      	adds	r3, #56	; 0x38
 800a5f8:	3354      	adds	r3, #84	; 0x54
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fd f868 	bl	80076d0 <ld_dword>
 800a600:	4602      	mov	r2, r0
 800a602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a604:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800a606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a608:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800a60c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a60e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800a610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a612:	789b      	ldrb	r3, [r3, #2]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d001      	beq.n	800a61c <find_volume+0x248>
 800a618:	230d      	movs	r3, #13
 800a61a:	e21b      	b.n	800aa54 <find_volume+0x680>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800a61c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a61e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a622:	461a      	mov	r2, r3
 800a624:	2301      	movs	r3, #1
 800a626:	4093      	lsls	r3, r2
 800a628:	b29a      	uxth	r2, r3
 800a62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a62c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800a62e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a630:	895b      	ldrh	r3, [r3, #10]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d101      	bne.n	800a63a <find_volume+0x266>
 800a636:	230d      	movs	r3, #13
 800a638:	e20c      	b.n	800aa54 <find_volume+0x680>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800a63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a63c:	3338      	adds	r3, #56	; 0x38
 800a63e:	335c      	adds	r3, #92	; 0x5c
 800a640:	4618      	mov	r0, r3
 800a642:	f7fd f845 	bl	80076d0 <ld_dword>
 800a646:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800a648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64a:	4a1e      	ldr	r2, [pc, #120]	; (800a6c4 <find_volume+0x2f0>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d901      	bls.n	800a654 <find_volume+0x280>
 800a650:	230d      	movs	r3, #13
 800a652:	e1ff      	b.n	800aa54 <find_volume+0x680>
		fs->n_fatent = nclst + 2;
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	1c9a      	adds	r2, r3, #2
 800a658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a65a:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800a65c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a65e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a660:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800a662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a664:	3338      	adds	r3, #56	; 0x38
 800a666:	3358      	adds	r3, #88	; 0x58
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fd f831 	bl	80076d0 <ld_dword>
 800a66e:	4602      	mov	r2, r0
 800a670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a672:	441a      	add	r2, r3
 800a674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a676:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800a678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a67a:	3338      	adds	r3, #56	; 0x38
 800a67c:	3350      	adds	r3, #80	; 0x50
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fd f826 	bl	80076d0 <ld_dword>
 800a684:	4602      	mov	r2, r0
 800a686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a688:	441a      	add	r2, r3
 800a68a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a68c:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800a68e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a692:	4618      	mov	r0, r3
 800a694:	f04f 0100 	mov.w	r1, #0
 800a698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a69a:	895b      	ldrh	r3, [r3, #10]
 800a69c:	461a      	mov	r2, r3
 800a69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a0:	fb03 f302 	mul.w	r3, r3, r2
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	f04f 0300 	mov.w	r3, #0
 800a6aa:	1884      	adds	r4, r0, r2
 800a6ac:	eb41 0503 	adc.w	r5, r1, r3
 800a6b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6b4:	42ab      	cmp	r3, r5
 800a6b6:	bf08      	it	eq
 800a6b8:	42a2      	cmpeq	r2, r4
 800a6ba:	d205      	bcs.n	800a6c8 <find_volume+0x2f4>
 800a6bc:	230d      	movs	r3, #13
 800a6be:	e1c9      	b.n	800aa54 <find_volume+0x680>
 800a6c0:	200006c4 	.word	0x200006c4
 800a6c4:	7ffffffd 	.word	0x7ffffffd
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800a6c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ca:	3338      	adds	r3, #56	; 0x38
 800a6cc:	3360      	adds	r3, #96	; 0x60
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fc fffe 	bl	80076d0 <ld_dword>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d8:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800a6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a6e2:	f7fd fc6d 	bl	8007fc0 <clust2sect>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a6ec:	f7fd fbcc 	bl	8007e88 <move_window>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <find_volume+0x326>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e1ac      	b.n	800aa54 <find_volume+0x680>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6fe:	e015      	b.n	800a72c <find_volume+0x358>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a700:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a704:	4413      	add	r3, r2
 800a706:	3338      	adds	r3, #56	; 0x38
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	2b81      	cmp	r3, #129	; 0x81
 800a70c:	d10b      	bne.n	800a726 <find_volume+0x352>
 800a70e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a710:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a716:	3314      	adds	r3, #20
 800a718:	4413      	add	r3, r2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7fc ffd8 	bl	80076d0 <ld_dword>
 800a720:	4603      	mov	r3, r0
 800a722:	2b02      	cmp	r3, #2
 800a724:	d007      	beq.n	800a736 <find_volume+0x362>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800a726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a728:	3320      	adds	r3, #32
 800a72a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a72c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a72e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a732:	d3e5      	bcc.n	800a700 <find_volume+0x32c>
 800a734:	e000      	b.n	800a738 <find_volume+0x364>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a736:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800a738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a73a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a73e:	d101      	bne.n	800a744 <find_volume+0x370>
 800a740:	230d      	movs	r3, #13
 800a742:	e187      	b.n	800aa54 <find_volume+0x680>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a746:	f04f 32ff 	mov.w	r2, #4294967295
 800a74a:	619a      	str	r2, [r3, #24]
 800a74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a74e:	699a      	ldr	r2, [r3, #24]
 800a750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a752:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800a754:	2304      	movs	r3, #4
 800a756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a75a:	e163      	b.n	800aa24 <find_volume+0x650>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a75c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a75e:	3338      	adds	r3, #56	; 0x38
 800a760:	330b      	adds	r3, #11
 800a762:	4618      	mov	r0, r3
 800a764:	f7fc ff9c 	bl	80076a0 <ld_word>
 800a768:	4603      	mov	r3, r0
 800a76a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a76e:	d001      	beq.n	800a774 <find_volume+0x3a0>
 800a770:	230d      	movs	r3, #13
 800a772:	e16f      	b.n	800aa54 <find_volume+0x680>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a776:	3338      	adds	r3, #56	; 0x38
 800a778:	3316      	adds	r3, #22
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fc ff90 	bl	80076a0 <ld_word>
 800a780:	4603      	mov	r3, r0
 800a782:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a786:	2b00      	cmp	r3, #0
 800a788:	d106      	bne.n	800a798 <find_volume+0x3c4>
 800a78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a78c:	3338      	adds	r3, #56	; 0x38
 800a78e:	3324      	adds	r3, #36	; 0x24
 800a790:	4618      	mov	r0, r3
 800a792:	f7fc ff9d 	bl	80076d0 <ld_dword>
 800a796:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800a798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a79a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a79c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a79e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a7a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7aa:	789b      	ldrb	r3, [r3, #2]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d005      	beq.n	800a7bc <find_volume+0x3e8>
 800a7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7b2:	789b      	ldrb	r3, [r3, #2]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d001      	beq.n	800a7bc <find_volume+0x3e8>
 800a7b8:	230d      	movs	r3, #13
 800a7ba:	e14b      	b.n	800aa54 <find_volume+0x680>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a7bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7be:	789b      	ldrb	r3, [r3, #2]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7c4:	fb02 f303 	mul.w	r3, r2, r3
 800a7c8:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a7ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a7d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7d8:	895b      	ldrh	r3, [r3, #10]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d008      	beq.n	800a7f0 <find_volume+0x41c>
 800a7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7e0:	895b      	ldrh	r3, [r3, #10]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7e6:	895b      	ldrh	r3, [r3, #10]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <find_volume+0x420>
 800a7f0:	230d      	movs	r3, #13
 800a7f2:	e12f      	b.n	800aa54 <find_volume+0x680>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7f6:	3338      	adds	r3, #56	; 0x38
 800a7f8:	3311      	adds	r3, #17
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fc ff50 	bl	80076a0 <ld_word>
 800a800:	4603      	mov	r3, r0
 800a802:	461a      	mov	r2, r3
 800a804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a806:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a80a:	891b      	ldrh	r3, [r3, #8]
 800a80c:	f003 030f 	and.w	r3, r3, #15
 800a810:	b29b      	uxth	r3, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <find_volume+0x446>
 800a816:	230d      	movs	r3, #13
 800a818:	e11c      	b.n	800aa54 <find_volume+0x680>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a81a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a81c:	3338      	adds	r3, #56	; 0x38
 800a81e:	3313      	adds	r3, #19
 800a820:	4618      	mov	r0, r3
 800a822:	f7fc ff3d 	bl	80076a0 <ld_word>
 800a826:	4603      	mov	r3, r0
 800a828:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a82a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d106      	bne.n	800a83e <find_volume+0x46a>
 800a830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a832:	3338      	adds	r3, #56	; 0x38
 800a834:	3320      	adds	r3, #32
 800a836:	4618      	mov	r0, r3
 800a838:	f7fc ff4a 	bl	80076d0 <ld_dword>
 800a83c:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a83e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a840:	3338      	adds	r3, #56	; 0x38
 800a842:	330e      	adds	r3, #14
 800a844:	4618      	mov	r0, r3
 800a846:	f7fc ff2b 	bl	80076a0 <ld_word>
 800a84a:	4603      	mov	r3, r0
 800a84c:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a84e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <find_volume+0x484>
 800a854:	230d      	movs	r3, #13
 800a856:	e0fd      	b.n	800aa54 <find_volume+0x680>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a858:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a85a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a85c:	4413      	add	r3, r2
 800a85e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a860:	8912      	ldrh	r2, [r2, #8]
 800a862:	0912      	lsrs	r2, r2, #4
 800a864:	b292      	uxth	r2, r2
 800a866:	4413      	add	r3, r2
 800a868:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a86a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	429a      	cmp	r2, r3
 800a870:	d201      	bcs.n	800a876 <find_volume+0x4a2>
 800a872:	230d      	movs	r3, #13
 800a874:	e0ee      	b.n	800aa54 <find_volume+0x680>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a876:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87a:	1ad3      	subs	r3, r2, r3
 800a87c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a87e:	8952      	ldrh	r2, [r2, #10]
 800a880:	fbb3 f3f2 	udiv	r3, r3, r2
 800a884:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d101      	bne.n	800a890 <find_volume+0x4bc>
 800a88c:	230d      	movs	r3, #13
 800a88e:	e0e1      	b.n	800aa54 <find_volume+0x680>
		fmt = FS_FAT32;
 800a890:	2303      	movs	r3, #3
 800a892:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a898:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d802      	bhi.n	800a8a6 <find_volume+0x4d2>
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d802      	bhi.n	800a8b6 <find_volume+0x4e2>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b8:	1c9a      	adds	r2, r3, #2
 800a8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8bc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a8be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8c2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a8c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a8c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8c8:	441a      	add	r2, r3
 800a8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8cc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a8ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d2:	441a      	add	r2, r3
 800a8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8d6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a8d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	d11e      	bne.n	800a91e <find_volume+0x54a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a8e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8e2:	3338      	adds	r3, #56	; 0x38
 800a8e4:	332a      	adds	r3, #42	; 0x2a
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fc feda 	bl	80076a0 <ld_word>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <find_volume+0x522>
 800a8f2:	230d      	movs	r3, #13
 800a8f4:	e0ae      	b.n	800aa54 <find_volume+0x680>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a8f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8f8:	891b      	ldrh	r3, [r3, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <find_volume+0x52e>
 800a8fe:	230d      	movs	r3, #13
 800a900:	e0a8      	b.n	800aa54 <find_volume+0x680>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a904:	3338      	adds	r3, #56	; 0x38
 800a906:	332c      	adds	r3, #44	; 0x2c
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fc fee1 	bl	80076d0 <ld_dword>
 800a90e:	4602      	mov	r2, r0
 800a910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a912:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a916:	69db      	ldr	r3, [r3, #28]
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a91c:	e01f      	b.n	800a95e <find_volume+0x58a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a91e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a920:	891b      	ldrh	r3, [r3, #8]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <find_volume+0x556>
 800a926:	230d      	movs	r3, #13
 800a928:	e094      	b.n	800aa54 <find_volume+0x680>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a92a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a92c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a930:	441a      	add	r2, r3
 800a932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a934:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a936:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d103      	bne.n	800a946 <find_volume+0x572>
 800a93e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	e00a      	b.n	800a95c <find_volume+0x588>
 800a946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a948:	69da      	ldr	r2, [r3, #28]
 800a94a:	4613      	mov	r3, r2
 800a94c:	005b      	lsls	r3, r3, #1
 800a94e:	4413      	add	r3, r2
 800a950:	085a      	lsrs	r2, r3, #1
 800a952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a954:	69db      	ldr	r3, [r3, #28]
 800a956:	f003 0301 	and.w	r3, r3, #1
 800a95a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a95c:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a960:	6a1a      	ldr	r2, [r3, #32]
 800a962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a964:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a968:	0a5b      	lsrs	r3, r3, #9
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d201      	bcs.n	800a972 <find_volume+0x59e>
 800a96e:	230d      	movs	r3, #13
 800a970:	e070      	b.n	800aa54 <find_volume+0x680>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a974:	f04f 32ff 	mov.w	r2, #4294967295
 800a978:	619a      	str	r2, [r3, #24]
 800a97a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a97c:	699a      	ldr	r2, [r3, #24]
 800a97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a980:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a984:	2280      	movs	r2, #128	; 0x80
 800a986:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d149      	bne.n	800aa24 <find_volume+0x650>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a992:	3338      	adds	r3, #56	; 0x38
 800a994:	3330      	adds	r3, #48	; 0x30
 800a996:	4618      	mov	r0, r3
 800a998:	f7fc fe82 	bl	80076a0 <ld_word>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d140      	bne.n	800aa24 <find_volume+0x650>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a9a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a9aa:	f7fd fa6d 	bl	8007e88 <move_window>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d137      	bne.n	800aa24 <find_volume+0x650>
		{
			fs->fsi_flag = 0;
 800a9b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a9ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9bc:	3338      	adds	r3, #56	; 0x38
 800a9be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fc fe6c 	bl	80076a0 <ld_word>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d127      	bne.n	800aa24 <find_volume+0x650>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9d6:	3338      	adds	r3, #56	; 0x38
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fc fe79 	bl	80076d0 <ld_dword>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	4a1f      	ldr	r2, [pc, #124]	; (800aa60 <find_volume+0x68c>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d11e      	bne.n	800aa24 <find_volume+0x650>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9e8:	3338      	adds	r3, #56	; 0x38
 800a9ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fc fe6e 	bl	80076d0 <ld_dword>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	4a1b      	ldr	r2, [pc, #108]	; (800aa64 <find_volume+0x690>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d113      	bne.n	800aa24 <find_volume+0x650>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a9fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9fe:	3338      	adds	r3, #56	; 0x38
 800aa00:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fc fe63 	bl	80076d0 <ld_dword>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa0e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aa10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa12:	3338      	adds	r3, #56	; 0x38
 800aa14:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fc fe59 	bl	80076d0 <ld_dword>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa22:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aa24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa26:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800aa2a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aa2c:	4b0e      	ldr	r3, [pc, #56]	; (800aa68 <find_volume+0x694>)
 800aa2e:	881b      	ldrh	r3, [r3, #0]
 800aa30:	3301      	adds	r3, #1
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <find_volume+0x694>)
 800aa36:	801a      	strh	r2, [r3, #0]
 800aa38:	4b0b      	ldr	r3, [pc, #44]	; (800aa68 <find_volume+0x694>)
 800aa3a:	881a      	ldrh	r2, [r3, #0]
 800aa3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa3e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800aa40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa42:	4a0a      	ldr	r2, [pc, #40]	; (800aa6c <find_volume+0x698>)
 800aa44:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800aa46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa48:	4a09      	ldr	r2, [pc, #36]	; (800aa70 <find_volume+0x69c>)
 800aa4a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aa4c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800aa4e:	f7fd f9b3 	bl	8007db8 <clear_lock>
#endif
	return FR_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3760      	adds	r7, #96	; 0x60
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800aa5e:	bf00      	nop
 800aa60:	41615252 	.word	0x41615252
 800aa64:	61417272 	.word	0x61417272
 800aa68:	200006c8 	.word	0x200006c8
 800aa6c:	2000094c 	.word	0x2000094c
 800aa70:	200006ec 	.word	0x200006ec

0800aa74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aa7e:	2309      	movs	r3, #9
 800aa80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d01c      	beq.n	800aac2 <validate+0x4e>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d018      	beq.n	800aac2 <validate+0x4e>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d013      	beq.n	800aac2 <validate+0x4e>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	889a      	ldrh	r2, [r3, #4]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	88db      	ldrh	r3, [r3, #6]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d10c      	bne.n	800aac2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	785b      	ldrb	r3, [r3, #1]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fc fd58 	bl	8007564 <disk_status>
 800aab4:	4603      	mov	r3, r0
 800aab6:	f003 0301 	and.w	r3, r3, #1
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <validate+0x4e>
			res = FR_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d102      	bne.n	800aace <validate+0x5a>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	e000      	b.n	800aad0 <validate+0x5c>
 800aace:	2300      	movs	r3, #0
 800aad0:	683a      	ldr	r2, [r7, #0]
 800aad2:	6013      	str	r3, [r2, #0]
	return res;
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
	...

0800aae0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	4613      	mov	r3, r2
 800aaec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800aaf2:	f107 0310 	add.w	r3, r7, #16
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7ff fbc3 	bl	800a282 <get_ldnumber>
 800aafc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	da01      	bge.n	800ab08 <f_mount+0x28>
 800ab04:	230b      	movs	r3, #11
 800ab06:	e02b      	b.n	800ab60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ab08:	4a17      	ldr	r2, [pc, #92]	; (800ab68 <f_mount+0x88>)
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d005      	beq.n	800ab24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ab18:	69b8      	ldr	r0, [r7, #24]
 800ab1a:	f7fd f94d 	bl	8007db8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	2200      	movs	r2, #0
 800ab22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d002      	beq.n	800ab30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	490d      	ldr	r1, [pc, #52]	; (800ab68 <f_mount+0x88>)
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <f_mount+0x66>
 800ab40:	79fb      	ldrb	r3, [r7, #7]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d001      	beq.n	800ab4a <f_mount+0x6a>
 800ab46:	2300      	movs	r3, #0
 800ab48:	e00a      	b.n	800ab60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ab4a:	f107 010c 	add.w	r1, r7, #12
 800ab4e:	f107 0308 	add.w	r3, r7, #8
 800ab52:	2200      	movs	r2, #0
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff fc3d 	bl	800a3d4 <find_volume>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3720      	adds	r7, #32
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	200006c4 	.word	0x200006c4

0800ab6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ab6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ab70:	b0a2      	sub	sp, #136	; 0x88
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	60f8      	str	r0, [r7, #12]
 800ab76:	60b9      	str	r1, [r7, #8]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <f_open+0x1a>
 800ab82:	2309      	movs	r3, #9
 800ab84:	e29e      	b.n	800b0c4 <f_open+0x558>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab8c:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ab8e:	79fa      	ldrb	r2, [r7, #7]
 800ab90:	f107 0114 	add.w	r1, r7, #20
 800ab94:	f107 0308 	add.w	r3, r7, #8
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7ff fc1b 	bl	800a3d4 <find_volume>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 800aba4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f040 8282 	bne.w	800b0b2 <f_open+0x546>
		dj.obj.fs = fs;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	f107 0318 	add.w	r3, r7, #24
 800abb8:	4611      	mov	r1, r2
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff fab8 	bl	800a130 <follow_path>
 800abc0:	4603      	mov	r3, r0
 800abc2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800abc6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d11a      	bne.n	800ac04 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800abce:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800abd2:	b25b      	sxtb	r3, r3
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	da03      	bge.n	800abe0 <f_open+0x74>
				res = FR_INVALID_NAME;
 800abd8:	2306      	movs	r3, #6
 800abda:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800abde:	e011      	b.n	800ac04 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abe0:	79fb      	ldrb	r3, [r7, #7]
 800abe2:	f023 0301 	bic.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	bf14      	ite	ne
 800abea:	2301      	movne	r3, #1
 800abec:	2300      	moveq	r3, #0
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	461a      	mov	r2, r3
 800abf2:	f107 0318 	add.w	r3, r7, #24
 800abf6:	4611      	mov	r1, r2
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fc ff95 	bl	8007b28 <chk_lock>
 800abfe:	4603      	mov	r3, r0
 800ac00:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ac04:	79fb      	ldrb	r3, [r7, #7]
 800ac06:	f003 031c 	and.w	r3, r3, #28
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f000 8109 	beq.w	800ae22 <f_open+0x2b6>
			if (res != FR_OK) {					/* No file, create new */
 800ac10:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d017      	beq.n	800ac48 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ac18:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ac1c:	2b04      	cmp	r3, #4
 800ac1e:	d10e      	bne.n	800ac3e <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ac20:	f7fc ffde 	bl	8007be0 <enq_lock>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d006      	beq.n	800ac38 <f_open+0xcc>
 800ac2a:	f107 0318 	add.w	r3, r7, #24
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe ff24 	bl	8009a7c <dir_register>
 800ac34:	4603      	mov	r3, r0
 800ac36:	e000      	b.n	800ac3a <f_open+0xce>
 800ac38:	2312      	movs	r3, #18
 800ac3a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ac3e:	79fb      	ldrb	r3, [r7, #7]
 800ac40:	f043 0308 	orr.w	r3, r3, #8
 800ac44:	71fb      	strb	r3, [r7, #7]
 800ac46:	e010      	b.n	800ac6a <f_open+0xfe>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ac48:	7fbb      	ldrb	r3, [r7, #30]
 800ac4a:	f003 0311 	and.w	r3, r3, #17
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <f_open+0xee>
					res = FR_DENIED;
 800ac52:	2307      	movs	r3, #7
 800ac54:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800ac58:	e007      	b.n	800ac6a <f_open+0xfe>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ac5a:	79fb      	ldrb	r3, [r7, #7]
 800ac5c:	f003 0304 	and.w	r3, r3, #4
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <f_open+0xfe>
 800ac64:	2308      	movs	r3, #8
 800ac66:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ac6a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f040 80f1 	bne.w	800ae56 <f_open+0x2ea>
 800ac74:	79fb      	ldrb	r3, [r7, #7]
 800ac76:	f003 0308 	and.w	r3, r3, #8
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f000 80eb 	beq.w	800ae56 <f_open+0x2ea>
				dw = GET_FATTIME();
 800ac80:	f7fc fa3c 	bl	80070fc <get_fattime>
 800ac84:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	2b04      	cmp	r3, #4
 800ac8c:	f040 8082 	bne.w	800ad94 <f_open+0x228>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800ac90:	697a      	ldr	r2, [r7, #20]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	3334      	adds	r3, #52	; 0x34
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7fc fd17 	bl	80076d0 <ld_dword>
 800aca2:	4602      	mov	r2, r0
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	3338      	adds	r3, #56	; 0x38
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fc fd31 	bl	8007716 <ld_qword>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	68f9      	ldr	r1, [r7, #12]
 800acba:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	3321      	adds	r3, #33	; 0x21
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	f003 0302 	and.w	r3, r3, #2
 800acca:	b2da      	uxtb	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	3308      	adds	r3, #8
 800acdc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fc fdef 	bl	80078c2 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	3314      	adds	r3, #20
 800acea:	2200      	movs	r2, #0
 800acec:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	330c      	adds	r3, #12
 800acf4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fc fde3 	bl	80078c2 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	3315      	adds	r3, #21
 800ad02:	2200      	movs	r2, #0
 800ad04:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	2220      	movs	r2, #32
 800ad0e:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	3334      	adds	r3, #52	; 0x34
 800ad16:	2100      	movs	r1, #0
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7fc fdd2 	bl	80078c2 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ad26:	f04f 0200 	mov.w	r2, #0
 800ad2a:	f04f 0300 	mov.w	r3, #0
 800ad2e:	4608      	mov	r0, r1
 800ad30:	f7fc fdf3 	bl	800791a <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ad3c:	f04f 0200 	mov.w	r2, #0
 800ad40:	f04f 0300 	mov.w	r3, #0
 800ad44:	4608      	mov	r0, r1
 800ad46:	f7fc fde8 	bl	800791a <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	3321      	adds	r3, #33	; 0x21
 800ad50:	2201      	movs	r2, #1
 800ad52:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800ad54:	f107 0318 	add.w	r3, r7, #24
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fe fbdc 	bl	8009516 <store_xdir>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800ad64:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d174      	bne.n	800ae56 <f_open+0x2ea>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d070      	beq.n	800ae56 <f_open+0x2ea>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	f7fd fc91 	bl	80086a4 <remove_chain>
 800ad82:	4603      	mov	r3, r0
 800ad84:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	689a      	ldr	r2, [r3, #8]
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	3a01      	subs	r2, #1
 800ad90:	615a      	str	r2, [r3, #20]
 800ad92:	e060      	b.n	800ae56 <f_open+0x2ea>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ad94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad96:	330e      	adds	r3, #14
 800ad98:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fc fd91 	bl	80078c2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ada0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ada2:	3316      	adds	r3, #22
 800ada4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fc fd8b 	bl	80078c2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800adac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adae:	330b      	adds	r3, #11
 800adb0:	2220      	movs	r2, #32
 800adb2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800adb8:	4611      	mov	r1, r2
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe f81f 	bl	8008dfe <ld_clust>
 800adc0:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800adc6:	2200      	movs	r2, #0
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fe f837 	bl	8008e3c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800adce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800add0:	331c      	adds	r3, #28
 800add2:	2100      	movs	r1, #0
 800add4:	4618      	mov	r0, r3
 800add6:	f7fc fd74 	bl	80078c2 <st_dword>
					fs->wflag = 1;
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2201      	movs	r2, #1
 800adde:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ade0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d037      	beq.n	800ae56 <f_open+0x2ea>
						dw = fs->winsect;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adea:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 800adec:	f107 0318 	add.w	r3, r7, #24
 800adf0:	2200      	movs	r2, #0
 800adf2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fd fc55 	bl	80086a4 <remove_chain>
 800adfa:	4603      	mov	r3, r0
 800adfc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 800ae00:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d126      	bne.n	800ae56 <f_open+0x2ea>
							res = move_window(fs, dw);
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7fd f83b 	bl	8007e88 <move_window>
 800ae12:	4603      	mov	r3, r0
 800ae14:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ae1c:	3a01      	subs	r2, #1
 800ae1e:	615a      	str	r2, [r3, #20]
 800ae20:	e019      	b.n	800ae56 <f_open+0x2ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ae22:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d115      	bne.n	800ae56 <f_open+0x2ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ae2a:	7fbb      	ldrb	r3, [r7, #30]
 800ae2c:	f003 0310 	and.w	r3, r3, #16
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d003      	beq.n	800ae3c <f_open+0x2d0>
					res = FR_NO_FILE;
 800ae34:	2304      	movs	r3, #4
 800ae36:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800ae3a:	e00c      	b.n	800ae56 <f_open+0x2ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ae3c:	79fb      	ldrb	r3, [r7, #7]
 800ae3e:	f003 0302 	and.w	r3, r3, #2
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d007      	beq.n	800ae56 <f_open+0x2ea>
 800ae46:	7fbb      	ldrb	r3, [r7, #30]
 800ae48:	f003 0301 	and.w	r3, r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <f_open+0x2ea>
						res = FR_DENIED;
 800ae50:	2307      	movs	r3, #7
 800ae52:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 800ae56:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d128      	bne.n	800aeb0 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ae5e:	79fb      	ldrb	r3, [r7, #7]
 800ae60:	f003 0308 	and.w	r3, r3, #8
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d003      	beq.n	800ae70 <f_open+0x304>
				mode |= FA_MODIFIED;
 800ae68:	79fb      	ldrb	r3, [r7, #7]
 800ae6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae6e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800ae78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ae7e:	79fb      	ldrb	r3, [r7, #7]
 800ae80:	f023 0301 	bic.w	r3, r3, #1
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	bf14      	ite	ne
 800ae88:	2301      	movne	r3, #1
 800ae8a:	2300      	moveq	r3, #0
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	461a      	mov	r2, r3
 800ae90:	f107 0318 	add.w	r3, r7, #24
 800ae94:	4611      	mov	r1, r2
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fc fec4 	bl	8007c24 <inc_lock>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d102      	bne.n	800aeb0 <f_open+0x344>
 800aeaa:	2302      	movs	r3, #2
 800aeac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aeb0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f040 80fc 	bne.w	800b0b2 <f_open+0x546>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	2b04      	cmp	r3, #4
 800aec0:	d12c      	bne.n	800af1c <f_open+0x3b0>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800aec2:	6a3a      	ldr	r2, [r7, #32]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800aec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aecc:	4613      	mov	r3, r2
 800aece:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aed2:	7ffa      	ldrb	r2, [r7, #31]
 800aed4:	431a      	orrs	r2, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800aeda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	3334      	adds	r3, #52	; 0x34
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fc fbf2 	bl	80076d0 <ld_dword>
 800aeec:	4602      	mov	r2, r0
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	3338      	adds	r3, #56	; 0x38
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7fc fc0c 	bl	8007716 <ld_qword>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	68f9      	ldr	r1, [r7, #12]
 800af04:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	3321      	adds	r3, #33	; 0x21
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	f003 0302 	and.w	r3, r3, #2
 800af14:	b2da      	uxtb	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	71da      	strb	r2, [r3, #7]
 800af1a:	e014      	b.n	800af46 <f_open+0x3da>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af20:	4611      	mov	r1, r2
 800af22:	4618      	mov	r0, r3
 800af24:	f7fd ff6b 	bl	8008dfe <ld_clust>
 800af28:	4602      	mov	r2, r0
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800af2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af30:	331c      	adds	r3, #28
 800af32:	4618      	mov	r0, r3
 800af34:	f7fc fbcc 	bl	80076d0 <ld_dword>
 800af38:	4603      	mov	r3, r0
 800af3a:	461a      	mov	r2, r3
 800af3c:	f04f 0300 	mov.w	r3, #0
 800af40:	68f9      	ldr	r1, [r7, #12]
 800af42:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800af4c:	697a      	ldr	r2, [r7, #20]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	88da      	ldrh	r2, [r3, #6]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	79fa      	ldrb	r2, [r7, #7]
 800af5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800af70:	68f9      	ldr	r1, [r7, #12]
 800af72:	f04f 0200 	mov.w	r2, #0
 800af76:	f04f 0300 	mov.w	r3, #0
 800af7a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3354      	adds	r3, #84	; 0x54
 800af82:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af86:	2100      	movs	r1, #0
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fc fd6f 	bl	8007a6c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800af8e:	79fb      	ldrb	r3, [r7, #7]
 800af90:	f003 0320 	and.w	r3, r3, #32
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 808c 	beq.w	800b0b2 <f_open+0x546>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	f000 8086 	beq.w	800b0b2 <f_open+0x546>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800afac:	68f9      	ldr	r1, [r7, #12]
 800afae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	895b      	ldrh	r3, [r3, #10]
 800afb6:	025b      	lsls	r3, r3, #9
 800afb8:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800afc8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800afcc:	e022      	b.n	800b014 <f_open+0x4a8>
					clst = get_fat(&fp->obj, clst);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7fd f813 	bl	8008000 <get_fat>
 800afda:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 800afde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d802      	bhi.n	800afec <f_open+0x480>
 800afe6:	2302      	movs	r3, #2
 800afe8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800afec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff4:	d102      	bne.n	800affc <f_open+0x490>
 800aff6:	2301      	movs	r3, #1
 800aff8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800affc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800affe:	461a      	mov	r2, r3
 800b000:	f04f 0300 	mov.w	r3, #0
 800b004:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800b008:	ebb0 0802 	subs.w	r8, r0, r2
 800b00c:	eb61 0903 	sbc.w	r9, r1, r3
 800b010:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
 800b014:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d109      	bne.n	800b030 <f_open+0x4c4>
 800b01c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b01e:	4618      	mov	r0, r3
 800b020:	f04f 0100 	mov.w	r1, #0
 800b024:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800b028:	4299      	cmp	r1, r3
 800b02a:	bf08      	it	eq
 800b02c:	4290      	cmpeq	r0, r2
 800b02e:	d3ce      	bcc.n	800afce <f_open+0x462>
				}
				fp->clust = clst;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b036:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b038:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d138      	bne.n	800b0b2 <f_open+0x546>
 800b040:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800b044:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b048:	f04f 0100 	mov.w	r1, #0
 800b04c:	ea02 0400 	and.w	r4, r2, r0
 800b050:	ea03 0501 	and.w	r5, r3, r1
 800b054:	ea54 0305 	orrs.w	r3, r4, r5
 800b058:	d02b      	beq.n	800b0b2 <f_open+0x546>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800b060:	4618      	mov	r0, r3
 800b062:	f7fc ffad 	bl	8007fc0 <clust2sect>
 800b066:	66b8      	str	r0, [r7, #104]	; 0x68
 800b068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d103      	bne.n	800b076 <f_open+0x50a>
						res = FR_INT_ERR;
 800b06e:	2302      	movs	r3, #2
 800b070:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800b074:	e01d      	b.n	800b0b2 <f_open+0x546>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b076:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800b07a:	f04f 0200 	mov.w	r2, #0
 800b07e:	f04f 0300 	mov.w	r3, #0
 800b082:	0a42      	lsrs	r2, r0, #9
 800b084:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800b088:	0a4b      	lsrs	r3, r1, #9
 800b08a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b08c:	441a      	add	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	7858      	ldrb	r0, [r3, #1]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	f7fc fa9f 	bl	80075e4 <disk_read>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <f_open+0x546>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b0b2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d002      	beq.n	800b0c0 <f_open+0x554>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b0c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3788      	adds	r7, #136	; 0x88
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b0ce <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b0ce:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b0d2:	b08c      	sub	sp, #48	; 0x30
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
 800b0dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f107 0210 	add.w	r2, r7, #16
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7ff fcbf 	bl	800aa74 <validate>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b0fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b100:	2b00      	cmp	r3, #0
 800b102:	d108      	bne.n	800b116 <f_write+0x48>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b10a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b10e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b112:	2b00      	cmp	r3, #0
 800b114:	d002      	beq.n	800b11c <f_write+0x4e>
 800b116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b11a:	e18c      	b.n	800b436 <f_write+0x368>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b122:	f003 0302 	and.w	r3, r3, #2
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <f_write+0x60>
 800b12a:	2307      	movs	r3, #7
 800b12c:	e183      	b.n	800b436 <f_write+0x368>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	2b04      	cmp	r3, #4
 800b134:	f000 816f 	beq.w	800b416 <f_write+0x348>
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	18d1      	adds	r1, r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b148:	4613      	mov	r3, r2
 800b14a:	4299      	cmp	r1, r3
 800b14c:	f080 8163 	bcs.w	800b416 <f_write+0x348>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b156:	4613      	mov	r3, r2
 800b158:	43db      	mvns	r3, r3
 800b15a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b15c:	e15b      	b.n	800b416 <f_write+0x348>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b164:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b168:	f04f 0100 	mov.w	r1, #0
 800b16c:	ea02 0400 	and.w	r4, r2, r0
 800b170:	ea03 0501 	and.w	r5, r3, r1
 800b174:	ea54 0305 	orrs.w	r3, r4, r5
 800b178:	f040 80fb 	bne.w	800b372 <f_write+0x2a4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800b182:	f04f 0200 	mov.w	r2, #0
 800b186:	f04f 0300 	mov.w	r3, #0
 800b18a:	0a42      	lsrs	r2, r0, #9
 800b18c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800b190:	0a4b      	lsrs	r3, r1, #9
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	895b      	ldrh	r3, [r3, #10]
 800b196:	3b01      	subs	r3, #1
 800b198:	4013      	ands	r3, r2
 800b19a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d146      	bne.n	800b230 <f_write+0x162>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	d10c      	bne.n	800b1c6 <f_write+0xf8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d11a      	bne.n	800b1ee <f_write+0x120>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7fd fb25 	bl	800880c <create_chain>
 800b1c2:	62b8      	str	r0, [r7, #40]	; 0x28
 800b1c4:	e013      	b.n	800b1ee <f_write+0x120>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d007      	beq.n	800b1de <f_write+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f7fd fc1a 	bl	8008a0e <clmt_clust>
 800b1da:	62b8      	str	r0, [r7, #40]	; 0x28
 800b1dc:	e007      	b.n	800b1ee <f_write+0x120>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	4610      	mov	r0, r2
 800b1e8:	f7fd fb10 	bl	800880c <create_chain>
 800b1ec:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f000 8115 	beq.w	800b420 <f_write+0x352>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d105      	bne.n	800b208 <f_write+0x13a>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2202      	movs	r2, #2
 800b200:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800b204:	2302      	movs	r3, #2
 800b206:	e116      	b.n	800b436 <f_write+0x368>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20e:	d105      	bne.n	800b21c <f_write+0x14e>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800b218:	2301      	movs	r3, #1
 800b21a:	e10c      	b.n	800b436 <f_write+0x368>
				fp->clust = clst;			/* Update current cluster */
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b220:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d102      	bne.n	800b230 <f_write+0x162>
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b22e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b236:	b25b      	sxtb	r3, r3
 800b238:	2b00      	cmp	r3, #0
 800b23a:	da1b      	bge.n	800b274 <f_write+0x1a6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	7858      	ldrb	r0, [r3, #1]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b24a:	2301      	movs	r3, #1
 800b24c:	f7fc f9ea 	bl	8007624 <disk_write>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d005      	beq.n	800b262 <f_write+0x194>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2201      	movs	r2, #1
 800b25a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800b25e:	2301      	movs	r3, #1
 800b260:	e0e9      	b.n	800b436 <f_write+0x368>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b26c:	b2da      	uxtb	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27a:	4619      	mov	r1, r3
 800b27c:	4610      	mov	r0, r2
 800b27e:	f7fc fe9f 	bl	8007fc0 <clust2sect>
 800b282:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d105      	bne.n	800b296 <f_write+0x1c8>
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2202      	movs	r2, #2
 800b28e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800b292:	2302      	movs	r3, #2
 800b294:	e0cf      	b.n	800b436 <f_write+0x368>
			sect += csect;
 800b296:	697a      	ldr	r2, [r7, #20]
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	4413      	add	r3, r2
 800b29c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	0a5b      	lsrs	r3, r3, #9
 800b2a2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d03f      	beq.n	800b32a <f_write+0x25c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b2aa:	69ba      	ldr	r2, [r7, #24]
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	8952      	ldrh	r2, [r2, #10]
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d905      	bls.n	800b2c4 <f_write+0x1f6>
					cc = fs->csize - csect;
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	895b      	ldrh	r3, [r3, #10]
 800b2bc:	461a      	mov	r2, r3
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	1ad3      	subs	r3, r2, r3
 800b2c2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	7858      	ldrb	r0, [r3, #1]
 800b2c8:	6a3b      	ldr	r3, [r7, #32]
 800b2ca:	697a      	ldr	r2, [r7, #20]
 800b2cc:	69f9      	ldr	r1, [r7, #28]
 800b2ce:	f7fc f9a9 	bl	8007624 <disk_write>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d005      	beq.n	800b2e4 <f_write+0x216>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e0a8      	b.n	800b436 <f_write+0x368>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	6a3a      	ldr	r2, [r7, #32]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d917      	bls.n	800b322 <f_write+0x254>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	025b      	lsls	r3, r3, #9
 800b302:	69fa      	ldr	r2, [r7, #28]
 800b304:	4413      	add	r3, r2
 800b306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b30a:	4619      	mov	r1, r3
 800b30c:	f7fc fb8d 	bl	8007a2a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b31a:	b2da      	uxtb	r2, r3
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b322:	6a3b      	ldr	r3, [r7, #32]
 800b324:	025b      	lsls	r3, r3, #9
 800b326:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b328:	e04a      	b.n	800b3c0 <f_write+0x2f2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	429a      	cmp	r2, r3
 800b332:	d01b      	beq.n	800b36c <f_write+0x29e>
				fp->fptr < fp->obj.objsize &&
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b340:	4299      	cmp	r1, r3
 800b342:	bf08      	it	eq
 800b344:	4290      	cmpeq	r0, r2
 800b346:	d211      	bcs.n	800b36c <f_write+0x29e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	7858      	ldrb	r0, [r3, #1]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b352:	2301      	movs	r3, #1
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	f7fc f945 	bl	80075e4 <disk_read>
 800b35a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d005      	beq.n	800b36c <f_write+0x29e>
					ABORT(fs, FR_DISK_ERR);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800b368:	2301      	movs	r3, #1
 800b36a:	e064      	b.n	800b436 <f_write+0x368>
			}
#endif
			fp->sect = sect;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	697a      	ldr	r2, [r7, #20]
 800b370:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b378:	4613      	mov	r3, r2
 800b37a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b37e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b382:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d901      	bls.n	800b390 <f_write+0x2c2>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b39c:	4613      	mov	r3, r2
 800b39e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3a2:	440b      	add	r3, r1
 800b3a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3a6:	69f9      	ldr	r1, [r7, #28]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fc fb3e 	bl	8007a2a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b3c0:	69fa      	ldr	r2, [r7, #28]
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	4413      	add	r3, r2
 800b3c6:	61fb      	str	r3, [r7, #28]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	f04f 0300 	mov.w	r3, #0
 800b3d6:	eb10 0802 	adds.w	r8, r0, r2
 800b3da:	eb41 0903 	adc.w	r9, r1, r3
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b3ea:	68f9      	ldr	r1, [r7, #12]
 800b3ec:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800b3f0:	428b      	cmp	r3, r1
 800b3f2:	bf08      	it	eq
 800b3f4:	4282      	cmpeq	r2, r0
 800b3f6:	d201      	bcs.n	800b3fc <f_write+0x32e>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	68f9      	ldr	r1, [r7, #12]
 800b3fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b408:	441a      	add	r2, r3
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f47f aea0 	bne.w	800b15e <f_write+0x90>
 800b41e:	e000      	b.n	800b422 <f_write+0x354>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b420:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b42c:	b2da      	uxtb	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3730      	adds	r7, #48	; 0x30
 800b43a:	46bd      	mov	sp, r7
 800b43c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b440 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b09a      	sub	sp, #104	; 0x68
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b44e:	4611      	mov	r1, r2
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff fb0f 	bl	800aa74 <validate>
 800b456:	4603      	mov	r3, r0
 800b458:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b45c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b460:	2b00      	cmp	r3, #0
 800b462:	f040 8105 	bne.w	800b670 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b46c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b470:	2b00      	cmp	r3, #0
 800b472:	f000 80fd 	beq.w	800b670 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b47c:	b25b      	sxtb	r3, r3
 800b47e:	2b00      	cmp	r3, #0
 800b480:	da17      	bge.n	800b4b2 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b484:	7858      	ldrb	r0, [r3, #1]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b490:	2301      	movs	r3, #1
 800b492:	f7fc f8c7 	bl	8007624 <disk_write>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d001      	beq.n	800b4a0 <f_sync+0x60>
 800b49c:	2301      	movs	r3, #1
 800b49e:	e0e9      	b.n	800b674 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b4a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b4b2:	f7fb fe23 	bl	80070fc <get_fattime>
 800b4b6:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b4b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	2b04      	cmp	r3, #4
 800b4be:	f040 808c 	bne.w	800b5da <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fd f88d 	bl	80085e4 <fill_first_frag>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800b4d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4de:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	f7fd f8ad 	bl	8008642 <fill_last_frag>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800b4ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f040 80bc 	bne.w	800b670 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	f107 0308 	add.w	r3, r7, #8
 800b4fe:	4611      	mov	r1, r2
 800b500:	4618      	mov	r0, r3
 800b502:	f7fd ffcd 	bl	80094a0 <load_obj_dir>
 800b506:	4603      	mov	r3, r0
 800b508:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800b50c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b510:	2b00      	cmp	r3, #0
 800b512:	f040 80ad 	bne.w	800b670 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800b516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	3304      	adds	r3, #4
 800b51c:	781a      	ldrb	r2, [r3, #0]
 800b51e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	3304      	adds	r3, #4
 800b524:	f042 0220 	orr.w	r2, r2, #32
 800b528:	b2d2      	uxtb	r2, r2
 800b52a:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	79da      	ldrb	r2, [r3, #7]
 800b530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	3321      	adds	r3, #33	; 0x21
 800b536:	f042 0201 	orr.w	r2, r2, #1
 800b53a:	b2d2      	uxtb	r2, r2
 800b53c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800b53e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	4619      	mov	r1, r3
 800b54c:	4610      	mov	r0, r2
 800b54e:	f7fc f9b8 	bl	80078c2 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800b552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b560:	4608      	mov	r0, r1
 800b562:	f7fc f9da 	bl	800791a <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800b566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b574:	4608      	mov	r0, r1
 800b576:	f7fc f9d0 	bl	800791a <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800b57a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	330c      	adds	r3, #12
 800b580:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b582:	4618      	mov	r0, r3
 800b584:	f7fc f99d 	bl	80078c2 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800b588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	3315      	adds	r3, #21
 800b58e:	2200      	movs	r2, #0
 800b590:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800b592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	3310      	adds	r3, #16
 800b598:	2100      	movs	r1, #0
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fc f991 	bl	80078c2 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800b5a0:	f107 0308 	add.w	r3, r7, #8
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fd ffb6 	bl	8009516 <store_xdir>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b5b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d15b      	bne.n	800b670 <f_sync+0x230>
							res = sync_fs(fs);
 800b5b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fc fc92 	bl	8007ee4 <sync_fs>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800b5d8:	e04a      	b.n	800b670 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b5da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	f7fc fc50 	bl	8007e88 <move_window>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800b5ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d13c      	bne.n	800b670 <f_sync+0x230>
					dir = fp->dir_ptr;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5fa:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b5fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5fe:	330b      	adds	r3, #11
 800b600:	781a      	ldrb	r2, [r3, #0]
 800b602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b604:	330b      	adds	r3, #11
 800b606:	f042 0220 	orr.w	r2, r2, #32
 800b60a:	b2d2      	uxtb	r2, r2
 800b60c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6818      	ldr	r0, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	461a      	mov	r2, r3
 800b618:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b61a:	f7fd fc0f 	bl	8008e3c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b61e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b620:	f103 001c 	add.w	r0, r3, #28
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b62a:	4613      	mov	r3, r2
 800b62c:	4619      	mov	r1, r3
 800b62e:	f7fc f948 	bl	80078c2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b634:	3316      	adds	r3, #22
 800b636:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b638:	4618      	mov	r0, r3
 800b63a:	f7fc f942 	bl	80078c2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b63e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b640:	3312      	adds	r3, #18
 800b642:	2100      	movs	r1, #0
 800b644:	4618      	mov	r0, r3
 800b646:	f7fc f921 	bl	800788c <st_word>
					fs->wflag = 1;
 800b64a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b64c:	2201      	movs	r2, #1
 800b64e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b652:	4618      	mov	r0, r3
 800b654:	f7fc fc46 	bl	8007ee4 <sync_fs>
 800b658:	4603      	mov	r3, r0
 800b65a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b670:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b674:	4618      	mov	r0, r3
 800b676:	3768      	adds	r7, #104	; 0x68
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff fedb 	bl	800b440 <f_sync>
 800b68a:	4603      	mov	r3, r0
 800b68c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b68e:	7bfb      	ldrb	r3, [r7, #15]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d118      	bne.n	800b6c6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f107 0208 	add.w	r2, r7, #8
 800b69a:	4611      	mov	r1, r2
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7ff f9e9 	bl	800aa74 <validate>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b6a6:	7bfb      	ldrb	r3, [r7, #15]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10c      	bne.n	800b6c6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fc fb45 	bl	8007d40 <dec_lock>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d102      	bne.n	800b6c6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b09a      	sub	sp, #104	; 0x68
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b6dc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b6e0:	f107 030c 	add.w	r3, r7, #12
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fe fe74 	bl	800a3d4 <find_volume>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b6f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f040 80e6 	bne.w	800b8c8 <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b6fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b704:	699a      	ldr	r2, [r3, #24]
 800b706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b708:	69db      	ldr	r3, [r3, #28]
 800b70a:	3b02      	subs	r3, #2
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d804      	bhi.n	800b71a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b712:	699a      	ldr	r2, [r3, #24]
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	601a      	str	r2, [r3, #0]
 800b718:	e0d6      	b.n	800b8c8 <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b71a:	2300      	movs	r3, #0
 800b71c:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d128      	bne.n	800b778 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b726:	2302      	movs	r3, #2
 800b728:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b72a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b72c:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800b72e:	f107 0310 	add.w	r3, r7, #16
 800b732:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b734:	4618      	mov	r0, r3
 800b736:	f7fc fc63 	bl	8008000 <get_fat>
 800b73a:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b73c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b742:	d103      	bne.n	800b74c <f_getfree+0x7c>
 800b744:	2301      	movs	r3, #1
 800b746:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b74a:	e0b0      	b.n	800b8ae <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b74c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d103      	bne.n	800b75a <f_getfree+0x8a>
 800b752:	2302      	movs	r3, #2
 800b754:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b758:	e0a9      	b.n	800b8ae <f_getfree+0x1de>
					if (stat == 0) nfree++;
 800b75a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d102      	bne.n	800b766 <f_getfree+0x96>
 800b760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b762:	3301      	adds	r3, #1
 800b764:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800b766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b768:	3301      	adds	r3, #1
 800b76a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b76e:	69db      	ldr	r3, [r3, #28]
 800b770:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b772:	429a      	cmp	r2, r3
 800b774:	d3db      	bcc.n	800b72e <f_getfree+0x5e>
 800b776:	e09a      	b.n	800b8ae <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800b778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	2b04      	cmp	r3, #4
 800b77e:	d146      	bne.n	800b80e <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800b780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b782:	69db      	ldr	r3, [r3, #28]
 800b784:	3b02      	subs	r3, #2
 800b786:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800b788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b78c:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800b792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10d      	bne.n	800b7b4 <f_getfree+0xe4>
 800b798:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b79a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b79c:	1c5a      	adds	r2, r3, #1
 800b79e:	65ba      	str	r2, [r7, #88]	; 0x58
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	f7fc fb71 	bl	8007e88 <move_window>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b7ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d179      	bne.n	800b8a8 <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800b7b4:	2308      	movs	r3, #8
 800b7b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7bc:	4413      	add	r3, r2
 800b7be:	3338      	adds	r3, #56	; 0x38
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b7c6:	e013      	b.n	800b7f0 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800b7c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <f_getfree+0x10a>
 800b7d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800b7da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b7de:	085b      	lsrs	r3, r3, #1
 800b7e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800b7e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <f_getfree+0x12c>
 800b7f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1e5      	bne.n	800b7c8 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800b7fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7fe:	3301      	adds	r3, #1
 800b800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b804:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800b806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1c2      	bne.n	800b792 <f_getfree+0xc2>
 800b80c:	e04f      	b.n	800b8ae <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b80e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b810:	69db      	ldr	r3, [r3, #28]
 800b812:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b818:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	657b      	str	r3, [r7, #84]	; 0x54
 800b81e:	2300      	movs	r3, #0
 800b820:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800b822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b824:	2b00      	cmp	r3, #0
 800b826:	d113      	bne.n	800b850 <f_getfree+0x180>
							res = move_window(fs, sect++);
 800b828:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b82a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b82c:	1c5a      	adds	r2, r3, #1
 800b82e:	65ba      	str	r2, [r7, #88]	; 0x58
 800b830:	4619      	mov	r1, r3
 800b832:	f7fc fb29 	bl	8007e88 <move_window>
 800b836:	4603      	mov	r3, r0
 800b838:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800b83c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b840:	2b00      	cmp	r3, #0
 800b842:	d133      	bne.n	800b8ac <f_getfree+0x1dc>
							p = fs->win;
 800b844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b846:	3338      	adds	r3, #56	; 0x38
 800b848:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800b84a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b84e:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800b850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	2b02      	cmp	r3, #2
 800b856:	d10f      	bne.n	800b878 <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 800b858:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b85a:	f7fb ff21 	bl	80076a0 <ld_word>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d102      	bne.n	800b86a <f_getfree+0x19a>
 800b864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b866:	3301      	adds	r3, #1
 800b868:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800b86a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b86c:	3302      	adds	r3, #2
 800b86e:	653b      	str	r3, [r7, #80]	; 0x50
 800b870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b872:	3b02      	subs	r3, #2
 800b874:	657b      	str	r3, [r7, #84]	; 0x54
 800b876:	e010      	b.n	800b89a <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b878:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b87a:	f7fb ff29 	bl	80076d0 <ld_dword>
 800b87e:	4603      	mov	r3, r0
 800b880:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b884:	2b00      	cmp	r3, #0
 800b886:	d102      	bne.n	800b88e <f_getfree+0x1be>
 800b888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b88a:	3301      	adds	r3, #1
 800b88c:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800b88e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b890:	3304      	adds	r3, #4
 800b892:	653b      	str	r3, [r7, #80]	; 0x50
 800b894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b896:	3b04      	subs	r3, #4
 800b898:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800b89a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b89c:	3b01      	subs	r3, #1
 800b89e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1bd      	bne.n	800b822 <f_getfree+0x152>
 800b8a6:	e002      	b.n	800b8ae <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800b8a8:	bf00      	nop
 800b8aa:	e000      	b.n	800b8ae <f_getfree+0x1de>
							if (res != FR_OK) break;
 800b8ac:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8b2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8b8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8bc:	791a      	ldrb	r2, [r3, #4]
 800b8be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8c0:	f042 0201 	orr.w	r2, r2, #1
 800b8c4:	b2d2      	uxtb	r2, r2
 800b8c6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b8c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3768      	adds	r7, #104	; 0x68
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b8e0:	78fb      	ldrb	r3, [r7, #3]
 800b8e2:	2b0a      	cmp	r3, #10
 800b8e4:	d103      	bne.n	800b8ee <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b8e6:	210d      	movs	r1, #13
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7ff fff3 	bl	800b8d4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	db25      	blt.n	800b946 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	1c5a      	adds	r2, r3, #1
 800b8fe:	60fa      	str	r2, [r7, #12]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	4413      	add	r3, r2
 800b904:	78fa      	ldrb	r2, [r7, #3]
 800b906:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2b3c      	cmp	r3, #60	; 0x3c
 800b90c:	dd12      	ble.n	800b934 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6818      	ldr	r0, [r3, #0]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f103 010c 	add.w	r1, r3, #12
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	f107 0308 	add.w	r3, r7, #8
 800b91e:	f7ff fbd6 	bl	800b0ce <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	429a      	cmp	r2, r3
 800b928:	d101      	bne.n	800b92e <putc_bfd+0x5a>
 800b92a:	2300      	movs	r3, #0
 800b92c:	e001      	b.n	800b932 <putc_bfd+0x5e>
 800b92e:	f04f 33ff 	mov.w	r3, #4294967295
 800b932:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	1c5a      	adds	r2, r3, #1
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	609a      	str	r2, [r3, #8]
 800b944:	e000      	b.n	800b948 <putc_bfd+0x74>
	if (i < 0) return;
 800b946:	bf00      	nop
}
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	db16      	blt.n	800b98c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6818      	ldr	r0, [r3, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f103 010c 	add.w	r1, r3, #12
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	461a      	mov	r2, r3
 800b96e:	f107 030c 	add.w	r3, r7, #12
 800b972:	f7ff fbac 	bl	800b0ce <f_write>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d107      	bne.n	800b98c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	4293      	cmp	r3, r2
 800b984:	d102      	bne.n	800b98c <putc_flush+0x3e>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	e001      	b.n	800b990 <putc_flush+0x42>
	return EOF;
 800b98c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	683a      	ldr	r2, [r7, #0]
 800b9a6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	605a      	str	r2, [r3, #4]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	685a      	ldr	r2, [r3, #4]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	609a      	str	r2, [r3, #8]
}
 800b9b6:	bf00      	nop
 800b9b8:	370c      	adds	r7, #12
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
	...

0800b9c4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800b9c4:	b40e      	push	{r1, r2, r3}
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b0a7      	sub	sp, #156	; 0x9c
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800b9ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9d2:	6879      	ldr	r1, [r7, #4]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7ff ffdf 	bl	800b998 <putc_init>

	va_start(arp, fmt);
 800b9da:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b9de:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b9e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b9e4:	1c5a      	adds	r2, r3, #1
 800b9e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b9f0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 81f4 	beq.w	800bde2 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800b9fa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b9fe:	2b25      	cmp	r3, #37	; 0x25
 800ba00:	d008      	beq.n	800ba14 <f_printf+0x50>
			putc_bfd(&pb, c);
 800ba02:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ba06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba0a:	4611      	mov	r1, r2
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7ff ff61 	bl	800b8d4 <putc_bfd>
			continue;
 800ba12:	e1e5      	b.n	800bde0 <f_printf+0x41c>
		}
		w = f = 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800ba20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ba24:	1c5a      	adds	r2, r3, #1
 800ba26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800ba30:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ba34:	2b30      	cmp	r3, #48	; 0x30
 800ba36:	d10b      	bne.n	800ba50 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ba3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800ba4e:	e024      	b.n	800ba9a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800ba50:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ba54:	2b2d      	cmp	r3, #45	; 0x2d
 800ba56:	d120      	bne.n	800ba9a <f_printf+0xd6>
				f = 2; c = *fmt++;
 800ba58:	2302      	movs	r3, #2
 800ba5a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ba5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ba62:	1c5a      	adds	r2, r3, #1
 800ba64:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800ba6e:	e014      	b.n	800ba9a <f_printf+0xd6>
			w = w * 10 + c - '0';
 800ba70:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ba74:	4613      	mov	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	4413      	add	r3, r2
 800ba7a:	005b      	lsls	r3, r3, #1
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ba82:	4413      	add	r3, r2
 800ba84:	3b30      	subs	r3, #48	; 0x30
 800ba86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800ba8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ba8e:	1c5a      	adds	r2, r3, #1
 800ba90:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800ba9a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ba9e:	2b2f      	cmp	r3, #47	; 0x2f
 800baa0:	d903      	bls.n	800baaa <f_printf+0xe6>
 800baa2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800baa6:	2b39      	cmp	r3, #57	; 0x39
 800baa8:	d9e2      	bls.n	800ba70 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800baaa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800baae:	2b6c      	cmp	r3, #108	; 0x6c
 800bab0:	d003      	beq.n	800baba <f_printf+0xf6>
 800bab2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bab6:	2b4c      	cmp	r3, #76	; 0x4c
 800bab8:	d10d      	bne.n	800bad6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800baba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800babe:	f043 0304 	orr.w	r3, r3, #4
 800bac2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800bac6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800baca:	1c5a      	adds	r2, r3, #1
 800bacc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800bad6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bada:	2b00      	cmp	r3, #0
 800badc:	f000 8183 	beq.w	800bde6 <f_printf+0x422>
		d = c;
 800bae0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bae4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800bae8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800baec:	2b60      	cmp	r3, #96	; 0x60
 800baee:	d908      	bls.n	800bb02 <f_printf+0x13e>
 800baf0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800baf4:	2b7a      	cmp	r3, #122	; 0x7a
 800baf6:	d804      	bhi.n	800bb02 <f_printf+0x13e>
 800baf8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bafc:	3b20      	subs	r3, #32
 800bafe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800bb02:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bb06:	3b42      	subs	r3, #66	; 0x42
 800bb08:	2b16      	cmp	r3, #22
 800bb0a:	f200 8098 	bhi.w	800bc3e <f_printf+0x27a>
 800bb0e:	a201      	add	r2, pc, #4	; (adr r2, 800bb14 <f_printf+0x150>)
 800bb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb14:	0800bc1f 	.word	0x0800bc1f
 800bb18:	0800bc07 	.word	0x0800bc07
 800bb1c:	0800bc2f 	.word	0x0800bc2f
 800bb20:	0800bc3f 	.word	0x0800bc3f
 800bb24:	0800bc3f 	.word	0x0800bc3f
 800bb28:	0800bc3f 	.word	0x0800bc3f
 800bb2c:	0800bc3f 	.word	0x0800bc3f
 800bb30:	0800bc3f 	.word	0x0800bc3f
 800bb34:	0800bc3f 	.word	0x0800bc3f
 800bb38:	0800bc3f 	.word	0x0800bc3f
 800bb3c:	0800bc3f 	.word	0x0800bc3f
 800bb40:	0800bc3f 	.word	0x0800bc3f
 800bb44:	0800bc3f 	.word	0x0800bc3f
 800bb48:	0800bc27 	.word	0x0800bc27
 800bb4c:	0800bc3f 	.word	0x0800bc3f
 800bb50:	0800bc3f 	.word	0x0800bc3f
 800bb54:	0800bc3f 	.word	0x0800bc3f
 800bb58:	0800bb71 	.word	0x0800bb71
 800bb5c:	0800bc3f 	.word	0x0800bc3f
 800bb60:	0800bc2f 	.word	0x0800bc2f
 800bb64:	0800bc3f 	.word	0x0800bc3f
 800bb68:	0800bc3f 	.word	0x0800bc3f
 800bb6c:	0800bc37 	.word	0x0800bc37
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800bb70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb72:	1d1a      	adds	r2, r3, #4
 800bb74:	67ba      	str	r2, [r7, #120]	; 0x78
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bb80:	e004      	b.n	800bb8c <f_printf+0x1c8>
 800bb82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb86:	3301      	adds	r3, #1
 800bb88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bb8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bb8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb92:	4413      	add	r3, r2
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1f3      	bne.n	800bb82 <f_printf+0x1be>
			if (!(f & 2)) {
 800bb9a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bb9e:	f003 0302 	and.w	r3, r3, #2
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d11a      	bne.n	800bbdc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800bba6:	e005      	b.n	800bbb4 <f_printf+0x1f0>
 800bba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbac:	2120      	movs	r1, #32
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7ff fe90 	bl	800b8d4 <putc_bfd>
 800bbb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bbbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d8f0      	bhi.n	800bba8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800bbc6:	e009      	b.n	800bbdc <f_printf+0x218>
 800bbc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bbca:	1c5a      	adds	r2, r3, #1
 800bbcc:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bbce:	781a      	ldrb	r2, [r3, #0]
 800bbd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7ff fe7c 	bl	800b8d4 <putc_bfd>
 800bbdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1f1      	bne.n	800bbc8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800bbe4:	e005      	b.n	800bbf2 <f_printf+0x22e>
 800bbe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbea:	2120      	movs	r1, #32
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7ff fe71 	bl	800b8d4 <putc_bfd>
 800bbf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbf6:	1c5a      	adds	r2, r3, #1
 800bbf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bbfc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d8f0      	bhi.n	800bbe6 <f_printf+0x222>
			continue;
 800bc04:	e0ec      	b.n	800bde0 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800bc06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc08:	1d1a      	adds	r2, r3, #4
 800bc0a:	67ba      	str	r2, [r7, #120]	; 0x78
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc14:	4611      	mov	r1, r2
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7ff fe5c 	bl	800b8d4 <putc_bfd>
 800bc1c:	e0e0      	b.n	800bde0 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800bc1e:	2302      	movs	r3, #2
 800bc20:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800bc24:	e014      	b.n	800bc50 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800bc26:	2308      	movs	r3, #8
 800bc28:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800bc2c:	e010      	b.n	800bc50 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800bc2e:	230a      	movs	r3, #10
 800bc30:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800bc34:	e00c      	b.n	800bc50 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800bc36:	2310      	movs	r3, #16
 800bc38:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800bc3c:	e008      	b.n	800bc50 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800bc3e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800bc42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc46:	4611      	mov	r1, r2
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7ff fe43 	bl	800b8d4 <putc_bfd>
 800bc4e:	e0c7      	b.n	800bde0 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800bc50:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bc54:	f003 0304 	and.w	r3, r3, #4
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d004      	beq.n	800bc66 <f_printf+0x2a2>
 800bc5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc5e:	1d1a      	adds	r2, r3, #4
 800bc60:	67ba      	str	r2, [r7, #120]	; 0x78
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	e00c      	b.n	800bc80 <f_printf+0x2bc>
 800bc66:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bc6a:	2b44      	cmp	r3, #68	; 0x44
 800bc6c:	d104      	bne.n	800bc78 <f_printf+0x2b4>
 800bc6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc70:	1d1a      	adds	r2, r3, #4
 800bc72:	67ba      	str	r2, [r7, #120]	; 0x78
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	e003      	b.n	800bc80 <f_printf+0x2bc>
 800bc78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc7a:	1d1a      	adds	r2, r3, #4
 800bc7c:	67ba      	str	r2, [r7, #120]	; 0x78
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800bc84:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bc88:	2b44      	cmp	r3, #68	; 0x44
 800bc8a:	d10e      	bne.n	800bcaa <f_printf+0x2e6>
 800bc8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	da0a      	bge.n	800bcaa <f_printf+0x2e6>
			v = 0 - v;
 800bc94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc98:	425b      	negs	r3, r3
 800bc9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800bc9e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bca2:	f043 0308 	orr.w	r3, r3, #8
 800bca6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800bcb0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800bcb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bcb8:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcbc:	fb02 f201 	mul.w	r2, r2, r1
 800bcc0:	1a9b      	subs	r3, r3, r2
 800bcc2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800bcc6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800bcca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bcce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800bcd6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bcda:	2b09      	cmp	r3, #9
 800bcdc:	d90b      	bls.n	800bcf6 <f_printf+0x332>
 800bcde:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bce2:	2b78      	cmp	r3, #120	; 0x78
 800bce4:	d101      	bne.n	800bcea <f_printf+0x326>
 800bce6:	2227      	movs	r2, #39	; 0x27
 800bce8:	e000      	b.n	800bcec <f_printf+0x328>
 800bcea:	2207      	movs	r2, #7
 800bcec:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bcf0:	4413      	add	r3, r2
 800bcf2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800bcf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bcfa:	1c5a      	adds	r2, r3, #1
 800bcfc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800bd00:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800bd04:	3230      	adds	r2, #48	; 0x30
 800bd06:	b2d2      	uxtb	r2, r2
 800bd08:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800bd0c:	440b      	add	r3, r1
 800bd0e:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800bd12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d003      	beq.n	800bd22 <f_printf+0x35e>
 800bd1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd1e:	2b1f      	cmp	r3, #31
 800bd20:	d9c6      	bls.n	800bcb0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800bd22:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bd26:	f003 0308 	and.w	r3, r3, #8
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00a      	beq.n	800bd44 <f_printf+0x380>
 800bd2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd32:	1c5a      	adds	r2, r3, #1
 800bd34:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800bd38:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800bd3c:	4413      	add	r3, r2
 800bd3e:	222d      	movs	r2, #45	; 0x2d
 800bd40:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800bd44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bd4c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d001      	beq.n	800bd5c <f_printf+0x398>
 800bd58:	2330      	movs	r3, #48	; 0x30
 800bd5a:	e000      	b.n	800bd5e <f_printf+0x39a>
 800bd5c:	2320      	movs	r3, #32
 800bd5e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800bd62:	e007      	b.n	800bd74 <f_printf+0x3b0>
 800bd64:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800bd68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7ff fdb0 	bl	800b8d4 <putc_bfd>
 800bd74:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bd78:	f003 0302 	and.w	r3, r3, #2
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d108      	bne.n	800bd92 <f_printf+0x3ce>
 800bd80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd84:	1c5a      	adds	r2, r3, #1
 800bd86:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bd8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d8e8      	bhi.n	800bd64 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800bd92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd96:	3b01      	subs	r3, #1
 800bd98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd9c:	f107 020c 	add.w	r2, r7, #12
 800bda0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bda4:	4413      	add	r3, r2
 800bda6:	781a      	ldrb	r2, [r3, #0]
 800bda8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bdac:	4611      	mov	r1, r2
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7ff fd90 	bl	800b8d4 <putc_bfd>
		} while (i);
 800bdb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1ea      	bne.n	800bd92 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800bdbc:	e007      	b.n	800bdce <f_printf+0x40a>
 800bdbe:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800bdc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7ff fd83 	bl	800b8d4 <putc_bfd>
 800bdce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdd2:	1c5a      	adds	r2, r3, #1
 800bdd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bdd8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d8ee      	bhi.n	800bdbe <f_printf+0x3fa>
		c = *fmt++;
 800bde0:	e5fe      	b.n	800b9e0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800bde2:	bf00      	nop
 800bde4:	e000      	b.n	800bde8 <f_printf+0x424>
		if (!c) break;
 800bde6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800bde8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7ff fdae 	bl	800b94e <putc_flush>
 800bdf2:	4603      	mov	r3, r0
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	379c      	adds	r7, #156	; 0x9c
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bdfe:	b003      	add	sp, #12
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop

0800be04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800be04:	b480      	push	{r7}
 800be06:	b087      	sub	sp, #28
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	4613      	mov	r3, r2
 800be10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800be12:	2301      	movs	r3, #1
 800be14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800be1a:	4b1f      	ldr	r3, [pc, #124]	; (800be98 <FATFS_LinkDriverEx+0x94>)
 800be1c:	7a5b      	ldrb	r3, [r3, #9]
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2b00      	cmp	r3, #0
 800be22:	d131      	bne.n	800be88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800be24:	4b1c      	ldr	r3, [pc, #112]	; (800be98 <FATFS_LinkDriverEx+0x94>)
 800be26:	7a5b      	ldrb	r3, [r3, #9]
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	461a      	mov	r2, r3
 800be2c:	4b1a      	ldr	r3, [pc, #104]	; (800be98 <FATFS_LinkDriverEx+0x94>)
 800be2e:	2100      	movs	r1, #0
 800be30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800be32:	4b19      	ldr	r3, [pc, #100]	; (800be98 <FATFS_LinkDriverEx+0x94>)
 800be34:	7a5b      	ldrb	r3, [r3, #9]
 800be36:	b2db      	uxtb	r3, r3
 800be38:	4a17      	ldr	r2, [pc, #92]	; (800be98 <FATFS_LinkDriverEx+0x94>)
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800be42:	4b15      	ldr	r3, [pc, #84]	; (800be98 <FATFS_LinkDriverEx+0x94>)
 800be44:	7a5b      	ldrb	r3, [r3, #9]
 800be46:	b2db      	uxtb	r3, r3
 800be48:	461a      	mov	r2, r3
 800be4a:	4b13      	ldr	r3, [pc, #76]	; (800be98 <FATFS_LinkDriverEx+0x94>)
 800be4c:	4413      	add	r3, r2
 800be4e:	79fa      	ldrb	r2, [r7, #7]
 800be50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800be52:	4b11      	ldr	r3, [pc, #68]	; (800be98 <FATFS_LinkDriverEx+0x94>)
 800be54:	7a5b      	ldrb	r3, [r3, #9]
 800be56:	b2db      	uxtb	r3, r3
 800be58:	1c5a      	adds	r2, r3, #1
 800be5a:	b2d1      	uxtb	r1, r2
 800be5c:	4a0e      	ldr	r2, [pc, #56]	; (800be98 <FATFS_LinkDriverEx+0x94>)
 800be5e:	7251      	strb	r1, [r2, #9]
 800be60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800be62:	7dbb      	ldrb	r3, [r7, #22]
 800be64:	3330      	adds	r3, #48	; 0x30
 800be66:	b2da      	uxtb	r2, r3
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	3301      	adds	r3, #1
 800be70:	223a      	movs	r2, #58	; 0x3a
 800be72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	3302      	adds	r3, #2
 800be78:	222f      	movs	r2, #47	; 0x2f
 800be7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	3303      	adds	r3, #3
 800be80:	2200      	movs	r2, #0
 800be82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800be84:	2300      	movs	r3, #0
 800be86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800be88:	7dfb      	ldrb	r3, [r7, #23]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	371c      	adds	r7, #28
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	20000b4c 	.word	0x20000b4c

0800be9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bea6:	2200      	movs	r2, #0
 800bea8:	6839      	ldr	r1, [r7, #0]
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7ff ffaa 	bl	800be04 <FATFS_LinkDriverEx>
 800beb0:	4603      	mov	r3, r0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
	...

0800bebc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	4603      	mov	r3, r0
 800bec4:	6039      	str	r1, [r7, #0]
 800bec6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bec8:	88fb      	ldrh	r3, [r7, #6]
 800beca:	2b7f      	cmp	r3, #127	; 0x7f
 800becc:	d802      	bhi.n	800bed4 <ff_convert+0x18>
		c = chr;
 800bece:	88fb      	ldrh	r3, [r7, #6]
 800bed0:	81fb      	strh	r3, [r7, #14]
 800bed2:	e025      	b.n	800bf20 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00b      	beq.n	800bef2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800beda:	88fb      	ldrh	r3, [r7, #6]
 800bedc:	2bff      	cmp	r3, #255	; 0xff
 800bede:	d805      	bhi.n	800beec <ff_convert+0x30>
 800bee0:	88fb      	ldrh	r3, [r7, #6]
 800bee2:	3b80      	subs	r3, #128	; 0x80
 800bee4:	4a12      	ldr	r2, [pc, #72]	; (800bf30 <ff_convert+0x74>)
 800bee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beea:	e000      	b.n	800beee <ff_convert+0x32>
 800beec:	2300      	movs	r3, #0
 800beee:	81fb      	strh	r3, [r7, #14]
 800bef0:	e016      	b.n	800bf20 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bef2:	2300      	movs	r3, #0
 800bef4:	81fb      	strh	r3, [r7, #14]
 800bef6:	e009      	b.n	800bf0c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bef8:	89fb      	ldrh	r3, [r7, #14]
 800befa:	4a0d      	ldr	r2, [pc, #52]	; (800bf30 <ff_convert+0x74>)
 800befc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf00:	88fa      	ldrh	r2, [r7, #6]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d006      	beq.n	800bf14 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bf06:	89fb      	ldrh	r3, [r7, #14]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	81fb      	strh	r3, [r7, #14]
 800bf0c:	89fb      	ldrh	r3, [r7, #14]
 800bf0e:	2b7f      	cmp	r3, #127	; 0x7f
 800bf10:	d9f2      	bls.n	800bef8 <ff_convert+0x3c>
 800bf12:	e000      	b.n	800bf16 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bf14:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bf16:	89fb      	ldrh	r3, [r7, #14]
 800bf18:	3380      	adds	r3, #128	; 0x80
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bf20:	89fb      	ldrh	r3, [r7, #14]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	0800ed4c 	.word	0x0800ed4c

0800bf34 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b087      	sub	sp, #28
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bf3e:	88fb      	ldrh	r3, [r7, #6]
 800bf40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf44:	d201      	bcs.n	800bf4a <ff_wtoupper+0x16>
 800bf46:	4b3e      	ldr	r3, [pc, #248]	; (800c040 <ff_wtoupper+0x10c>)
 800bf48:	e000      	b.n	800bf4c <ff_wtoupper+0x18>
 800bf4a:	4b3e      	ldr	r3, [pc, #248]	; (800c044 <ff_wtoupper+0x110>)
 800bf4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	1c9a      	adds	r2, r3, #2
 800bf52:	617a      	str	r2, [r7, #20]
 800bf54:	881b      	ldrh	r3, [r3, #0]
 800bf56:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800bf58:	8a7b      	ldrh	r3, [r7, #18]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d068      	beq.n	800c030 <ff_wtoupper+0xfc>
 800bf5e:	88fa      	ldrh	r2, [r7, #6]
 800bf60:	8a7b      	ldrh	r3, [r7, #18]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d364      	bcc.n	800c030 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	1c9a      	adds	r2, r3, #2
 800bf6a:	617a      	str	r2, [r7, #20]
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	823b      	strh	r3, [r7, #16]
 800bf70:	8a3b      	ldrh	r3, [r7, #16]
 800bf72:	0a1b      	lsrs	r3, r3, #8
 800bf74:	81fb      	strh	r3, [r7, #14]
 800bf76:	8a3b      	ldrh	r3, [r7, #16]
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800bf7c:	88fa      	ldrh	r2, [r7, #6]
 800bf7e:	8a79      	ldrh	r1, [r7, #18]
 800bf80:	8a3b      	ldrh	r3, [r7, #16]
 800bf82:	440b      	add	r3, r1
 800bf84:	429a      	cmp	r2, r3
 800bf86:	da49      	bge.n	800c01c <ff_wtoupper+0xe8>
			switch (cmd) {
 800bf88:	89fb      	ldrh	r3, [r7, #14]
 800bf8a:	2b08      	cmp	r3, #8
 800bf8c:	d84f      	bhi.n	800c02e <ff_wtoupper+0xfa>
 800bf8e:	a201      	add	r2, pc, #4	; (adr r2, 800bf94 <ff_wtoupper+0x60>)
 800bf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf94:	0800bfb9 	.word	0x0800bfb9
 800bf98:	0800bfcb 	.word	0x0800bfcb
 800bf9c:	0800bfe1 	.word	0x0800bfe1
 800bfa0:	0800bfe9 	.word	0x0800bfe9
 800bfa4:	0800bff1 	.word	0x0800bff1
 800bfa8:	0800bff9 	.word	0x0800bff9
 800bfac:	0800c001 	.word	0x0800c001
 800bfb0:	0800c009 	.word	0x0800c009
 800bfb4:	0800c011 	.word	0x0800c011
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bfb8:	88fa      	ldrh	r2, [r7, #6]
 800bfba:	8a7b      	ldrh	r3, [r7, #18]
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	005b      	lsls	r3, r3, #1
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	80fb      	strh	r3, [r7, #6]
 800bfc8:	e027      	b.n	800c01a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800bfca:	88fa      	ldrh	r2, [r7, #6]
 800bfcc:	8a7b      	ldrh	r3, [r7, #18]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	f003 0301 	and.w	r3, r3, #1
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	88fa      	ldrh	r2, [r7, #6]
 800bfda:	1ad3      	subs	r3, r2, r3
 800bfdc:	80fb      	strh	r3, [r7, #6]
 800bfde:	e01c      	b.n	800c01a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800bfe0:	88fb      	ldrh	r3, [r7, #6]
 800bfe2:	3b10      	subs	r3, #16
 800bfe4:	80fb      	strh	r3, [r7, #6]
 800bfe6:	e018      	b.n	800c01a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800bfe8:	88fb      	ldrh	r3, [r7, #6]
 800bfea:	3b20      	subs	r3, #32
 800bfec:	80fb      	strh	r3, [r7, #6]
 800bfee:	e014      	b.n	800c01a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bff0:	88fb      	ldrh	r3, [r7, #6]
 800bff2:	3b30      	subs	r3, #48	; 0x30
 800bff4:	80fb      	strh	r3, [r7, #6]
 800bff6:	e010      	b.n	800c01a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bff8:	88fb      	ldrh	r3, [r7, #6]
 800bffa:	3b1a      	subs	r3, #26
 800bffc:	80fb      	strh	r3, [r7, #6]
 800bffe:	e00c      	b.n	800c01a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c000:	88fb      	ldrh	r3, [r7, #6]
 800c002:	3308      	adds	r3, #8
 800c004:	80fb      	strh	r3, [r7, #6]
 800c006:	e008      	b.n	800c01a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c008:	88fb      	ldrh	r3, [r7, #6]
 800c00a:	3b50      	subs	r3, #80	; 0x50
 800c00c:	80fb      	strh	r3, [r7, #6]
 800c00e:	e004      	b.n	800c01a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c010:	88fb      	ldrh	r3, [r7, #6]
 800c012:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c016:	80fb      	strh	r3, [r7, #6]
 800c018:	bf00      	nop
			}
			break;
 800c01a:	e008      	b.n	800c02e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c01c:	89fb      	ldrh	r3, [r7, #14]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d195      	bne.n	800bf4e <ff_wtoupper+0x1a>
 800c022:	8a3b      	ldrh	r3, [r7, #16]
 800c024:	005b      	lsls	r3, r3, #1
 800c026:	697a      	ldr	r2, [r7, #20]
 800c028:	4413      	add	r3, r2
 800c02a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c02c:	e78f      	b.n	800bf4e <ff_wtoupper+0x1a>
			break;
 800c02e:	bf00      	nop
	}

	return chr;
 800c030:	88fb      	ldrh	r3, [r7, #6]
}
 800c032:	4618      	mov	r0, r3
 800c034:	371c      	adds	r7, #28
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	0800ee4c 	.word	0x0800ee4c
 800c044:	0800f040 	.word	0x0800f040

0800c048 <__errno>:
 800c048:	4b01      	ldr	r3, [pc, #4]	; (800c050 <__errno+0x8>)
 800c04a:	6818      	ldr	r0, [r3, #0]
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	2000001c 	.word	0x2000001c

0800c054 <__libc_init_array>:
 800c054:	b570      	push	{r4, r5, r6, lr}
 800c056:	4d0d      	ldr	r5, [pc, #52]	; (800c08c <__libc_init_array+0x38>)
 800c058:	4c0d      	ldr	r4, [pc, #52]	; (800c090 <__libc_init_array+0x3c>)
 800c05a:	1b64      	subs	r4, r4, r5
 800c05c:	10a4      	asrs	r4, r4, #2
 800c05e:	2600      	movs	r6, #0
 800c060:	42a6      	cmp	r6, r4
 800c062:	d109      	bne.n	800c078 <__libc_init_array+0x24>
 800c064:	4d0b      	ldr	r5, [pc, #44]	; (800c094 <__libc_init_array+0x40>)
 800c066:	4c0c      	ldr	r4, [pc, #48]	; (800c098 <__libc_init_array+0x44>)
 800c068:	f002 fd80 	bl	800eb6c <_init>
 800c06c:	1b64      	subs	r4, r4, r5
 800c06e:	10a4      	asrs	r4, r4, #2
 800c070:	2600      	movs	r6, #0
 800c072:	42a6      	cmp	r6, r4
 800c074:	d105      	bne.n	800c082 <__libc_init_array+0x2e>
 800c076:	bd70      	pop	{r4, r5, r6, pc}
 800c078:	f855 3b04 	ldr.w	r3, [r5], #4
 800c07c:	4798      	blx	r3
 800c07e:	3601      	adds	r6, #1
 800c080:	e7ee      	b.n	800c060 <__libc_init_array+0xc>
 800c082:	f855 3b04 	ldr.w	r3, [r5], #4
 800c086:	4798      	blx	r3
 800c088:	3601      	adds	r6, #1
 800c08a:	e7f2      	b.n	800c072 <__libc_init_array+0x1e>
 800c08c:	0800f4e4 	.word	0x0800f4e4
 800c090:	0800f4e4 	.word	0x0800f4e4
 800c094:	0800f4e4 	.word	0x0800f4e4
 800c098:	0800f4e8 	.word	0x0800f4e8

0800c09c <memset>:
 800c09c:	4402      	add	r2, r0
 800c09e:	4603      	mov	r3, r0
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d100      	bne.n	800c0a6 <memset+0xa>
 800c0a4:	4770      	bx	lr
 800c0a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c0aa:	e7f9      	b.n	800c0a0 <memset+0x4>

0800c0ac <__cvt>:
 800c0ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b0:	ec55 4b10 	vmov	r4, r5, d0
 800c0b4:	2d00      	cmp	r5, #0
 800c0b6:	460e      	mov	r6, r1
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	462b      	mov	r3, r5
 800c0bc:	bfbb      	ittet	lt
 800c0be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c0c2:	461d      	movlt	r5, r3
 800c0c4:	2300      	movge	r3, #0
 800c0c6:	232d      	movlt	r3, #45	; 0x2d
 800c0c8:	700b      	strb	r3, [r1, #0]
 800c0ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c0d0:	4691      	mov	r9, r2
 800c0d2:	f023 0820 	bic.w	r8, r3, #32
 800c0d6:	bfbc      	itt	lt
 800c0d8:	4622      	movlt	r2, r4
 800c0da:	4614      	movlt	r4, r2
 800c0dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0e0:	d005      	beq.n	800c0ee <__cvt+0x42>
 800c0e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c0e6:	d100      	bne.n	800c0ea <__cvt+0x3e>
 800c0e8:	3601      	adds	r6, #1
 800c0ea:	2102      	movs	r1, #2
 800c0ec:	e000      	b.n	800c0f0 <__cvt+0x44>
 800c0ee:	2103      	movs	r1, #3
 800c0f0:	ab03      	add	r3, sp, #12
 800c0f2:	9301      	str	r3, [sp, #4]
 800c0f4:	ab02      	add	r3, sp, #8
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	ec45 4b10 	vmov	d0, r4, r5
 800c0fc:	4653      	mov	r3, sl
 800c0fe:	4632      	mov	r2, r6
 800c100:	f000 fe1a 	bl	800cd38 <_dtoa_r>
 800c104:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c108:	4607      	mov	r7, r0
 800c10a:	d102      	bne.n	800c112 <__cvt+0x66>
 800c10c:	f019 0f01 	tst.w	r9, #1
 800c110:	d022      	beq.n	800c158 <__cvt+0xac>
 800c112:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c116:	eb07 0906 	add.w	r9, r7, r6
 800c11a:	d110      	bne.n	800c13e <__cvt+0x92>
 800c11c:	783b      	ldrb	r3, [r7, #0]
 800c11e:	2b30      	cmp	r3, #48	; 0x30
 800c120:	d10a      	bne.n	800c138 <__cvt+0x8c>
 800c122:	2200      	movs	r2, #0
 800c124:	2300      	movs	r3, #0
 800c126:	4620      	mov	r0, r4
 800c128:	4629      	mov	r1, r5
 800c12a:	f7f4 fcd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c12e:	b918      	cbnz	r0, 800c138 <__cvt+0x8c>
 800c130:	f1c6 0601 	rsb	r6, r6, #1
 800c134:	f8ca 6000 	str.w	r6, [sl]
 800c138:	f8da 3000 	ldr.w	r3, [sl]
 800c13c:	4499      	add	r9, r3
 800c13e:	2200      	movs	r2, #0
 800c140:	2300      	movs	r3, #0
 800c142:	4620      	mov	r0, r4
 800c144:	4629      	mov	r1, r5
 800c146:	f7f4 fcc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800c14a:	b108      	cbz	r0, 800c150 <__cvt+0xa4>
 800c14c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c150:	2230      	movs	r2, #48	; 0x30
 800c152:	9b03      	ldr	r3, [sp, #12]
 800c154:	454b      	cmp	r3, r9
 800c156:	d307      	bcc.n	800c168 <__cvt+0xbc>
 800c158:	9b03      	ldr	r3, [sp, #12]
 800c15a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c15c:	1bdb      	subs	r3, r3, r7
 800c15e:	4638      	mov	r0, r7
 800c160:	6013      	str	r3, [r2, #0]
 800c162:	b004      	add	sp, #16
 800c164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c168:	1c59      	adds	r1, r3, #1
 800c16a:	9103      	str	r1, [sp, #12]
 800c16c:	701a      	strb	r2, [r3, #0]
 800c16e:	e7f0      	b.n	800c152 <__cvt+0xa6>

0800c170 <__exponent>:
 800c170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c172:	4603      	mov	r3, r0
 800c174:	2900      	cmp	r1, #0
 800c176:	bfb8      	it	lt
 800c178:	4249      	neglt	r1, r1
 800c17a:	f803 2b02 	strb.w	r2, [r3], #2
 800c17e:	bfb4      	ite	lt
 800c180:	222d      	movlt	r2, #45	; 0x2d
 800c182:	222b      	movge	r2, #43	; 0x2b
 800c184:	2909      	cmp	r1, #9
 800c186:	7042      	strb	r2, [r0, #1]
 800c188:	dd2a      	ble.n	800c1e0 <__exponent+0x70>
 800c18a:	f10d 0407 	add.w	r4, sp, #7
 800c18e:	46a4      	mov	ip, r4
 800c190:	270a      	movs	r7, #10
 800c192:	46a6      	mov	lr, r4
 800c194:	460a      	mov	r2, r1
 800c196:	fb91 f6f7 	sdiv	r6, r1, r7
 800c19a:	fb07 1516 	mls	r5, r7, r6, r1
 800c19e:	3530      	adds	r5, #48	; 0x30
 800c1a0:	2a63      	cmp	r2, #99	; 0x63
 800c1a2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c1a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	dcf1      	bgt.n	800c192 <__exponent+0x22>
 800c1ae:	3130      	adds	r1, #48	; 0x30
 800c1b0:	f1ae 0502 	sub.w	r5, lr, #2
 800c1b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c1b8:	1c44      	adds	r4, r0, #1
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	4561      	cmp	r1, ip
 800c1be:	d30a      	bcc.n	800c1d6 <__exponent+0x66>
 800c1c0:	f10d 0209 	add.w	r2, sp, #9
 800c1c4:	eba2 020e 	sub.w	r2, r2, lr
 800c1c8:	4565      	cmp	r5, ip
 800c1ca:	bf88      	it	hi
 800c1cc:	2200      	movhi	r2, #0
 800c1ce:	4413      	add	r3, r2
 800c1d0:	1a18      	subs	r0, r3, r0
 800c1d2:	b003      	add	sp, #12
 800c1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1da:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c1de:	e7ed      	b.n	800c1bc <__exponent+0x4c>
 800c1e0:	2330      	movs	r3, #48	; 0x30
 800c1e2:	3130      	adds	r1, #48	; 0x30
 800c1e4:	7083      	strb	r3, [r0, #2]
 800c1e6:	70c1      	strb	r1, [r0, #3]
 800c1e8:	1d03      	adds	r3, r0, #4
 800c1ea:	e7f1      	b.n	800c1d0 <__exponent+0x60>

0800c1ec <_printf_float>:
 800c1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f0:	ed2d 8b02 	vpush	{d8}
 800c1f4:	b08d      	sub	sp, #52	; 0x34
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c1fc:	4616      	mov	r6, r2
 800c1fe:	461f      	mov	r7, r3
 800c200:	4605      	mov	r5, r0
 800c202:	f001 fd3d 	bl	800dc80 <_localeconv_r>
 800c206:	f8d0 a000 	ldr.w	sl, [r0]
 800c20a:	4650      	mov	r0, sl
 800c20c:	f7f3 ffe8 	bl	80001e0 <strlen>
 800c210:	2300      	movs	r3, #0
 800c212:	930a      	str	r3, [sp, #40]	; 0x28
 800c214:	6823      	ldr	r3, [r4, #0]
 800c216:	9305      	str	r3, [sp, #20]
 800c218:	f8d8 3000 	ldr.w	r3, [r8]
 800c21c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c220:	3307      	adds	r3, #7
 800c222:	f023 0307 	bic.w	r3, r3, #7
 800c226:	f103 0208 	add.w	r2, r3, #8
 800c22a:	f8c8 2000 	str.w	r2, [r8]
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c236:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c23a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c23e:	9307      	str	r3, [sp, #28]
 800c240:	f8cd 8018 	str.w	r8, [sp, #24]
 800c244:	ee08 0a10 	vmov	s16, r0
 800c248:	4b9f      	ldr	r3, [pc, #636]	; (800c4c8 <_printf_float+0x2dc>)
 800c24a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c24e:	f04f 32ff 	mov.w	r2, #4294967295
 800c252:	f7f4 fc73 	bl	8000b3c <__aeabi_dcmpun>
 800c256:	bb88      	cbnz	r0, 800c2bc <_printf_float+0xd0>
 800c258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c25c:	4b9a      	ldr	r3, [pc, #616]	; (800c4c8 <_printf_float+0x2dc>)
 800c25e:	f04f 32ff 	mov.w	r2, #4294967295
 800c262:	f7f4 fc4d 	bl	8000b00 <__aeabi_dcmple>
 800c266:	bb48      	cbnz	r0, 800c2bc <_printf_float+0xd0>
 800c268:	2200      	movs	r2, #0
 800c26a:	2300      	movs	r3, #0
 800c26c:	4640      	mov	r0, r8
 800c26e:	4649      	mov	r1, r9
 800c270:	f7f4 fc3c 	bl	8000aec <__aeabi_dcmplt>
 800c274:	b110      	cbz	r0, 800c27c <_printf_float+0x90>
 800c276:	232d      	movs	r3, #45	; 0x2d
 800c278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c27c:	4b93      	ldr	r3, [pc, #588]	; (800c4cc <_printf_float+0x2e0>)
 800c27e:	4894      	ldr	r0, [pc, #592]	; (800c4d0 <_printf_float+0x2e4>)
 800c280:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c284:	bf94      	ite	ls
 800c286:	4698      	movls	r8, r3
 800c288:	4680      	movhi	r8, r0
 800c28a:	2303      	movs	r3, #3
 800c28c:	6123      	str	r3, [r4, #16]
 800c28e:	9b05      	ldr	r3, [sp, #20]
 800c290:	f023 0204 	bic.w	r2, r3, #4
 800c294:	6022      	str	r2, [r4, #0]
 800c296:	f04f 0900 	mov.w	r9, #0
 800c29a:	9700      	str	r7, [sp, #0]
 800c29c:	4633      	mov	r3, r6
 800c29e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	f000 f9d8 	bl	800c658 <_printf_common>
 800c2a8:	3001      	adds	r0, #1
 800c2aa:	f040 8090 	bne.w	800c3ce <_printf_float+0x1e2>
 800c2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b2:	b00d      	add	sp, #52	; 0x34
 800c2b4:	ecbd 8b02 	vpop	{d8}
 800c2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2bc:	4642      	mov	r2, r8
 800c2be:	464b      	mov	r3, r9
 800c2c0:	4640      	mov	r0, r8
 800c2c2:	4649      	mov	r1, r9
 800c2c4:	f7f4 fc3a 	bl	8000b3c <__aeabi_dcmpun>
 800c2c8:	b140      	cbz	r0, 800c2dc <_printf_float+0xf0>
 800c2ca:	464b      	mov	r3, r9
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	bfbc      	itt	lt
 800c2d0:	232d      	movlt	r3, #45	; 0x2d
 800c2d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c2d6:	487f      	ldr	r0, [pc, #508]	; (800c4d4 <_printf_float+0x2e8>)
 800c2d8:	4b7f      	ldr	r3, [pc, #508]	; (800c4d8 <_printf_float+0x2ec>)
 800c2da:	e7d1      	b.n	800c280 <_printf_float+0x94>
 800c2dc:	6863      	ldr	r3, [r4, #4]
 800c2de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c2e2:	9206      	str	r2, [sp, #24]
 800c2e4:	1c5a      	adds	r2, r3, #1
 800c2e6:	d13f      	bne.n	800c368 <_printf_float+0x17c>
 800c2e8:	2306      	movs	r3, #6
 800c2ea:	6063      	str	r3, [r4, #4]
 800c2ec:	9b05      	ldr	r3, [sp, #20]
 800c2ee:	6861      	ldr	r1, [r4, #4]
 800c2f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	9303      	str	r3, [sp, #12]
 800c2f8:	ab0a      	add	r3, sp, #40	; 0x28
 800c2fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c2fe:	ab09      	add	r3, sp, #36	; 0x24
 800c300:	ec49 8b10 	vmov	d0, r8, r9
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	6022      	str	r2, [r4, #0]
 800c308:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c30c:	4628      	mov	r0, r5
 800c30e:	f7ff fecd 	bl	800c0ac <__cvt>
 800c312:	9b06      	ldr	r3, [sp, #24]
 800c314:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c316:	2b47      	cmp	r3, #71	; 0x47
 800c318:	4680      	mov	r8, r0
 800c31a:	d108      	bne.n	800c32e <_printf_float+0x142>
 800c31c:	1cc8      	adds	r0, r1, #3
 800c31e:	db02      	blt.n	800c326 <_printf_float+0x13a>
 800c320:	6863      	ldr	r3, [r4, #4]
 800c322:	4299      	cmp	r1, r3
 800c324:	dd41      	ble.n	800c3aa <_printf_float+0x1be>
 800c326:	f1ab 0b02 	sub.w	fp, fp, #2
 800c32a:	fa5f fb8b 	uxtb.w	fp, fp
 800c32e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c332:	d820      	bhi.n	800c376 <_printf_float+0x18a>
 800c334:	3901      	subs	r1, #1
 800c336:	465a      	mov	r2, fp
 800c338:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c33c:	9109      	str	r1, [sp, #36]	; 0x24
 800c33e:	f7ff ff17 	bl	800c170 <__exponent>
 800c342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c344:	1813      	adds	r3, r2, r0
 800c346:	2a01      	cmp	r2, #1
 800c348:	4681      	mov	r9, r0
 800c34a:	6123      	str	r3, [r4, #16]
 800c34c:	dc02      	bgt.n	800c354 <_printf_float+0x168>
 800c34e:	6822      	ldr	r2, [r4, #0]
 800c350:	07d2      	lsls	r2, r2, #31
 800c352:	d501      	bpl.n	800c358 <_printf_float+0x16c>
 800c354:	3301      	adds	r3, #1
 800c356:	6123      	str	r3, [r4, #16]
 800c358:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d09c      	beq.n	800c29a <_printf_float+0xae>
 800c360:	232d      	movs	r3, #45	; 0x2d
 800c362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c366:	e798      	b.n	800c29a <_printf_float+0xae>
 800c368:	9a06      	ldr	r2, [sp, #24]
 800c36a:	2a47      	cmp	r2, #71	; 0x47
 800c36c:	d1be      	bne.n	800c2ec <_printf_float+0x100>
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d1bc      	bne.n	800c2ec <_printf_float+0x100>
 800c372:	2301      	movs	r3, #1
 800c374:	e7b9      	b.n	800c2ea <_printf_float+0xfe>
 800c376:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c37a:	d118      	bne.n	800c3ae <_printf_float+0x1c2>
 800c37c:	2900      	cmp	r1, #0
 800c37e:	6863      	ldr	r3, [r4, #4]
 800c380:	dd0b      	ble.n	800c39a <_printf_float+0x1ae>
 800c382:	6121      	str	r1, [r4, #16]
 800c384:	b913      	cbnz	r3, 800c38c <_printf_float+0x1a0>
 800c386:	6822      	ldr	r2, [r4, #0]
 800c388:	07d0      	lsls	r0, r2, #31
 800c38a:	d502      	bpl.n	800c392 <_printf_float+0x1a6>
 800c38c:	3301      	adds	r3, #1
 800c38e:	440b      	add	r3, r1
 800c390:	6123      	str	r3, [r4, #16]
 800c392:	65a1      	str	r1, [r4, #88]	; 0x58
 800c394:	f04f 0900 	mov.w	r9, #0
 800c398:	e7de      	b.n	800c358 <_printf_float+0x16c>
 800c39a:	b913      	cbnz	r3, 800c3a2 <_printf_float+0x1b6>
 800c39c:	6822      	ldr	r2, [r4, #0]
 800c39e:	07d2      	lsls	r2, r2, #31
 800c3a0:	d501      	bpl.n	800c3a6 <_printf_float+0x1ba>
 800c3a2:	3302      	adds	r3, #2
 800c3a4:	e7f4      	b.n	800c390 <_printf_float+0x1a4>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e7f2      	b.n	800c390 <_printf_float+0x1a4>
 800c3aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3b0:	4299      	cmp	r1, r3
 800c3b2:	db05      	blt.n	800c3c0 <_printf_float+0x1d4>
 800c3b4:	6823      	ldr	r3, [r4, #0]
 800c3b6:	6121      	str	r1, [r4, #16]
 800c3b8:	07d8      	lsls	r0, r3, #31
 800c3ba:	d5ea      	bpl.n	800c392 <_printf_float+0x1a6>
 800c3bc:	1c4b      	adds	r3, r1, #1
 800c3be:	e7e7      	b.n	800c390 <_printf_float+0x1a4>
 800c3c0:	2900      	cmp	r1, #0
 800c3c2:	bfd4      	ite	le
 800c3c4:	f1c1 0202 	rsble	r2, r1, #2
 800c3c8:	2201      	movgt	r2, #1
 800c3ca:	4413      	add	r3, r2
 800c3cc:	e7e0      	b.n	800c390 <_printf_float+0x1a4>
 800c3ce:	6823      	ldr	r3, [r4, #0]
 800c3d0:	055a      	lsls	r2, r3, #21
 800c3d2:	d407      	bmi.n	800c3e4 <_printf_float+0x1f8>
 800c3d4:	6923      	ldr	r3, [r4, #16]
 800c3d6:	4642      	mov	r2, r8
 800c3d8:	4631      	mov	r1, r6
 800c3da:	4628      	mov	r0, r5
 800c3dc:	47b8      	blx	r7
 800c3de:	3001      	adds	r0, #1
 800c3e0:	d12c      	bne.n	800c43c <_printf_float+0x250>
 800c3e2:	e764      	b.n	800c2ae <_printf_float+0xc2>
 800c3e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c3e8:	f240 80e0 	bls.w	800c5ac <_printf_float+0x3c0>
 800c3ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	f7f4 fb70 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d034      	beq.n	800c466 <_printf_float+0x27a>
 800c3fc:	4a37      	ldr	r2, [pc, #220]	; (800c4dc <_printf_float+0x2f0>)
 800c3fe:	2301      	movs	r3, #1
 800c400:	4631      	mov	r1, r6
 800c402:	4628      	mov	r0, r5
 800c404:	47b8      	blx	r7
 800c406:	3001      	adds	r0, #1
 800c408:	f43f af51 	beq.w	800c2ae <_printf_float+0xc2>
 800c40c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c410:	429a      	cmp	r2, r3
 800c412:	db02      	blt.n	800c41a <_printf_float+0x22e>
 800c414:	6823      	ldr	r3, [r4, #0]
 800c416:	07d8      	lsls	r0, r3, #31
 800c418:	d510      	bpl.n	800c43c <_printf_float+0x250>
 800c41a:	ee18 3a10 	vmov	r3, s16
 800c41e:	4652      	mov	r2, sl
 800c420:	4631      	mov	r1, r6
 800c422:	4628      	mov	r0, r5
 800c424:	47b8      	blx	r7
 800c426:	3001      	adds	r0, #1
 800c428:	f43f af41 	beq.w	800c2ae <_printf_float+0xc2>
 800c42c:	f04f 0800 	mov.w	r8, #0
 800c430:	f104 091a 	add.w	r9, r4, #26
 800c434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c436:	3b01      	subs	r3, #1
 800c438:	4543      	cmp	r3, r8
 800c43a:	dc09      	bgt.n	800c450 <_printf_float+0x264>
 800c43c:	6823      	ldr	r3, [r4, #0]
 800c43e:	079b      	lsls	r3, r3, #30
 800c440:	f100 8105 	bmi.w	800c64e <_printf_float+0x462>
 800c444:	68e0      	ldr	r0, [r4, #12]
 800c446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c448:	4298      	cmp	r0, r3
 800c44a:	bfb8      	it	lt
 800c44c:	4618      	movlt	r0, r3
 800c44e:	e730      	b.n	800c2b2 <_printf_float+0xc6>
 800c450:	2301      	movs	r3, #1
 800c452:	464a      	mov	r2, r9
 800c454:	4631      	mov	r1, r6
 800c456:	4628      	mov	r0, r5
 800c458:	47b8      	blx	r7
 800c45a:	3001      	adds	r0, #1
 800c45c:	f43f af27 	beq.w	800c2ae <_printf_float+0xc2>
 800c460:	f108 0801 	add.w	r8, r8, #1
 800c464:	e7e6      	b.n	800c434 <_printf_float+0x248>
 800c466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c468:	2b00      	cmp	r3, #0
 800c46a:	dc39      	bgt.n	800c4e0 <_printf_float+0x2f4>
 800c46c:	4a1b      	ldr	r2, [pc, #108]	; (800c4dc <_printf_float+0x2f0>)
 800c46e:	2301      	movs	r3, #1
 800c470:	4631      	mov	r1, r6
 800c472:	4628      	mov	r0, r5
 800c474:	47b8      	blx	r7
 800c476:	3001      	adds	r0, #1
 800c478:	f43f af19 	beq.w	800c2ae <_printf_float+0xc2>
 800c47c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c480:	4313      	orrs	r3, r2
 800c482:	d102      	bne.n	800c48a <_printf_float+0x29e>
 800c484:	6823      	ldr	r3, [r4, #0]
 800c486:	07d9      	lsls	r1, r3, #31
 800c488:	d5d8      	bpl.n	800c43c <_printf_float+0x250>
 800c48a:	ee18 3a10 	vmov	r3, s16
 800c48e:	4652      	mov	r2, sl
 800c490:	4631      	mov	r1, r6
 800c492:	4628      	mov	r0, r5
 800c494:	47b8      	blx	r7
 800c496:	3001      	adds	r0, #1
 800c498:	f43f af09 	beq.w	800c2ae <_printf_float+0xc2>
 800c49c:	f04f 0900 	mov.w	r9, #0
 800c4a0:	f104 0a1a 	add.w	sl, r4, #26
 800c4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4a6:	425b      	negs	r3, r3
 800c4a8:	454b      	cmp	r3, r9
 800c4aa:	dc01      	bgt.n	800c4b0 <_printf_float+0x2c4>
 800c4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ae:	e792      	b.n	800c3d6 <_printf_float+0x1ea>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	4652      	mov	r2, sl
 800c4b4:	4631      	mov	r1, r6
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	47b8      	blx	r7
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	f43f aef7 	beq.w	800c2ae <_printf_float+0xc2>
 800c4c0:	f109 0901 	add.w	r9, r9, #1
 800c4c4:	e7ee      	b.n	800c4a4 <_printf_float+0x2b8>
 800c4c6:	bf00      	nop
 800c4c8:	7fefffff 	.word	0x7fefffff
 800c4cc:	0800f100 	.word	0x0800f100
 800c4d0:	0800f104 	.word	0x0800f104
 800c4d4:	0800f10c 	.word	0x0800f10c
 800c4d8:	0800f108 	.word	0x0800f108
 800c4dc:	0800f110 	.word	0x0800f110
 800c4e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	bfa8      	it	ge
 800c4e8:	461a      	movge	r2, r3
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	4691      	mov	r9, r2
 800c4ee:	dc37      	bgt.n	800c560 <_printf_float+0x374>
 800c4f0:	f04f 0b00 	mov.w	fp, #0
 800c4f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4f8:	f104 021a 	add.w	r2, r4, #26
 800c4fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4fe:	9305      	str	r3, [sp, #20]
 800c500:	eba3 0309 	sub.w	r3, r3, r9
 800c504:	455b      	cmp	r3, fp
 800c506:	dc33      	bgt.n	800c570 <_printf_float+0x384>
 800c508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c50c:	429a      	cmp	r2, r3
 800c50e:	db3b      	blt.n	800c588 <_printf_float+0x39c>
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	07da      	lsls	r2, r3, #31
 800c514:	d438      	bmi.n	800c588 <_printf_float+0x39c>
 800c516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c518:	9b05      	ldr	r3, [sp, #20]
 800c51a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	eba2 0901 	sub.w	r9, r2, r1
 800c522:	4599      	cmp	r9, r3
 800c524:	bfa8      	it	ge
 800c526:	4699      	movge	r9, r3
 800c528:	f1b9 0f00 	cmp.w	r9, #0
 800c52c:	dc35      	bgt.n	800c59a <_printf_float+0x3ae>
 800c52e:	f04f 0800 	mov.w	r8, #0
 800c532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c536:	f104 0a1a 	add.w	sl, r4, #26
 800c53a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c53e:	1a9b      	subs	r3, r3, r2
 800c540:	eba3 0309 	sub.w	r3, r3, r9
 800c544:	4543      	cmp	r3, r8
 800c546:	f77f af79 	ble.w	800c43c <_printf_float+0x250>
 800c54a:	2301      	movs	r3, #1
 800c54c:	4652      	mov	r2, sl
 800c54e:	4631      	mov	r1, r6
 800c550:	4628      	mov	r0, r5
 800c552:	47b8      	blx	r7
 800c554:	3001      	adds	r0, #1
 800c556:	f43f aeaa 	beq.w	800c2ae <_printf_float+0xc2>
 800c55a:	f108 0801 	add.w	r8, r8, #1
 800c55e:	e7ec      	b.n	800c53a <_printf_float+0x34e>
 800c560:	4613      	mov	r3, r2
 800c562:	4631      	mov	r1, r6
 800c564:	4642      	mov	r2, r8
 800c566:	4628      	mov	r0, r5
 800c568:	47b8      	blx	r7
 800c56a:	3001      	adds	r0, #1
 800c56c:	d1c0      	bne.n	800c4f0 <_printf_float+0x304>
 800c56e:	e69e      	b.n	800c2ae <_printf_float+0xc2>
 800c570:	2301      	movs	r3, #1
 800c572:	4631      	mov	r1, r6
 800c574:	4628      	mov	r0, r5
 800c576:	9205      	str	r2, [sp, #20]
 800c578:	47b8      	blx	r7
 800c57a:	3001      	adds	r0, #1
 800c57c:	f43f ae97 	beq.w	800c2ae <_printf_float+0xc2>
 800c580:	9a05      	ldr	r2, [sp, #20]
 800c582:	f10b 0b01 	add.w	fp, fp, #1
 800c586:	e7b9      	b.n	800c4fc <_printf_float+0x310>
 800c588:	ee18 3a10 	vmov	r3, s16
 800c58c:	4652      	mov	r2, sl
 800c58e:	4631      	mov	r1, r6
 800c590:	4628      	mov	r0, r5
 800c592:	47b8      	blx	r7
 800c594:	3001      	adds	r0, #1
 800c596:	d1be      	bne.n	800c516 <_printf_float+0x32a>
 800c598:	e689      	b.n	800c2ae <_printf_float+0xc2>
 800c59a:	9a05      	ldr	r2, [sp, #20]
 800c59c:	464b      	mov	r3, r9
 800c59e:	4442      	add	r2, r8
 800c5a0:	4631      	mov	r1, r6
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	47b8      	blx	r7
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	d1c1      	bne.n	800c52e <_printf_float+0x342>
 800c5aa:	e680      	b.n	800c2ae <_printf_float+0xc2>
 800c5ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5ae:	2a01      	cmp	r2, #1
 800c5b0:	dc01      	bgt.n	800c5b6 <_printf_float+0x3ca>
 800c5b2:	07db      	lsls	r3, r3, #31
 800c5b4:	d538      	bpl.n	800c628 <_printf_float+0x43c>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	4642      	mov	r2, r8
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	4628      	mov	r0, r5
 800c5be:	47b8      	blx	r7
 800c5c0:	3001      	adds	r0, #1
 800c5c2:	f43f ae74 	beq.w	800c2ae <_printf_float+0xc2>
 800c5c6:	ee18 3a10 	vmov	r3, s16
 800c5ca:	4652      	mov	r2, sl
 800c5cc:	4631      	mov	r1, r6
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	47b8      	blx	r7
 800c5d2:	3001      	adds	r0, #1
 800c5d4:	f43f ae6b 	beq.w	800c2ae <_printf_float+0xc2>
 800c5d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5dc:	2200      	movs	r2, #0
 800c5de:	2300      	movs	r3, #0
 800c5e0:	f7f4 fa7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5e4:	b9d8      	cbnz	r0, 800c61e <_printf_float+0x432>
 800c5e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5e8:	f108 0201 	add.w	r2, r8, #1
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	4631      	mov	r1, r6
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	47b8      	blx	r7
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	d10e      	bne.n	800c616 <_printf_float+0x42a>
 800c5f8:	e659      	b.n	800c2ae <_printf_float+0xc2>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	4652      	mov	r2, sl
 800c5fe:	4631      	mov	r1, r6
 800c600:	4628      	mov	r0, r5
 800c602:	47b8      	blx	r7
 800c604:	3001      	adds	r0, #1
 800c606:	f43f ae52 	beq.w	800c2ae <_printf_float+0xc2>
 800c60a:	f108 0801 	add.w	r8, r8, #1
 800c60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c610:	3b01      	subs	r3, #1
 800c612:	4543      	cmp	r3, r8
 800c614:	dcf1      	bgt.n	800c5fa <_printf_float+0x40e>
 800c616:	464b      	mov	r3, r9
 800c618:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c61c:	e6dc      	b.n	800c3d8 <_printf_float+0x1ec>
 800c61e:	f04f 0800 	mov.w	r8, #0
 800c622:	f104 0a1a 	add.w	sl, r4, #26
 800c626:	e7f2      	b.n	800c60e <_printf_float+0x422>
 800c628:	2301      	movs	r3, #1
 800c62a:	4642      	mov	r2, r8
 800c62c:	e7df      	b.n	800c5ee <_printf_float+0x402>
 800c62e:	2301      	movs	r3, #1
 800c630:	464a      	mov	r2, r9
 800c632:	4631      	mov	r1, r6
 800c634:	4628      	mov	r0, r5
 800c636:	47b8      	blx	r7
 800c638:	3001      	adds	r0, #1
 800c63a:	f43f ae38 	beq.w	800c2ae <_printf_float+0xc2>
 800c63e:	f108 0801 	add.w	r8, r8, #1
 800c642:	68e3      	ldr	r3, [r4, #12]
 800c644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c646:	1a5b      	subs	r3, r3, r1
 800c648:	4543      	cmp	r3, r8
 800c64a:	dcf0      	bgt.n	800c62e <_printf_float+0x442>
 800c64c:	e6fa      	b.n	800c444 <_printf_float+0x258>
 800c64e:	f04f 0800 	mov.w	r8, #0
 800c652:	f104 0919 	add.w	r9, r4, #25
 800c656:	e7f4      	b.n	800c642 <_printf_float+0x456>

0800c658 <_printf_common>:
 800c658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c65c:	4616      	mov	r6, r2
 800c65e:	4699      	mov	r9, r3
 800c660:	688a      	ldr	r2, [r1, #8]
 800c662:	690b      	ldr	r3, [r1, #16]
 800c664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c668:	4293      	cmp	r3, r2
 800c66a:	bfb8      	it	lt
 800c66c:	4613      	movlt	r3, r2
 800c66e:	6033      	str	r3, [r6, #0]
 800c670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c674:	4607      	mov	r7, r0
 800c676:	460c      	mov	r4, r1
 800c678:	b10a      	cbz	r2, 800c67e <_printf_common+0x26>
 800c67a:	3301      	adds	r3, #1
 800c67c:	6033      	str	r3, [r6, #0]
 800c67e:	6823      	ldr	r3, [r4, #0]
 800c680:	0699      	lsls	r1, r3, #26
 800c682:	bf42      	ittt	mi
 800c684:	6833      	ldrmi	r3, [r6, #0]
 800c686:	3302      	addmi	r3, #2
 800c688:	6033      	strmi	r3, [r6, #0]
 800c68a:	6825      	ldr	r5, [r4, #0]
 800c68c:	f015 0506 	ands.w	r5, r5, #6
 800c690:	d106      	bne.n	800c6a0 <_printf_common+0x48>
 800c692:	f104 0a19 	add.w	sl, r4, #25
 800c696:	68e3      	ldr	r3, [r4, #12]
 800c698:	6832      	ldr	r2, [r6, #0]
 800c69a:	1a9b      	subs	r3, r3, r2
 800c69c:	42ab      	cmp	r3, r5
 800c69e:	dc26      	bgt.n	800c6ee <_printf_common+0x96>
 800c6a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c6a4:	1e13      	subs	r3, r2, #0
 800c6a6:	6822      	ldr	r2, [r4, #0]
 800c6a8:	bf18      	it	ne
 800c6aa:	2301      	movne	r3, #1
 800c6ac:	0692      	lsls	r2, r2, #26
 800c6ae:	d42b      	bmi.n	800c708 <_printf_common+0xb0>
 800c6b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6b4:	4649      	mov	r1, r9
 800c6b6:	4638      	mov	r0, r7
 800c6b8:	47c0      	blx	r8
 800c6ba:	3001      	adds	r0, #1
 800c6bc:	d01e      	beq.n	800c6fc <_printf_common+0xa4>
 800c6be:	6823      	ldr	r3, [r4, #0]
 800c6c0:	68e5      	ldr	r5, [r4, #12]
 800c6c2:	6832      	ldr	r2, [r6, #0]
 800c6c4:	f003 0306 	and.w	r3, r3, #6
 800c6c8:	2b04      	cmp	r3, #4
 800c6ca:	bf08      	it	eq
 800c6cc:	1aad      	subeq	r5, r5, r2
 800c6ce:	68a3      	ldr	r3, [r4, #8]
 800c6d0:	6922      	ldr	r2, [r4, #16]
 800c6d2:	bf0c      	ite	eq
 800c6d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6d8:	2500      	movne	r5, #0
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	bfc4      	itt	gt
 800c6de:	1a9b      	subgt	r3, r3, r2
 800c6e0:	18ed      	addgt	r5, r5, r3
 800c6e2:	2600      	movs	r6, #0
 800c6e4:	341a      	adds	r4, #26
 800c6e6:	42b5      	cmp	r5, r6
 800c6e8:	d11a      	bne.n	800c720 <_printf_common+0xc8>
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	e008      	b.n	800c700 <_printf_common+0xa8>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	4652      	mov	r2, sl
 800c6f2:	4649      	mov	r1, r9
 800c6f4:	4638      	mov	r0, r7
 800c6f6:	47c0      	blx	r8
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	d103      	bne.n	800c704 <_printf_common+0xac>
 800c6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c704:	3501      	adds	r5, #1
 800c706:	e7c6      	b.n	800c696 <_printf_common+0x3e>
 800c708:	18e1      	adds	r1, r4, r3
 800c70a:	1c5a      	adds	r2, r3, #1
 800c70c:	2030      	movs	r0, #48	; 0x30
 800c70e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c712:	4422      	add	r2, r4
 800c714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c71c:	3302      	adds	r3, #2
 800c71e:	e7c7      	b.n	800c6b0 <_printf_common+0x58>
 800c720:	2301      	movs	r3, #1
 800c722:	4622      	mov	r2, r4
 800c724:	4649      	mov	r1, r9
 800c726:	4638      	mov	r0, r7
 800c728:	47c0      	blx	r8
 800c72a:	3001      	adds	r0, #1
 800c72c:	d0e6      	beq.n	800c6fc <_printf_common+0xa4>
 800c72e:	3601      	adds	r6, #1
 800c730:	e7d9      	b.n	800c6e6 <_printf_common+0x8e>
	...

0800c734 <_printf_i>:
 800c734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c738:	460c      	mov	r4, r1
 800c73a:	4691      	mov	r9, r2
 800c73c:	7e27      	ldrb	r7, [r4, #24]
 800c73e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c740:	2f78      	cmp	r7, #120	; 0x78
 800c742:	4680      	mov	r8, r0
 800c744:	469a      	mov	sl, r3
 800c746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c74a:	d807      	bhi.n	800c75c <_printf_i+0x28>
 800c74c:	2f62      	cmp	r7, #98	; 0x62
 800c74e:	d80a      	bhi.n	800c766 <_printf_i+0x32>
 800c750:	2f00      	cmp	r7, #0
 800c752:	f000 80d8 	beq.w	800c906 <_printf_i+0x1d2>
 800c756:	2f58      	cmp	r7, #88	; 0x58
 800c758:	f000 80a3 	beq.w	800c8a2 <_printf_i+0x16e>
 800c75c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c764:	e03a      	b.n	800c7dc <_printf_i+0xa8>
 800c766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c76a:	2b15      	cmp	r3, #21
 800c76c:	d8f6      	bhi.n	800c75c <_printf_i+0x28>
 800c76e:	a001      	add	r0, pc, #4	; (adr r0, 800c774 <_printf_i+0x40>)
 800c770:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c774:	0800c7cd 	.word	0x0800c7cd
 800c778:	0800c7e1 	.word	0x0800c7e1
 800c77c:	0800c75d 	.word	0x0800c75d
 800c780:	0800c75d 	.word	0x0800c75d
 800c784:	0800c75d 	.word	0x0800c75d
 800c788:	0800c75d 	.word	0x0800c75d
 800c78c:	0800c7e1 	.word	0x0800c7e1
 800c790:	0800c75d 	.word	0x0800c75d
 800c794:	0800c75d 	.word	0x0800c75d
 800c798:	0800c75d 	.word	0x0800c75d
 800c79c:	0800c75d 	.word	0x0800c75d
 800c7a0:	0800c8ed 	.word	0x0800c8ed
 800c7a4:	0800c811 	.word	0x0800c811
 800c7a8:	0800c8cf 	.word	0x0800c8cf
 800c7ac:	0800c75d 	.word	0x0800c75d
 800c7b0:	0800c75d 	.word	0x0800c75d
 800c7b4:	0800c90f 	.word	0x0800c90f
 800c7b8:	0800c75d 	.word	0x0800c75d
 800c7bc:	0800c811 	.word	0x0800c811
 800c7c0:	0800c75d 	.word	0x0800c75d
 800c7c4:	0800c75d 	.word	0x0800c75d
 800c7c8:	0800c8d7 	.word	0x0800c8d7
 800c7cc:	680b      	ldr	r3, [r1, #0]
 800c7ce:	1d1a      	adds	r2, r3, #4
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	600a      	str	r2, [r1, #0]
 800c7d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c7d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e0a3      	b.n	800c928 <_printf_i+0x1f4>
 800c7e0:	6825      	ldr	r5, [r4, #0]
 800c7e2:	6808      	ldr	r0, [r1, #0]
 800c7e4:	062e      	lsls	r6, r5, #24
 800c7e6:	f100 0304 	add.w	r3, r0, #4
 800c7ea:	d50a      	bpl.n	800c802 <_printf_i+0xce>
 800c7ec:	6805      	ldr	r5, [r0, #0]
 800c7ee:	600b      	str	r3, [r1, #0]
 800c7f0:	2d00      	cmp	r5, #0
 800c7f2:	da03      	bge.n	800c7fc <_printf_i+0xc8>
 800c7f4:	232d      	movs	r3, #45	; 0x2d
 800c7f6:	426d      	negs	r5, r5
 800c7f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7fc:	485e      	ldr	r0, [pc, #376]	; (800c978 <_printf_i+0x244>)
 800c7fe:	230a      	movs	r3, #10
 800c800:	e019      	b.n	800c836 <_printf_i+0x102>
 800c802:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c806:	6805      	ldr	r5, [r0, #0]
 800c808:	600b      	str	r3, [r1, #0]
 800c80a:	bf18      	it	ne
 800c80c:	b22d      	sxthne	r5, r5
 800c80e:	e7ef      	b.n	800c7f0 <_printf_i+0xbc>
 800c810:	680b      	ldr	r3, [r1, #0]
 800c812:	6825      	ldr	r5, [r4, #0]
 800c814:	1d18      	adds	r0, r3, #4
 800c816:	6008      	str	r0, [r1, #0]
 800c818:	0628      	lsls	r0, r5, #24
 800c81a:	d501      	bpl.n	800c820 <_printf_i+0xec>
 800c81c:	681d      	ldr	r5, [r3, #0]
 800c81e:	e002      	b.n	800c826 <_printf_i+0xf2>
 800c820:	0669      	lsls	r1, r5, #25
 800c822:	d5fb      	bpl.n	800c81c <_printf_i+0xe8>
 800c824:	881d      	ldrh	r5, [r3, #0]
 800c826:	4854      	ldr	r0, [pc, #336]	; (800c978 <_printf_i+0x244>)
 800c828:	2f6f      	cmp	r7, #111	; 0x6f
 800c82a:	bf0c      	ite	eq
 800c82c:	2308      	moveq	r3, #8
 800c82e:	230a      	movne	r3, #10
 800c830:	2100      	movs	r1, #0
 800c832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c836:	6866      	ldr	r6, [r4, #4]
 800c838:	60a6      	str	r6, [r4, #8]
 800c83a:	2e00      	cmp	r6, #0
 800c83c:	bfa2      	ittt	ge
 800c83e:	6821      	ldrge	r1, [r4, #0]
 800c840:	f021 0104 	bicge.w	r1, r1, #4
 800c844:	6021      	strge	r1, [r4, #0]
 800c846:	b90d      	cbnz	r5, 800c84c <_printf_i+0x118>
 800c848:	2e00      	cmp	r6, #0
 800c84a:	d04d      	beq.n	800c8e8 <_printf_i+0x1b4>
 800c84c:	4616      	mov	r6, r2
 800c84e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c852:	fb03 5711 	mls	r7, r3, r1, r5
 800c856:	5dc7      	ldrb	r7, [r0, r7]
 800c858:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c85c:	462f      	mov	r7, r5
 800c85e:	42bb      	cmp	r3, r7
 800c860:	460d      	mov	r5, r1
 800c862:	d9f4      	bls.n	800c84e <_printf_i+0x11a>
 800c864:	2b08      	cmp	r3, #8
 800c866:	d10b      	bne.n	800c880 <_printf_i+0x14c>
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	07df      	lsls	r7, r3, #31
 800c86c:	d508      	bpl.n	800c880 <_printf_i+0x14c>
 800c86e:	6923      	ldr	r3, [r4, #16]
 800c870:	6861      	ldr	r1, [r4, #4]
 800c872:	4299      	cmp	r1, r3
 800c874:	bfde      	ittt	le
 800c876:	2330      	movle	r3, #48	; 0x30
 800c878:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c87c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c880:	1b92      	subs	r2, r2, r6
 800c882:	6122      	str	r2, [r4, #16]
 800c884:	f8cd a000 	str.w	sl, [sp]
 800c888:	464b      	mov	r3, r9
 800c88a:	aa03      	add	r2, sp, #12
 800c88c:	4621      	mov	r1, r4
 800c88e:	4640      	mov	r0, r8
 800c890:	f7ff fee2 	bl	800c658 <_printf_common>
 800c894:	3001      	adds	r0, #1
 800c896:	d14c      	bne.n	800c932 <_printf_i+0x1fe>
 800c898:	f04f 30ff 	mov.w	r0, #4294967295
 800c89c:	b004      	add	sp, #16
 800c89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a2:	4835      	ldr	r0, [pc, #212]	; (800c978 <_printf_i+0x244>)
 800c8a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c8a8:	6823      	ldr	r3, [r4, #0]
 800c8aa:	680e      	ldr	r6, [r1, #0]
 800c8ac:	061f      	lsls	r7, r3, #24
 800c8ae:	f856 5b04 	ldr.w	r5, [r6], #4
 800c8b2:	600e      	str	r6, [r1, #0]
 800c8b4:	d514      	bpl.n	800c8e0 <_printf_i+0x1ac>
 800c8b6:	07d9      	lsls	r1, r3, #31
 800c8b8:	bf44      	itt	mi
 800c8ba:	f043 0320 	orrmi.w	r3, r3, #32
 800c8be:	6023      	strmi	r3, [r4, #0]
 800c8c0:	b91d      	cbnz	r5, 800c8ca <_printf_i+0x196>
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	f023 0320 	bic.w	r3, r3, #32
 800c8c8:	6023      	str	r3, [r4, #0]
 800c8ca:	2310      	movs	r3, #16
 800c8cc:	e7b0      	b.n	800c830 <_printf_i+0xfc>
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	f043 0320 	orr.w	r3, r3, #32
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	2378      	movs	r3, #120	; 0x78
 800c8d8:	4828      	ldr	r0, [pc, #160]	; (800c97c <_printf_i+0x248>)
 800c8da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8de:	e7e3      	b.n	800c8a8 <_printf_i+0x174>
 800c8e0:	065e      	lsls	r6, r3, #25
 800c8e2:	bf48      	it	mi
 800c8e4:	b2ad      	uxthmi	r5, r5
 800c8e6:	e7e6      	b.n	800c8b6 <_printf_i+0x182>
 800c8e8:	4616      	mov	r6, r2
 800c8ea:	e7bb      	b.n	800c864 <_printf_i+0x130>
 800c8ec:	680b      	ldr	r3, [r1, #0]
 800c8ee:	6826      	ldr	r6, [r4, #0]
 800c8f0:	6960      	ldr	r0, [r4, #20]
 800c8f2:	1d1d      	adds	r5, r3, #4
 800c8f4:	600d      	str	r5, [r1, #0]
 800c8f6:	0635      	lsls	r5, r6, #24
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	d501      	bpl.n	800c900 <_printf_i+0x1cc>
 800c8fc:	6018      	str	r0, [r3, #0]
 800c8fe:	e002      	b.n	800c906 <_printf_i+0x1d2>
 800c900:	0671      	lsls	r1, r6, #25
 800c902:	d5fb      	bpl.n	800c8fc <_printf_i+0x1c8>
 800c904:	8018      	strh	r0, [r3, #0]
 800c906:	2300      	movs	r3, #0
 800c908:	6123      	str	r3, [r4, #16]
 800c90a:	4616      	mov	r6, r2
 800c90c:	e7ba      	b.n	800c884 <_printf_i+0x150>
 800c90e:	680b      	ldr	r3, [r1, #0]
 800c910:	1d1a      	adds	r2, r3, #4
 800c912:	600a      	str	r2, [r1, #0]
 800c914:	681e      	ldr	r6, [r3, #0]
 800c916:	6862      	ldr	r2, [r4, #4]
 800c918:	2100      	movs	r1, #0
 800c91a:	4630      	mov	r0, r6
 800c91c:	f7f3 fc68 	bl	80001f0 <memchr>
 800c920:	b108      	cbz	r0, 800c926 <_printf_i+0x1f2>
 800c922:	1b80      	subs	r0, r0, r6
 800c924:	6060      	str	r0, [r4, #4]
 800c926:	6863      	ldr	r3, [r4, #4]
 800c928:	6123      	str	r3, [r4, #16]
 800c92a:	2300      	movs	r3, #0
 800c92c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c930:	e7a8      	b.n	800c884 <_printf_i+0x150>
 800c932:	6923      	ldr	r3, [r4, #16]
 800c934:	4632      	mov	r2, r6
 800c936:	4649      	mov	r1, r9
 800c938:	4640      	mov	r0, r8
 800c93a:	47d0      	blx	sl
 800c93c:	3001      	adds	r0, #1
 800c93e:	d0ab      	beq.n	800c898 <_printf_i+0x164>
 800c940:	6823      	ldr	r3, [r4, #0]
 800c942:	079b      	lsls	r3, r3, #30
 800c944:	d413      	bmi.n	800c96e <_printf_i+0x23a>
 800c946:	68e0      	ldr	r0, [r4, #12]
 800c948:	9b03      	ldr	r3, [sp, #12]
 800c94a:	4298      	cmp	r0, r3
 800c94c:	bfb8      	it	lt
 800c94e:	4618      	movlt	r0, r3
 800c950:	e7a4      	b.n	800c89c <_printf_i+0x168>
 800c952:	2301      	movs	r3, #1
 800c954:	4632      	mov	r2, r6
 800c956:	4649      	mov	r1, r9
 800c958:	4640      	mov	r0, r8
 800c95a:	47d0      	blx	sl
 800c95c:	3001      	adds	r0, #1
 800c95e:	d09b      	beq.n	800c898 <_printf_i+0x164>
 800c960:	3501      	adds	r5, #1
 800c962:	68e3      	ldr	r3, [r4, #12]
 800c964:	9903      	ldr	r1, [sp, #12]
 800c966:	1a5b      	subs	r3, r3, r1
 800c968:	42ab      	cmp	r3, r5
 800c96a:	dcf2      	bgt.n	800c952 <_printf_i+0x21e>
 800c96c:	e7eb      	b.n	800c946 <_printf_i+0x212>
 800c96e:	2500      	movs	r5, #0
 800c970:	f104 0619 	add.w	r6, r4, #25
 800c974:	e7f5      	b.n	800c962 <_printf_i+0x22e>
 800c976:	bf00      	nop
 800c978:	0800f112 	.word	0x0800f112
 800c97c:	0800f123 	.word	0x0800f123

0800c980 <iprintf>:
 800c980:	b40f      	push	{r0, r1, r2, r3}
 800c982:	4b0a      	ldr	r3, [pc, #40]	; (800c9ac <iprintf+0x2c>)
 800c984:	b513      	push	{r0, r1, r4, lr}
 800c986:	681c      	ldr	r4, [r3, #0]
 800c988:	b124      	cbz	r4, 800c994 <iprintf+0x14>
 800c98a:	69a3      	ldr	r3, [r4, #24]
 800c98c:	b913      	cbnz	r3, 800c994 <iprintf+0x14>
 800c98e:	4620      	mov	r0, r4
 800c990:	f001 f8d8 	bl	800db44 <__sinit>
 800c994:	ab05      	add	r3, sp, #20
 800c996:	9a04      	ldr	r2, [sp, #16]
 800c998:	68a1      	ldr	r1, [r4, #8]
 800c99a:	9301      	str	r3, [sp, #4]
 800c99c:	4620      	mov	r0, r4
 800c99e:	f001 fe53 	bl	800e648 <_vfiprintf_r>
 800c9a2:	b002      	add	sp, #8
 800c9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9a8:	b004      	add	sp, #16
 800c9aa:	4770      	bx	lr
 800c9ac:	2000001c 	.word	0x2000001c

0800c9b0 <_puts_r>:
 800c9b0:	b570      	push	{r4, r5, r6, lr}
 800c9b2:	460e      	mov	r6, r1
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	b118      	cbz	r0, 800c9c0 <_puts_r+0x10>
 800c9b8:	6983      	ldr	r3, [r0, #24]
 800c9ba:	b90b      	cbnz	r3, 800c9c0 <_puts_r+0x10>
 800c9bc:	f001 f8c2 	bl	800db44 <__sinit>
 800c9c0:	69ab      	ldr	r3, [r5, #24]
 800c9c2:	68ac      	ldr	r4, [r5, #8]
 800c9c4:	b913      	cbnz	r3, 800c9cc <_puts_r+0x1c>
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	f001 f8bc 	bl	800db44 <__sinit>
 800c9cc:	4b2c      	ldr	r3, [pc, #176]	; (800ca80 <_puts_r+0xd0>)
 800c9ce:	429c      	cmp	r4, r3
 800c9d0:	d120      	bne.n	800ca14 <_puts_r+0x64>
 800c9d2:	686c      	ldr	r4, [r5, #4]
 800c9d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9d6:	07db      	lsls	r3, r3, #31
 800c9d8:	d405      	bmi.n	800c9e6 <_puts_r+0x36>
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	0598      	lsls	r0, r3, #22
 800c9de:	d402      	bmi.n	800c9e6 <_puts_r+0x36>
 800c9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9e2:	f001 f952 	bl	800dc8a <__retarget_lock_acquire_recursive>
 800c9e6:	89a3      	ldrh	r3, [r4, #12]
 800c9e8:	0719      	lsls	r1, r3, #28
 800c9ea:	d51d      	bpl.n	800ca28 <_puts_r+0x78>
 800c9ec:	6923      	ldr	r3, [r4, #16]
 800c9ee:	b1db      	cbz	r3, 800ca28 <_puts_r+0x78>
 800c9f0:	3e01      	subs	r6, #1
 800c9f2:	68a3      	ldr	r3, [r4, #8]
 800c9f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	60a3      	str	r3, [r4, #8]
 800c9fc:	bb39      	cbnz	r1, 800ca4e <_puts_r+0x9e>
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	da38      	bge.n	800ca74 <_puts_r+0xc4>
 800ca02:	4622      	mov	r2, r4
 800ca04:	210a      	movs	r1, #10
 800ca06:	4628      	mov	r0, r5
 800ca08:	f000 f848 	bl	800ca9c <__swbuf_r>
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	d011      	beq.n	800ca34 <_puts_r+0x84>
 800ca10:	250a      	movs	r5, #10
 800ca12:	e011      	b.n	800ca38 <_puts_r+0x88>
 800ca14:	4b1b      	ldr	r3, [pc, #108]	; (800ca84 <_puts_r+0xd4>)
 800ca16:	429c      	cmp	r4, r3
 800ca18:	d101      	bne.n	800ca1e <_puts_r+0x6e>
 800ca1a:	68ac      	ldr	r4, [r5, #8]
 800ca1c:	e7da      	b.n	800c9d4 <_puts_r+0x24>
 800ca1e:	4b1a      	ldr	r3, [pc, #104]	; (800ca88 <_puts_r+0xd8>)
 800ca20:	429c      	cmp	r4, r3
 800ca22:	bf08      	it	eq
 800ca24:	68ec      	ldreq	r4, [r5, #12]
 800ca26:	e7d5      	b.n	800c9d4 <_puts_r+0x24>
 800ca28:	4621      	mov	r1, r4
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	f000 f888 	bl	800cb40 <__swsetup_r>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d0dd      	beq.n	800c9f0 <_puts_r+0x40>
 800ca34:	f04f 35ff 	mov.w	r5, #4294967295
 800ca38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca3a:	07da      	lsls	r2, r3, #31
 800ca3c:	d405      	bmi.n	800ca4a <_puts_r+0x9a>
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	059b      	lsls	r3, r3, #22
 800ca42:	d402      	bmi.n	800ca4a <_puts_r+0x9a>
 800ca44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca46:	f001 f921 	bl	800dc8c <__retarget_lock_release_recursive>
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	bd70      	pop	{r4, r5, r6, pc}
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	da04      	bge.n	800ca5c <_puts_r+0xac>
 800ca52:	69a2      	ldr	r2, [r4, #24]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	dc06      	bgt.n	800ca66 <_puts_r+0xb6>
 800ca58:	290a      	cmp	r1, #10
 800ca5a:	d004      	beq.n	800ca66 <_puts_r+0xb6>
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	6022      	str	r2, [r4, #0]
 800ca62:	7019      	strb	r1, [r3, #0]
 800ca64:	e7c5      	b.n	800c9f2 <_puts_r+0x42>
 800ca66:	4622      	mov	r2, r4
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f000 f817 	bl	800ca9c <__swbuf_r>
 800ca6e:	3001      	adds	r0, #1
 800ca70:	d1bf      	bne.n	800c9f2 <_puts_r+0x42>
 800ca72:	e7df      	b.n	800ca34 <_puts_r+0x84>
 800ca74:	6823      	ldr	r3, [r4, #0]
 800ca76:	250a      	movs	r5, #10
 800ca78:	1c5a      	adds	r2, r3, #1
 800ca7a:	6022      	str	r2, [r4, #0]
 800ca7c:	701d      	strb	r5, [r3, #0]
 800ca7e:	e7db      	b.n	800ca38 <_puts_r+0x88>
 800ca80:	0800f1e8 	.word	0x0800f1e8
 800ca84:	0800f208 	.word	0x0800f208
 800ca88:	0800f1c8 	.word	0x0800f1c8

0800ca8c <puts>:
 800ca8c:	4b02      	ldr	r3, [pc, #8]	; (800ca98 <puts+0xc>)
 800ca8e:	4601      	mov	r1, r0
 800ca90:	6818      	ldr	r0, [r3, #0]
 800ca92:	f7ff bf8d 	b.w	800c9b0 <_puts_r>
 800ca96:	bf00      	nop
 800ca98:	2000001c 	.word	0x2000001c

0800ca9c <__swbuf_r>:
 800ca9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9e:	460e      	mov	r6, r1
 800caa0:	4614      	mov	r4, r2
 800caa2:	4605      	mov	r5, r0
 800caa4:	b118      	cbz	r0, 800caae <__swbuf_r+0x12>
 800caa6:	6983      	ldr	r3, [r0, #24]
 800caa8:	b90b      	cbnz	r3, 800caae <__swbuf_r+0x12>
 800caaa:	f001 f84b 	bl	800db44 <__sinit>
 800caae:	4b21      	ldr	r3, [pc, #132]	; (800cb34 <__swbuf_r+0x98>)
 800cab0:	429c      	cmp	r4, r3
 800cab2:	d12b      	bne.n	800cb0c <__swbuf_r+0x70>
 800cab4:	686c      	ldr	r4, [r5, #4]
 800cab6:	69a3      	ldr	r3, [r4, #24]
 800cab8:	60a3      	str	r3, [r4, #8]
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	071a      	lsls	r2, r3, #28
 800cabe:	d52f      	bpl.n	800cb20 <__swbuf_r+0x84>
 800cac0:	6923      	ldr	r3, [r4, #16]
 800cac2:	b36b      	cbz	r3, 800cb20 <__swbuf_r+0x84>
 800cac4:	6923      	ldr	r3, [r4, #16]
 800cac6:	6820      	ldr	r0, [r4, #0]
 800cac8:	1ac0      	subs	r0, r0, r3
 800caca:	6963      	ldr	r3, [r4, #20]
 800cacc:	b2f6      	uxtb	r6, r6
 800cace:	4283      	cmp	r3, r0
 800cad0:	4637      	mov	r7, r6
 800cad2:	dc04      	bgt.n	800cade <__swbuf_r+0x42>
 800cad4:	4621      	mov	r1, r4
 800cad6:	4628      	mov	r0, r5
 800cad8:	f000 ffa0 	bl	800da1c <_fflush_r>
 800cadc:	bb30      	cbnz	r0, 800cb2c <__swbuf_r+0x90>
 800cade:	68a3      	ldr	r3, [r4, #8]
 800cae0:	3b01      	subs	r3, #1
 800cae2:	60a3      	str	r3, [r4, #8]
 800cae4:	6823      	ldr	r3, [r4, #0]
 800cae6:	1c5a      	adds	r2, r3, #1
 800cae8:	6022      	str	r2, [r4, #0]
 800caea:	701e      	strb	r6, [r3, #0]
 800caec:	6963      	ldr	r3, [r4, #20]
 800caee:	3001      	adds	r0, #1
 800caf0:	4283      	cmp	r3, r0
 800caf2:	d004      	beq.n	800cafe <__swbuf_r+0x62>
 800caf4:	89a3      	ldrh	r3, [r4, #12]
 800caf6:	07db      	lsls	r3, r3, #31
 800caf8:	d506      	bpl.n	800cb08 <__swbuf_r+0x6c>
 800cafa:	2e0a      	cmp	r6, #10
 800cafc:	d104      	bne.n	800cb08 <__swbuf_r+0x6c>
 800cafe:	4621      	mov	r1, r4
 800cb00:	4628      	mov	r0, r5
 800cb02:	f000 ff8b 	bl	800da1c <_fflush_r>
 800cb06:	b988      	cbnz	r0, 800cb2c <__swbuf_r+0x90>
 800cb08:	4638      	mov	r0, r7
 800cb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb0c:	4b0a      	ldr	r3, [pc, #40]	; (800cb38 <__swbuf_r+0x9c>)
 800cb0e:	429c      	cmp	r4, r3
 800cb10:	d101      	bne.n	800cb16 <__swbuf_r+0x7a>
 800cb12:	68ac      	ldr	r4, [r5, #8]
 800cb14:	e7cf      	b.n	800cab6 <__swbuf_r+0x1a>
 800cb16:	4b09      	ldr	r3, [pc, #36]	; (800cb3c <__swbuf_r+0xa0>)
 800cb18:	429c      	cmp	r4, r3
 800cb1a:	bf08      	it	eq
 800cb1c:	68ec      	ldreq	r4, [r5, #12]
 800cb1e:	e7ca      	b.n	800cab6 <__swbuf_r+0x1a>
 800cb20:	4621      	mov	r1, r4
 800cb22:	4628      	mov	r0, r5
 800cb24:	f000 f80c 	bl	800cb40 <__swsetup_r>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d0cb      	beq.n	800cac4 <__swbuf_r+0x28>
 800cb2c:	f04f 37ff 	mov.w	r7, #4294967295
 800cb30:	e7ea      	b.n	800cb08 <__swbuf_r+0x6c>
 800cb32:	bf00      	nop
 800cb34:	0800f1e8 	.word	0x0800f1e8
 800cb38:	0800f208 	.word	0x0800f208
 800cb3c:	0800f1c8 	.word	0x0800f1c8

0800cb40 <__swsetup_r>:
 800cb40:	4b32      	ldr	r3, [pc, #200]	; (800cc0c <__swsetup_r+0xcc>)
 800cb42:	b570      	push	{r4, r5, r6, lr}
 800cb44:	681d      	ldr	r5, [r3, #0]
 800cb46:	4606      	mov	r6, r0
 800cb48:	460c      	mov	r4, r1
 800cb4a:	b125      	cbz	r5, 800cb56 <__swsetup_r+0x16>
 800cb4c:	69ab      	ldr	r3, [r5, #24]
 800cb4e:	b913      	cbnz	r3, 800cb56 <__swsetup_r+0x16>
 800cb50:	4628      	mov	r0, r5
 800cb52:	f000 fff7 	bl	800db44 <__sinit>
 800cb56:	4b2e      	ldr	r3, [pc, #184]	; (800cc10 <__swsetup_r+0xd0>)
 800cb58:	429c      	cmp	r4, r3
 800cb5a:	d10f      	bne.n	800cb7c <__swsetup_r+0x3c>
 800cb5c:	686c      	ldr	r4, [r5, #4]
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb64:	0719      	lsls	r1, r3, #28
 800cb66:	d42c      	bmi.n	800cbc2 <__swsetup_r+0x82>
 800cb68:	06dd      	lsls	r5, r3, #27
 800cb6a:	d411      	bmi.n	800cb90 <__swsetup_r+0x50>
 800cb6c:	2309      	movs	r3, #9
 800cb6e:	6033      	str	r3, [r6, #0]
 800cb70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb74:	81a3      	strh	r3, [r4, #12]
 800cb76:	f04f 30ff 	mov.w	r0, #4294967295
 800cb7a:	e03e      	b.n	800cbfa <__swsetup_r+0xba>
 800cb7c:	4b25      	ldr	r3, [pc, #148]	; (800cc14 <__swsetup_r+0xd4>)
 800cb7e:	429c      	cmp	r4, r3
 800cb80:	d101      	bne.n	800cb86 <__swsetup_r+0x46>
 800cb82:	68ac      	ldr	r4, [r5, #8]
 800cb84:	e7eb      	b.n	800cb5e <__swsetup_r+0x1e>
 800cb86:	4b24      	ldr	r3, [pc, #144]	; (800cc18 <__swsetup_r+0xd8>)
 800cb88:	429c      	cmp	r4, r3
 800cb8a:	bf08      	it	eq
 800cb8c:	68ec      	ldreq	r4, [r5, #12]
 800cb8e:	e7e6      	b.n	800cb5e <__swsetup_r+0x1e>
 800cb90:	0758      	lsls	r0, r3, #29
 800cb92:	d512      	bpl.n	800cbba <__swsetup_r+0x7a>
 800cb94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb96:	b141      	cbz	r1, 800cbaa <__swsetup_r+0x6a>
 800cb98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb9c:	4299      	cmp	r1, r3
 800cb9e:	d002      	beq.n	800cba6 <__swsetup_r+0x66>
 800cba0:	4630      	mov	r0, r6
 800cba2:	f001 fc7d 	bl	800e4a0 <_free_r>
 800cba6:	2300      	movs	r3, #0
 800cba8:	6363      	str	r3, [r4, #52]	; 0x34
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbb0:	81a3      	strh	r3, [r4, #12]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	6063      	str	r3, [r4, #4]
 800cbb6:	6923      	ldr	r3, [r4, #16]
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	f043 0308 	orr.w	r3, r3, #8
 800cbc0:	81a3      	strh	r3, [r4, #12]
 800cbc2:	6923      	ldr	r3, [r4, #16]
 800cbc4:	b94b      	cbnz	r3, 800cbda <__swsetup_r+0x9a>
 800cbc6:	89a3      	ldrh	r3, [r4, #12]
 800cbc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbd0:	d003      	beq.n	800cbda <__swsetup_r+0x9a>
 800cbd2:	4621      	mov	r1, r4
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f001 f87f 	bl	800dcd8 <__smakebuf_r>
 800cbda:	89a0      	ldrh	r0, [r4, #12]
 800cbdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbe0:	f010 0301 	ands.w	r3, r0, #1
 800cbe4:	d00a      	beq.n	800cbfc <__swsetup_r+0xbc>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	60a3      	str	r3, [r4, #8]
 800cbea:	6963      	ldr	r3, [r4, #20]
 800cbec:	425b      	negs	r3, r3
 800cbee:	61a3      	str	r3, [r4, #24]
 800cbf0:	6923      	ldr	r3, [r4, #16]
 800cbf2:	b943      	cbnz	r3, 800cc06 <__swsetup_r+0xc6>
 800cbf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbf8:	d1ba      	bne.n	800cb70 <__swsetup_r+0x30>
 800cbfa:	bd70      	pop	{r4, r5, r6, pc}
 800cbfc:	0781      	lsls	r1, r0, #30
 800cbfe:	bf58      	it	pl
 800cc00:	6963      	ldrpl	r3, [r4, #20]
 800cc02:	60a3      	str	r3, [r4, #8]
 800cc04:	e7f4      	b.n	800cbf0 <__swsetup_r+0xb0>
 800cc06:	2000      	movs	r0, #0
 800cc08:	e7f7      	b.n	800cbfa <__swsetup_r+0xba>
 800cc0a:	bf00      	nop
 800cc0c:	2000001c 	.word	0x2000001c
 800cc10:	0800f1e8 	.word	0x0800f1e8
 800cc14:	0800f208 	.word	0x0800f208
 800cc18:	0800f1c8 	.word	0x0800f1c8

0800cc1c <quorem>:
 800cc1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc20:	6903      	ldr	r3, [r0, #16]
 800cc22:	690c      	ldr	r4, [r1, #16]
 800cc24:	42a3      	cmp	r3, r4
 800cc26:	4607      	mov	r7, r0
 800cc28:	f2c0 8081 	blt.w	800cd2e <quorem+0x112>
 800cc2c:	3c01      	subs	r4, #1
 800cc2e:	f101 0814 	add.w	r8, r1, #20
 800cc32:	f100 0514 	add.w	r5, r0, #20
 800cc36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc3a:	9301      	str	r3, [sp, #4]
 800cc3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc44:	3301      	adds	r3, #1
 800cc46:	429a      	cmp	r2, r3
 800cc48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cc4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc50:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc54:	d331      	bcc.n	800ccba <quorem+0x9e>
 800cc56:	f04f 0e00 	mov.w	lr, #0
 800cc5a:	4640      	mov	r0, r8
 800cc5c:	46ac      	mov	ip, r5
 800cc5e:	46f2      	mov	sl, lr
 800cc60:	f850 2b04 	ldr.w	r2, [r0], #4
 800cc64:	b293      	uxth	r3, r2
 800cc66:	fb06 e303 	mla	r3, r6, r3, lr
 800cc6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	ebaa 0303 	sub.w	r3, sl, r3
 800cc74:	0c12      	lsrs	r2, r2, #16
 800cc76:	f8dc a000 	ldr.w	sl, [ip]
 800cc7a:	fb06 e202 	mla	r2, r6, r2, lr
 800cc7e:	fa13 f38a 	uxtah	r3, r3, sl
 800cc82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cc86:	fa1f fa82 	uxth.w	sl, r2
 800cc8a:	f8dc 2000 	ldr.w	r2, [ip]
 800cc8e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800cc92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc9c:	4581      	cmp	r9, r0
 800cc9e:	f84c 3b04 	str.w	r3, [ip], #4
 800cca2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cca6:	d2db      	bcs.n	800cc60 <quorem+0x44>
 800cca8:	f855 300b 	ldr.w	r3, [r5, fp]
 800ccac:	b92b      	cbnz	r3, 800ccba <quorem+0x9e>
 800ccae:	9b01      	ldr	r3, [sp, #4]
 800ccb0:	3b04      	subs	r3, #4
 800ccb2:	429d      	cmp	r5, r3
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	d32e      	bcc.n	800cd16 <quorem+0xfa>
 800ccb8:	613c      	str	r4, [r7, #16]
 800ccba:	4638      	mov	r0, r7
 800ccbc:	f001 fae0 	bl	800e280 <__mcmp>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	db24      	blt.n	800cd0e <quorem+0xf2>
 800ccc4:	3601      	adds	r6, #1
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	f04f 0c00 	mov.w	ip, #0
 800cccc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ccd0:	f8d0 e000 	ldr.w	lr, [r0]
 800ccd4:	b293      	uxth	r3, r2
 800ccd6:	ebac 0303 	sub.w	r3, ip, r3
 800ccda:	0c12      	lsrs	r2, r2, #16
 800ccdc:	fa13 f38e 	uxtah	r3, r3, lr
 800cce0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cce4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccee:	45c1      	cmp	r9, r8
 800ccf0:	f840 3b04 	str.w	r3, [r0], #4
 800ccf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ccf8:	d2e8      	bcs.n	800cccc <quorem+0xb0>
 800ccfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ccfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd02:	b922      	cbnz	r2, 800cd0e <quorem+0xf2>
 800cd04:	3b04      	subs	r3, #4
 800cd06:	429d      	cmp	r5, r3
 800cd08:	461a      	mov	r2, r3
 800cd0a:	d30a      	bcc.n	800cd22 <quorem+0x106>
 800cd0c:	613c      	str	r4, [r7, #16]
 800cd0e:	4630      	mov	r0, r6
 800cd10:	b003      	add	sp, #12
 800cd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd16:	6812      	ldr	r2, [r2, #0]
 800cd18:	3b04      	subs	r3, #4
 800cd1a:	2a00      	cmp	r2, #0
 800cd1c:	d1cc      	bne.n	800ccb8 <quorem+0x9c>
 800cd1e:	3c01      	subs	r4, #1
 800cd20:	e7c7      	b.n	800ccb2 <quorem+0x96>
 800cd22:	6812      	ldr	r2, [r2, #0]
 800cd24:	3b04      	subs	r3, #4
 800cd26:	2a00      	cmp	r2, #0
 800cd28:	d1f0      	bne.n	800cd0c <quorem+0xf0>
 800cd2a:	3c01      	subs	r4, #1
 800cd2c:	e7eb      	b.n	800cd06 <quorem+0xea>
 800cd2e:	2000      	movs	r0, #0
 800cd30:	e7ee      	b.n	800cd10 <quorem+0xf4>
 800cd32:	0000      	movs	r0, r0
 800cd34:	0000      	movs	r0, r0
	...

0800cd38 <_dtoa_r>:
 800cd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3c:	ed2d 8b02 	vpush	{d8}
 800cd40:	ec57 6b10 	vmov	r6, r7, d0
 800cd44:	b095      	sub	sp, #84	; 0x54
 800cd46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cd4c:	9105      	str	r1, [sp, #20]
 800cd4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cd52:	4604      	mov	r4, r0
 800cd54:	9209      	str	r2, [sp, #36]	; 0x24
 800cd56:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd58:	b975      	cbnz	r5, 800cd78 <_dtoa_r+0x40>
 800cd5a:	2010      	movs	r0, #16
 800cd5c:	f000 fffc 	bl	800dd58 <malloc>
 800cd60:	4602      	mov	r2, r0
 800cd62:	6260      	str	r0, [r4, #36]	; 0x24
 800cd64:	b920      	cbnz	r0, 800cd70 <_dtoa_r+0x38>
 800cd66:	4bb2      	ldr	r3, [pc, #712]	; (800d030 <_dtoa_r+0x2f8>)
 800cd68:	21ea      	movs	r1, #234	; 0xea
 800cd6a:	48b2      	ldr	r0, [pc, #712]	; (800d034 <_dtoa_r+0x2fc>)
 800cd6c:	f001 fe02 	bl	800e974 <__assert_func>
 800cd70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cd74:	6005      	str	r5, [r0, #0]
 800cd76:	60c5      	str	r5, [r0, #12]
 800cd78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd7a:	6819      	ldr	r1, [r3, #0]
 800cd7c:	b151      	cbz	r1, 800cd94 <_dtoa_r+0x5c>
 800cd7e:	685a      	ldr	r2, [r3, #4]
 800cd80:	604a      	str	r2, [r1, #4]
 800cd82:	2301      	movs	r3, #1
 800cd84:	4093      	lsls	r3, r2
 800cd86:	608b      	str	r3, [r1, #8]
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f001 f83b 	bl	800de04 <_Bfree>
 800cd8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd90:	2200      	movs	r2, #0
 800cd92:	601a      	str	r2, [r3, #0]
 800cd94:	1e3b      	subs	r3, r7, #0
 800cd96:	bfb9      	ittee	lt
 800cd98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cd9c:	9303      	strlt	r3, [sp, #12]
 800cd9e:	2300      	movge	r3, #0
 800cda0:	f8c8 3000 	strge.w	r3, [r8]
 800cda4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cda8:	4ba3      	ldr	r3, [pc, #652]	; (800d038 <_dtoa_r+0x300>)
 800cdaa:	bfbc      	itt	lt
 800cdac:	2201      	movlt	r2, #1
 800cdae:	f8c8 2000 	strlt.w	r2, [r8]
 800cdb2:	ea33 0309 	bics.w	r3, r3, r9
 800cdb6:	d11b      	bne.n	800cdf0 <_dtoa_r+0xb8>
 800cdb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cdba:	f242 730f 	movw	r3, #9999	; 0x270f
 800cdbe:	6013      	str	r3, [r2, #0]
 800cdc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cdc4:	4333      	orrs	r3, r6
 800cdc6:	f000 857a 	beq.w	800d8be <_dtoa_r+0xb86>
 800cdca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdcc:	b963      	cbnz	r3, 800cde8 <_dtoa_r+0xb0>
 800cdce:	4b9b      	ldr	r3, [pc, #620]	; (800d03c <_dtoa_r+0x304>)
 800cdd0:	e024      	b.n	800ce1c <_dtoa_r+0xe4>
 800cdd2:	4b9b      	ldr	r3, [pc, #620]	; (800d040 <_dtoa_r+0x308>)
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	3308      	adds	r3, #8
 800cdd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cdda:	6013      	str	r3, [r2, #0]
 800cddc:	9800      	ldr	r0, [sp, #0]
 800cdde:	b015      	add	sp, #84	; 0x54
 800cde0:	ecbd 8b02 	vpop	{d8}
 800cde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde8:	4b94      	ldr	r3, [pc, #592]	; (800d03c <_dtoa_r+0x304>)
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	3303      	adds	r3, #3
 800cdee:	e7f3      	b.n	800cdd8 <_dtoa_r+0xa0>
 800cdf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	ec51 0b17 	vmov	r0, r1, d7
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ce00:	f7f3 fe6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce04:	4680      	mov	r8, r0
 800ce06:	b158      	cbz	r0, 800ce20 <_dtoa_r+0xe8>
 800ce08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	6013      	str	r3, [r2, #0]
 800ce0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f000 8551 	beq.w	800d8b8 <_dtoa_r+0xb80>
 800ce16:	488b      	ldr	r0, [pc, #556]	; (800d044 <_dtoa_r+0x30c>)
 800ce18:	6018      	str	r0, [r3, #0]
 800ce1a:	1e43      	subs	r3, r0, #1
 800ce1c:	9300      	str	r3, [sp, #0]
 800ce1e:	e7dd      	b.n	800cddc <_dtoa_r+0xa4>
 800ce20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ce24:	aa12      	add	r2, sp, #72	; 0x48
 800ce26:	a913      	add	r1, sp, #76	; 0x4c
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f001 facd 	bl	800e3c8 <__d2b>
 800ce2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce32:	4683      	mov	fp, r0
 800ce34:	2d00      	cmp	r5, #0
 800ce36:	d07c      	beq.n	800cf32 <_dtoa_r+0x1fa>
 800ce38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ce3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ce46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ce4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ce4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ce52:	4b7d      	ldr	r3, [pc, #500]	; (800d048 <_dtoa_r+0x310>)
 800ce54:	2200      	movs	r2, #0
 800ce56:	4630      	mov	r0, r6
 800ce58:	4639      	mov	r1, r7
 800ce5a:	f7f3 fa1d 	bl	8000298 <__aeabi_dsub>
 800ce5e:	a36e      	add	r3, pc, #440	; (adr r3, 800d018 <_dtoa_r+0x2e0>)
 800ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce64:	f7f3 fbd0 	bl	8000608 <__aeabi_dmul>
 800ce68:	a36d      	add	r3, pc, #436	; (adr r3, 800d020 <_dtoa_r+0x2e8>)
 800ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6e:	f7f3 fa15 	bl	800029c <__adddf3>
 800ce72:	4606      	mov	r6, r0
 800ce74:	4628      	mov	r0, r5
 800ce76:	460f      	mov	r7, r1
 800ce78:	f7f3 fb5c 	bl	8000534 <__aeabi_i2d>
 800ce7c:	a36a      	add	r3, pc, #424	; (adr r3, 800d028 <_dtoa_r+0x2f0>)
 800ce7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce82:	f7f3 fbc1 	bl	8000608 <__aeabi_dmul>
 800ce86:	4602      	mov	r2, r0
 800ce88:	460b      	mov	r3, r1
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	4639      	mov	r1, r7
 800ce8e:	f7f3 fa05 	bl	800029c <__adddf3>
 800ce92:	4606      	mov	r6, r0
 800ce94:	460f      	mov	r7, r1
 800ce96:	f7f3 fe67 	bl	8000b68 <__aeabi_d2iz>
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	4682      	mov	sl, r0
 800ce9e:	2300      	movs	r3, #0
 800cea0:	4630      	mov	r0, r6
 800cea2:	4639      	mov	r1, r7
 800cea4:	f7f3 fe22 	bl	8000aec <__aeabi_dcmplt>
 800cea8:	b148      	cbz	r0, 800cebe <_dtoa_r+0x186>
 800ceaa:	4650      	mov	r0, sl
 800ceac:	f7f3 fb42 	bl	8000534 <__aeabi_i2d>
 800ceb0:	4632      	mov	r2, r6
 800ceb2:	463b      	mov	r3, r7
 800ceb4:	f7f3 fe10 	bl	8000ad8 <__aeabi_dcmpeq>
 800ceb8:	b908      	cbnz	r0, 800cebe <_dtoa_r+0x186>
 800ceba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cebe:	f1ba 0f16 	cmp.w	sl, #22
 800cec2:	d854      	bhi.n	800cf6e <_dtoa_r+0x236>
 800cec4:	4b61      	ldr	r3, [pc, #388]	; (800d04c <_dtoa_r+0x314>)
 800cec6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ceca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cece:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ced2:	f7f3 fe0b 	bl	8000aec <__aeabi_dcmplt>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d04b      	beq.n	800cf72 <_dtoa_r+0x23a>
 800ceda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cede:	2300      	movs	r3, #0
 800cee0:	930e      	str	r3, [sp, #56]	; 0x38
 800cee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cee4:	1b5d      	subs	r5, r3, r5
 800cee6:	1e6b      	subs	r3, r5, #1
 800cee8:	9304      	str	r3, [sp, #16]
 800ceea:	bf43      	ittte	mi
 800ceec:	2300      	movmi	r3, #0
 800ceee:	f1c5 0801 	rsbmi	r8, r5, #1
 800cef2:	9304      	strmi	r3, [sp, #16]
 800cef4:	f04f 0800 	movpl.w	r8, #0
 800cef8:	f1ba 0f00 	cmp.w	sl, #0
 800cefc:	db3b      	blt.n	800cf76 <_dtoa_r+0x23e>
 800cefe:	9b04      	ldr	r3, [sp, #16]
 800cf00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800cf04:	4453      	add	r3, sl
 800cf06:	9304      	str	r3, [sp, #16]
 800cf08:	2300      	movs	r3, #0
 800cf0a:	9306      	str	r3, [sp, #24]
 800cf0c:	9b05      	ldr	r3, [sp, #20]
 800cf0e:	2b09      	cmp	r3, #9
 800cf10:	d869      	bhi.n	800cfe6 <_dtoa_r+0x2ae>
 800cf12:	2b05      	cmp	r3, #5
 800cf14:	bfc4      	itt	gt
 800cf16:	3b04      	subgt	r3, #4
 800cf18:	9305      	strgt	r3, [sp, #20]
 800cf1a:	9b05      	ldr	r3, [sp, #20]
 800cf1c:	f1a3 0302 	sub.w	r3, r3, #2
 800cf20:	bfcc      	ite	gt
 800cf22:	2500      	movgt	r5, #0
 800cf24:	2501      	movle	r5, #1
 800cf26:	2b03      	cmp	r3, #3
 800cf28:	d869      	bhi.n	800cffe <_dtoa_r+0x2c6>
 800cf2a:	e8df f003 	tbb	[pc, r3]
 800cf2e:	4e2c      	.short	0x4e2c
 800cf30:	5a4c      	.short	0x5a4c
 800cf32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800cf36:	441d      	add	r5, r3
 800cf38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cf3c:	2b20      	cmp	r3, #32
 800cf3e:	bfc1      	itttt	gt
 800cf40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cf44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cf48:	fa09 f303 	lslgt.w	r3, r9, r3
 800cf4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cf50:	bfda      	itte	le
 800cf52:	f1c3 0320 	rsble	r3, r3, #32
 800cf56:	fa06 f003 	lslle.w	r0, r6, r3
 800cf5a:	4318      	orrgt	r0, r3
 800cf5c:	f7f3 fada 	bl	8000514 <__aeabi_ui2d>
 800cf60:	2301      	movs	r3, #1
 800cf62:	4606      	mov	r6, r0
 800cf64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cf68:	3d01      	subs	r5, #1
 800cf6a:	9310      	str	r3, [sp, #64]	; 0x40
 800cf6c:	e771      	b.n	800ce52 <_dtoa_r+0x11a>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e7b6      	b.n	800cee0 <_dtoa_r+0x1a8>
 800cf72:	900e      	str	r0, [sp, #56]	; 0x38
 800cf74:	e7b5      	b.n	800cee2 <_dtoa_r+0x1aa>
 800cf76:	f1ca 0300 	rsb	r3, sl, #0
 800cf7a:	9306      	str	r3, [sp, #24]
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	eba8 080a 	sub.w	r8, r8, sl
 800cf82:	930d      	str	r3, [sp, #52]	; 0x34
 800cf84:	e7c2      	b.n	800cf0c <_dtoa_r+0x1d4>
 800cf86:	2300      	movs	r3, #0
 800cf88:	9308      	str	r3, [sp, #32]
 800cf8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	dc39      	bgt.n	800d004 <_dtoa_r+0x2cc>
 800cf90:	f04f 0901 	mov.w	r9, #1
 800cf94:	f8cd 9004 	str.w	r9, [sp, #4]
 800cf98:	464b      	mov	r3, r9
 800cf9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cf9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	6042      	str	r2, [r0, #4]
 800cfa4:	2204      	movs	r2, #4
 800cfa6:	f102 0614 	add.w	r6, r2, #20
 800cfaa:	429e      	cmp	r6, r3
 800cfac:	6841      	ldr	r1, [r0, #4]
 800cfae:	d92f      	bls.n	800d010 <_dtoa_r+0x2d8>
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f000 fee7 	bl	800dd84 <_Balloc>
 800cfb6:	9000      	str	r0, [sp, #0]
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d14b      	bne.n	800d054 <_dtoa_r+0x31c>
 800cfbc:	4b24      	ldr	r3, [pc, #144]	; (800d050 <_dtoa_r+0x318>)
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cfc4:	e6d1      	b.n	800cd6a <_dtoa_r+0x32>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e7de      	b.n	800cf88 <_dtoa_r+0x250>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	9308      	str	r3, [sp, #32]
 800cfce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd0:	eb0a 0903 	add.w	r9, sl, r3
 800cfd4:	f109 0301 	add.w	r3, r9, #1
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	9301      	str	r3, [sp, #4]
 800cfdc:	bfb8      	it	lt
 800cfde:	2301      	movlt	r3, #1
 800cfe0:	e7dd      	b.n	800cf9e <_dtoa_r+0x266>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e7f2      	b.n	800cfcc <_dtoa_r+0x294>
 800cfe6:	2501      	movs	r5, #1
 800cfe8:	2300      	movs	r3, #0
 800cfea:	9305      	str	r3, [sp, #20]
 800cfec:	9508      	str	r5, [sp, #32]
 800cfee:	f04f 39ff 	mov.w	r9, #4294967295
 800cff2:	2200      	movs	r2, #0
 800cff4:	f8cd 9004 	str.w	r9, [sp, #4]
 800cff8:	2312      	movs	r3, #18
 800cffa:	9209      	str	r2, [sp, #36]	; 0x24
 800cffc:	e7cf      	b.n	800cf9e <_dtoa_r+0x266>
 800cffe:	2301      	movs	r3, #1
 800d000:	9308      	str	r3, [sp, #32]
 800d002:	e7f4      	b.n	800cfee <_dtoa_r+0x2b6>
 800d004:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d008:	f8cd 9004 	str.w	r9, [sp, #4]
 800d00c:	464b      	mov	r3, r9
 800d00e:	e7c6      	b.n	800cf9e <_dtoa_r+0x266>
 800d010:	3101      	adds	r1, #1
 800d012:	6041      	str	r1, [r0, #4]
 800d014:	0052      	lsls	r2, r2, #1
 800d016:	e7c6      	b.n	800cfa6 <_dtoa_r+0x26e>
 800d018:	636f4361 	.word	0x636f4361
 800d01c:	3fd287a7 	.word	0x3fd287a7
 800d020:	8b60c8b3 	.word	0x8b60c8b3
 800d024:	3fc68a28 	.word	0x3fc68a28
 800d028:	509f79fb 	.word	0x509f79fb
 800d02c:	3fd34413 	.word	0x3fd34413
 800d030:	0800f141 	.word	0x0800f141
 800d034:	0800f158 	.word	0x0800f158
 800d038:	7ff00000 	.word	0x7ff00000
 800d03c:	0800f13d 	.word	0x0800f13d
 800d040:	0800f134 	.word	0x0800f134
 800d044:	0800f111 	.word	0x0800f111
 800d048:	3ff80000 	.word	0x3ff80000
 800d04c:	0800f2b0 	.word	0x0800f2b0
 800d050:	0800f1b7 	.word	0x0800f1b7
 800d054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d056:	9a00      	ldr	r2, [sp, #0]
 800d058:	601a      	str	r2, [r3, #0]
 800d05a:	9b01      	ldr	r3, [sp, #4]
 800d05c:	2b0e      	cmp	r3, #14
 800d05e:	f200 80ad 	bhi.w	800d1bc <_dtoa_r+0x484>
 800d062:	2d00      	cmp	r5, #0
 800d064:	f000 80aa 	beq.w	800d1bc <_dtoa_r+0x484>
 800d068:	f1ba 0f00 	cmp.w	sl, #0
 800d06c:	dd36      	ble.n	800d0dc <_dtoa_r+0x3a4>
 800d06e:	4ac3      	ldr	r2, [pc, #780]	; (800d37c <_dtoa_r+0x644>)
 800d070:	f00a 030f 	and.w	r3, sl, #15
 800d074:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d078:	ed93 7b00 	vldr	d7, [r3]
 800d07c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d080:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d084:	eeb0 8a47 	vmov.f32	s16, s14
 800d088:	eef0 8a67 	vmov.f32	s17, s15
 800d08c:	d016      	beq.n	800d0bc <_dtoa_r+0x384>
 800d08e:	4bbc      	ldr	r3, [pc, #752]	; (800d380 <_dtoa_r+0x648>)
 800d090:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d098:	f7f3 fbe0 	bl	800085c <__aeabi_ddiv>
 800d09c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0a0:	f007 070f 	and.w	r7, r7, #15
 800d0a4:	2503      	movs	r5, #3
 800d0a6:	4eb6      	ldr	r6, [pc, #728]	; (800d380 <_dtoa_r+0x648>)
 800d0a8:	b957      	cbnz	r7, 800d0c0 <_dtoa_r+0x388>
 800d0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ae:	ec53 2b18 	vmov	r2, r3, d8
 800d0b2:	f7f3 fbd3 	bl	800085c <__aeabi_ddiv>
 800d0b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0ba:	e029      	b.n	800d110 <_dtoa_r+0x3d8>
 800d0bc:	2502      	movs	r5, #2
 800d0be:	e7f2      	b.n	800d0a6 <_dtoa_r+0x36e>
 800d0c0:	07f9      	lsls	r1, r7, #31
 800d0c2:	d508      	bpl.n	800d0d6 <_dtoa_r+0x39e>
 800d0c4:	ec51 0b18 	vmov	r0, r1, d8
 800d0c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d0cc:	f7f3 fa9c 	bl	8000608 <__aeabi_dmul>
 800d0d0:	ec41 0b18 	vmov	d8, r0, r1
 800d0d4:	3501      	adds	r5, #1
 800d0d6:	107f      	asrs	r7, r7, #1
 800d0d8:	3608      	adds	r6, #8
 800d0da:	e7e5      	b.n	800d0a8 <_dtoa_r+0x370>
 800d0dc:	f000 80a6 	beq.w	800d22c <_dtoa_r+0x4f4>
 800d0e0:	f1ca 0600 	rsb	r6, sl, #0
 800d0e4:	4ba5      	ldr	r3, [pc, #660]	; (800d37c <_dtoa_r+0x644>)
 800d0e6:	4fa6      	ldr	r7, [pc, #664]	; (800d380 <_dtoa_r+0x648>)
 800d0e8:	f006 020f 	and.w	r2, r6, #15
 800d0ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d0f8:	f7f3 fa86 	bl	8000608 <__aeabi_dmul>
 800d0fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d100:	1136      	asrs	r6, r6, #4
 800d102:	2300      	movs	r3, #0
 800d104:	2502      	movs	r5, #2
 800d106:	2e00      	cmp	r6, #0
 800d108:	f040 8085 	bne.w	800d216 <_dtoa_r+0x4de>
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d1d2      	bne.n	800d0b6 <_dtoa_r+0x37e>
 800d110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d112:	2b00      	cmp	r3, #0
 800d114:	f000 808c 	beq.w	800d230 <_dtoa_r+0x4f8>
 800d118:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d11c:	4b99      	ldr	r3, [pc, #612]	; (800d384 <_dtoa_r+0x64c>)
 800d11e:	2200      	movs	r2, #0
 800d120:	4630      	mov	r0, r6
 800d122:	4639      	mov	r1, r7
 800d124:	f7f3 fce2 	bl	8000aec <__aeabi_dcmplt>
 800d128:	2800      	cmp	r0, #0
 800d12a:	f000 8081 	beq.w	800d230 <_dtoa_r+0x4f8>
 800d12e:	9b01      	ldr	r3, [sp, #4]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d07d      	beq.n	800d230 <_dtoa_r+0x4f8>
 800d134:	f1b9 0f00 	cmp.w	r9, #0
 800d138:	dd3c      	ble.n	800d1b4 <_dtoa_r+0x47c>
 800d13a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d13e:	9307      	str	r3, [sp, #28]
 800d140:	2200      	movs	r2, #0
 800d142:	4b91      	ldr	r3, [pc, #580]	; (800d388 <_dtoa_r+0x650>)
 800d144:	4630      	mov	r0, r6
 800d146:	4639      	mov	r1, r7
 800d148:	f7f3 fa5e 	bl	8000608 <__aeabi_dmul>
 800d14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d150:	3501      	adds	r5, #1
 800d152:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d156:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d15a:	4628      	mov	r0, r5
 800d15c:	f7f3 f9ea 	bl	8000534 <__aeabi_i2d>
 800d160:	4632      	mov	r2, r6
 800d162:	463b      	mov	r3, r7
 800d164:	f7f3 fa50 	bl	8000608 <__aeabi_dmul>
 800d168:	4b88      	ldr	r3, [pc, #544]	; (800d38c <_dtoa_r+0x654>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	f7f3 f896 	bl	800029c <__adddf3>
 800d170:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d178:	9303      	str	r3, [sp, #12]
 800d17a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d15c      	bne.n	800d23a <_dtoa_r+0x502>
 800d180:	4b83      	ldr	r3, [pc, #524]	; (800d390 <_dtoa_r+0x658>)
 800d182:	2200      	movs	r2, #0
 800d184:	4630      	mov	r0, r6
 800d186:	4639      	mov	r1, r7
 800d188:	f7f3 f886 	bl	8000298 <__aeabi_dsub>
 800d18c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d190:	4606      	mov	r6, r0
 800d192:	460f      	mov	r7, r1
 800d194:	f7f3 fcc8 	bl	8000b28 <__aeabi_dcmpgt>
 800d198:	2800      	cmp	r0, #0
 800d19a:	f040 8296 	bne.w	800d6ca <_dtoa_r+0x992>
 800d19e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1a8:	4639      	mov	r1, r7
 800d1aa:	f7f3 fc9f 	bl	8000aec <__aeabi_dcmplt>
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	f040 8288 	bne.w	800d6c4 <_dtoa_r+0x98c>
 800d1b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d1b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d1bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f2c0 8158 	blt.w	800d474 <_dtoa_r+0x73c>
 800d1c4:	f1ba 0f0e 	cmp.w	sl, #14
 800d1c8:	f300 8154 	bgt.w	800d474 <_dtoa_r+0x73c>
 800d1cc:	4b6b      	ldr	r3, [pc, #428]	; (800d37c <_dtoa_r+0x644>)
 800d1ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d1d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f280 80e3 	bge.w	800d3a4 <_dtoa_r+0x66c>
 800d1de:	9b01      	ldr	r3, [sp, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	f300 80df 	bgt.w	800d3a4 <_dtoa_r+0x66c>
 800d1e6:	f040 826d 	bne.w	800d6c4 <_dtoa_r+0x98c>
 800d1ea:	4b69      	ldr	r3, [pc, #420]	; (800d390 <_dtoa_r+0x658>)
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	4640      	mov	r0, r8
 800d1f0:	4649      	mov	r1, r9
 800d1f2:	f7f3 fa09 	bl	8000608 <__aeabi_dmul>
 800d1f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1fa:	f7f3 fc8b 	bl	8000b14 <__aeabi_dcmpge>
 800d1fe:	9e01      	ldr	r6, [sp, #4]
 800d200:	4637      	mov	r7, r6
 800d202:	2800      	cmp	r0, #0
 800d204:	f040 8243 	bne.w	800d68e <_dtoa_r+0x956>
 800d208:	9d00      	ldr	r5, [sp, #0]
 800d20a:	2331      	movs	r3, #49	; 0x31
 800d20c:	f805 3b01 	strb.w	r3, [r5], #1
 800d210:	f10a 0a01 	add.w	sl, sl, #1
 800d214:	e23f      	b.n	800d696 <_dtoa_r+0x95e>
 800d216:	07f2      	lsls	r2, r6, #31
 800d218:	d505      	bpl.n	800d226 <_dtoa_r+0x4ee>
 800d21a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d21e:	f7f3 f9f3 	bl	8000608 <__aeabi_dmul>
 800d222:	3501      	adds	r5, #1
 800d224:	2301      	movs	r3, #1
 800d226:	1076      	asrs	r6, r6, #1
 800d228:	3708      	adds	r7, #8
 800d22a:	e76c      	b.n	800d106 <_dtoa_r+0x3ce>
 800d22c:	2502      	movs	r5, #2
 800d22e:	e76f      	b.n	800d110 <_dtoa_r+0x3d8>
 800d230:	9b01      	ldr	r3, [sp, #4]
 800d232:	f8cd a01c 	str.w	sl, [sp, #28]
 800d236:	930c      	str	r3, [sp, #48]	; 0x30
 800d238:	e78d      	b.n	800d156 <_dtoa_r+0x41e>
 800d23a:	9900      	ldr	r1, [sp, #0]
 800d23c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d23e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d240:	4b4e      	ldr	r3, [pc, #312]	; (800d37c <_dtoa_r+0x644>)
 800d242:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d246:	4401      	add	r1, r0
 800d248:	9102      	str	r1, [sp, #8]
 800d24a:	9908      	ldr	r1, [sp, #32]
 800d24c:	eeb0 8a47 	vmov.f32	s16, s14
 800d250:	eef0 8a67 	vmov.f32	s17, s15
 800d254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d258:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d25c:	2900      	cmp	r1, #0
 800d25e:	d045      	beq.n	800d2ec <_dtoa_r+0x5b4>
 800d260:	494c      	ldr	r1, [pc, #304]	; (800d394 <_dtoa_r+0x65c>)
 800d262:	2000      	movs	r0, #0
 800d264:	f7f3 fafa 	bl	800085c <__aeabi_ddiv>
 800d268:	ec53 2b18 	vmov	r2, r3, d8
 800d26c:	f7f3 f814 	bl	8000298 <__aeabi_dsub>
 800d270:	9d00      	ldr	r5, [sp, #0]
 800d272:	ec41 0b18 	vmov	d8, r0, r1
 800d276:	4639      	mov	r1, r7
 800d278:	4630      	mov	r0, r6
 800d27a:	f7f3 fc75 	bl	8000b68 <__aeabi_d2iz>
 800d27e:	900c      	str	r0, [sp, #48]	; 0x30
 800d280:	f7f3 f958 	bl	8000534 <__aeabi_i2d>
 800d284:	4602      	mov	r2, r0
 800d286:	460b      	mov	r3, r1
 800d288:	4630      	mov	r0, r6
 800d28a:	4639      	mov	r1, r7
 800d28c:	f7f3 f804 	bl	8000298 <__aeabi_dsub>
 800d290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d292:	3330      	adds	r3, #48	; 0x30
 800d294:	f805 3b01 	strb.w	r3, [r5], #1
 800d298:	ec53 2b18 	vmov	r2, r3, d8
 800d29c:	4606      	mov	r6, r0
 800d29e:	460f      	mov	r7, r1
 800d2a0:	f7f3 fc24 	bl	8000aec <__aeabi_dcmplt>
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d165      	bne.n	800d374 <_dtoa_r+0x63c>
 800d2a8:	4632      	mov	r2, r6
 800d2aa:	463b      	mov	r3, r7
 800d2ac:	4935      	ldr	r1, [pc, #212]	; (800d384 <_dtoa_r+0x64c>)
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	f7f2 fff2 	bl	8000298 <__aeabi_dsub>
 800d2b4:	ec53 2b18 	vmov	r2, r3, d8
 800d2b8:	f7f3 fc18 	bl	8000aec <__aeabi_dcmplt>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	f040 80b9 	bne.w	800d434 <_dtoa_r+0x6fc>
 800d2c2:	9b02      	ldr	r3, [sp, #8]
 800d2c4:	429d      	cmp	r5, r3
 800d2c6:	f43f af75 	beq.w	800d1b4 <_dtoa_r+0x47c>
 800d2ca:	4b2f      	ldr	r3, [pc, #188]	; (800d388 <_dtoa_r+0x650>)
 800d2cc:	ec51 0b18 	vmov	r0, r1, d8
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f7f3 f999 	bl	8000608 <__aeabi_dmul>
 800d2d6:	4b2c      	ldr	r3, [pc, #176]	; (800d388 <_dtoa_r+0x650>)
 800d2d8:	ec41 0b18 	vmov	d8, r0, r1
 800d2dc:	2200      	movs	r2, #0
 800d2de:	4630      	mov	r0, r6
 800d2e0:	4639      	mov	r1, r7
 800d2e2:	f7f3 f991 	bl	8000608 <__aeabi_dmul>
 800d2e6:	4606      	mov	r6, r0
 800d2e8:	460f      	mov	r7, r1
 800d2ea:	e7c4      	b.n	800d276 <_dtoa_r+0x53e>
 800d2ec:	ec51 0b17 	vmov	r0, r1, d7
 800d2f0:	f7f3 f98a 	bl	8000608 <__aeabi_dmul>
 800d2f4:	9b02      	ldr	r3, [sp, #8]
 800d2f6:	9d00      	ldr	r5, [sp, #0]
 800d2f8:	930c      	str	r3, [sp, #48]	; 0x30
 800d2fa:	ec41 0b18 	vmov	d8, r0, r1
 800d2fe:	4639      	mov	r1, r7
 800d300:	4630      	mov	r0, r6
 800d302:	f7f3 fc31 	bl	8000b68 <__aeabi_d2iz>
 800d306:	9011      	str	r0, [sp, #68]	; 0x44
 800d308:	f7f3 f914 	bl	8000534 <__aeabi_i2d>
 800d30c:	4602      	mov	r2, r0
 800d30e:	460b      	mov	r3, r1
 800d310:	4630      	mov	r0, r6
 800d312:	4639      	mov	r1, r7
 800d314:	f7f2 ffc0 	bl	8000298 <__aeabi_dsub>
 800d318:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d31a:	3330      	adds	r3, #48	; 0x30
 800d31c:	f805 3b01 	strb.w	r3, [r5], #1
 800d320:	9b02      	ldr	r3, [sp, #8]
 800d322:	429d      	cmp	r5, r3
 800d324:	4606      	mov	r6, r0
 800d326:	460f      	mov	r7, r1
 800d328:	f04f 0200 	mov.w	r2, #0
 800d32c:	d134      	bne.n	800d398 <_dtoa_r+0x660>
 800d32e:	4b19      	ldr	r3, [pc, #100]	; (800d394 <_dtoa_r+0x65c>)
 800d330:	ec51 0b18 	vmov	r0, r1, d8
 800d334:	f7f2 ffb2 	bl	800029c <__adddf3>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	4630      	mov	r0, r6
 800d33e:	4639      	mov	r1, r7
 800d340:	f7f3 fbf2 	bl	8000b28 <__aeabi_dcmpgt>
 800d344:	2800      	cmp	r0, #0
 800d346:	d175      	bne.n	800d434 <_dtoa_r+0x6fc>
 800d348:	ec53 2b18 	vmov	r2, r3, d8
 800d34c:	4911      	ldr	r1, [pc, #68]	; (800d394 <_dtoa_r+0x65c>)
 800d34e:	2000      	movs	r0, #0
 800d350:	f7f2 ffa2 	bl	8000298 <__aeabi_dsub>
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	4630      	mov	r0, r6
 800d35a:	4639      	mov	r1, r7
 800d35c:	f7f3 fbc6 	bl	8000aec <__aeabi_dcmplt>
 800d360:	2800      	cmp	r0, #0
 800d362:	f43f af27 	beq.w	800d1b4 <_dtoa_r+0x47c>
 800d366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d368:	1e6b      	subs	r3, r5, #1
 800d36a:	930c      	str	r3, [sp, #48]	; 0x30
 800d36c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d370:	2b30      	cmp	r3, #48	; 0x30
 800d372:	d0f8      	beq.n	800d366 <_dtoa_r+0x62e>
 800d374:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d378:	e04a      	b.n	800d410 <_dtoa_r+0x6d8>
 800d37a:	bf00      	nop
 800d37c:	0800f2b0 	.word	0x0800f2b0
 800d380:	0800f288 	.word	0x0800f288
 800d384:	3ff00000 	.word	0x3ff00000
 800d388:	40240000 	.word	0x40240000
 800d38c:	401c0000 	.word	0x401c0000
 800d390:	40140000 	.word	0x40140000
 800d394:	3fe00000 	.word	0x3fe00000
 800d398:	4baf      	ldr	r3, [pc, #700]	; (800d658 <_dtoa_r+0x920>)
 800d39a:	f7f3 f935 	bl	8000608 <__aeabi_dmul>
 800d39e:	4606      	mov	r6, r0
 800d3a0:	460f      	mov	r7, r1
 800d3a2:	e7ac      	b.n	800d2fe <_dtoa_r+0x5c6>
 800d3a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d3a8:	9d00      	ldr	r5, [sp, #0]
 800d3aa:	4642      	mov	r2, r8
 800d3ac:	464b      	mov	r3, r9
 800d3ae:	4630      	mov	r0, r6
 800d3b0:	4639      	mov	r1, r7
 800d3b2:	f7f3 fa53 	bl	800085c <__aeabi_ddiv>
 800d3b6:	f7f3 fbd7 	bl	8000b68 <__aeabi_d2iz>
 800d3ba:	9002      	str	r0, [sp, #8]
 800d3bc:	f7f3 f8ba 	bl	8000534 <__aeabi_i2d>
 800d3c0:	4642      	mov	r2, r8
 800d3c2:	464b      	mov	r3, r9
 800d3c4:	f7f3 f920 	bl	8000608 <__aeabi_dmul>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	4630      	mov	r0, r6
 800d3ce:	4639      	mov	r1, r7
 800d3d0:	f7f2 ff62 	bl	8000298 <__aeabi_dsub>
 800d3d4:	9e02      	ldr	r6, [sp, #8]
 800d3d6:	9f01      	ldr	r7, [sp, #4]
 800d3d8:	3630      	adds	r6, #48	; 0x30
 800d3da:	f805 6b01 	strb.w	r6, [r5], #1
 800d3de:	9e00      	ldr	r6, [sp, #0]
 800d3e0:	1bae      	subs	r6, r5, r6
 800d3e2:	42b7      	cmp	r7, r6
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	d137      	bne.n	800d45a <_dtoa_r+0x722>
 800d3ea:	f7f2 ff57 	bl	800029c <__adddf3>
 800d3ee:	4642      	mov	r2, r8
 800d3f0:	464b      	mov	r3, r9
 800d3f2:	4606      	mov	r6, r0
 800d3f4:	460f      	mov	r7, r1
 800d3f6:	f7f3 fb97 	bl	8000b28 <__aeabi_dcmpgt>
 800d3fa:	b9c8      	cbnz	r0, 800d430 <_dtoa_r+0x6f8>
 800d3fc:	4642      	mov	r2, r8
 800d3fe:	464b      	mov	r3, r9
 800d400:	4630      	mov	r0, r6
 800d402:	4639      	mov	r1, r7
 800d404:	f7f3 fb68 	bl	8000ad8 <__aeabi_dcmpeq>
 800d408:	b110      	cbz	r0, 800d410 <_dtoa_r+0x6d8>
 800d40a:	9b02      	ldr	r3, [sp, #8]
 800d40c:	07d9      	lsls	r1, r3, #31
 800d40e:	d40f      	bmi.n	800d430 <_dtoa_r+0x6f8>
 800d410:	4620      	mov	r0, r4
 800d412:	4659      	mov	r1, fp
 800d414:	f000 fcf6 	bl	800de04 <_Bfree>
 800d418:	2300      	movs	r3, #0
 800d41a:	702b      	strb	r3, [r5, #0]
 800d41c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d41e:	f10a 0001 	add.w	r0, sl, #1
 800d422:	6018      	str	r0, [r3, #0]
 800d424:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d426:	2b00      	cmp	r3, #0
 800d428:	f43f acd8 	beq.w	800cddc <_dtoa_r+0xa4>
 800d42c:	601d      	str	r5, [r3, #0]
 800d42e:	e4d5      	b.n	800cddc <_dtoa_r+0xa4>
 800d430:	f8cd a01c 	str.w	sl, [sp, #28]
 800d434:	462b      	mov	r3, r5
 800d436:	461d      	mov	r5, r3
 800d438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d43c:	2a39      	cmp	r2, #57	; 0x39
 800d43e:	d108      	bne.n	800d452 <_dtoa_r+0x71a>
 800d440:	9a00      	ldr	r2, [sp, #0]
 800d442:	429a      	cmp	r2, r3
 800d444:	d1f7      	bne.n	800d436 <_dtoa_r+0x6fe>
 800d446:	9a07      	ldr	r2, [sp, #28]
 800d448:	9900      	ldr	r1, [sp, #0]
 800d44a:	3201      	adds	r2, #1
 800d44c:	9207      	str	r2, [sp, #28]
 800d44e:	2230      	movs	r2, #48	; 0x30
 800d450:	700a      	strb	r2, [r1, #0]
 800d452:	781a      	ldrb	r2, [r3, #0]
 800d454:	3201      	adds	r2, #1
 800d456:	701a      	strb	r2, [r3, #0]
 800d458:	e78c      	b.n	800d374 <_dtoa_r+0x63c>
 800d45a:	4b7f      	ldr	r3, [pc, #508]	; (800d658 <_dtoa_r+0x920>)
 800d45c:	2200      	movs	r2, #0
 800d45e:	f7f3 f8d3 	bl	8000608 <__aeabi_dmul>
 800d462:	2200      	movs	r2, #0
 800d464:	2300      	movs	r3, #0
 800d466:	4606      	mov	r6, r0
 800d468:	460f      	mov	r7, r1
 800d46a:	f7f3 fb35 	bl	8000ad8 <__aeabi_dcmpeq>
 800d46e:	2800      	cmp	r0, #0
 800d470:	d09b      	beq.n	800d3aa <_dtoa_r+0x672>
 800d472:	e7cd      	b.n	800d410 <_dtoa_r+0x6d8>
 800d474:	9a08      	ldr	r2, [sp, #32]
 800d476:	2a00      	cmp	r2, #0
 800d478:	f000 80c4 	beq.w	800d604 <_dtoa_r+0x8cc>
 800d47c:	9a05      	ldr	r2, [sp, #20]
 800d47e:	2a01      	cmp	r2, #1
 800d480:	f300 80a8 	bgt.w	800d5d4 <_dtoa_r+0x89c>
 800d484:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d486:	2a00      	cmp	r2, #0
 800d488:	f000 80a0 	beq.w	800d5cc <_dtoa_r+0x894>
 800d48c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d490:	9e06      	ldr	r6, [sp, #24]
 800d492:	4645      	mov	r5, r8
 800d494:	9a04      	ldr	r2, [sp, #16]
 800d496:	2101      	movs	r1, #1
 800d498:	441a      	add	r2, r3
 800d49a:	4620      	mov	r0, r4
 800d49c:	4498      	add	r8, r3
 800d49e:	9204      	str	r2, [sp, #16]
 800d4a0:	f000 fd6c 	bl	800df7c <__i2b>
 800d4a4:	4607      	mov	r7, r0
 800d4a6:	2d00      	cmp	r5, #0
 800d4a8:	dd0b      	ble.n	800d4c2 <_dtoa_r+0x78a>
 800d4aa:	9b04      	ldr	r3, [sp, #16]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	dd08      	ble.n	800d4c2 <_dtoa_r+0x78a>
 800d4b0:	42ab      	cmp	r3, r5
 800d4b2:	9a04      	ldr	r2, [sp, #16]
 800d4b4:	bfa8      	it	ge
 800d4b6:	462b      	movge	r3, r5
 800d4b8:	eba8 0803 	sub.w	r8, r8, r3
 800d4bc:	1aed      	subs	r5, r5, r3
 800d4be:	1ad3      	subs	r3, r2, r3
 800d4c0:	9304      	str	r3, [sp, #16]
 800d4c2:	9b06      	ldr	r3, [sp, #24]
 800d4c4:	b1fb      	cbz	r3, 800d506 <_dtoa_r+0x7ce>
 800d4c6:	9b08      	ldr	r3, [sp, #32]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f000 809f 	beq.w	800d60c <_dtoa_r+0x8d4>
 800d4ce:	2e00      	cmp	r6, #0
 800d4d0:	dd11      	ble.n	800d4f6 <_dtoa_r+0x7be>
 800d4d2:	4639      	mov	r1, r7
 800d4d4:	4632      	mov	r2, r6
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	f000 fe0c 	bl	800e0f4 <__pow5mult>
 800d4dc:	465a      	mov	r2, fp
 800d4de:	4601      	mov	r1, r0
 800d4e0:	4607      	mov	r7, r0
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f000 fd60 	bl	800dfa8 <__multiply>
 800d4e8:	4659      	mov	r1, fp
 800d4ea:	9007      	str	r0, [sp, #28]
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f000 fc89 	bl	800de04 <_Bfree>
 800d4f2:	9b07      	ldr	r3, [sp, #28]
 800d4f4:	469b      	mov	fp, r3
 800d4f6:	9b06      	ldr	r3, [sp, #24]
 800d4f8:	1b9a      	subs	r2, r3, r6
 800d4fa:	d004      	beq.n	800d506 <_dtoa_r+0x7ce>
 800d4fc:	4659      	mov	r1, fp
 800d4fe:	4620      	mov	r0, r4
 800d500:	f000 fdf8 	bl	800e0f4 <__pow5mult>
 800d504:	4683      	mov	fp, r0
 800d506:	2101      	movs	r1, #1
 800d508:	4620      	mov	r0, r4
 800d50a:	f000 fd37 	bl	800df7c <__i2b>
 800d50e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d510:	2b00      	cmp	r3, #0
 800d512:	4606      	mov	r6, r0
 800d514:	dd7c      	ble.n	800d610 <_dtoa_r+0x8d8>
 800d516:	461a      	mov	r2, r3
 800d518:	4601      	mov	r1, r0
 800d51a:	4620      	mov	r0, r4
 800d51c:	f000 fdea 	bl	800e0f4 <__pow5mult>
 800d520:	9b05      	ldr	r3, [sp, #20]
 800d522:	2b01      	cmp	r3, #1
 800d524:	4606      	mov	r6, r0
 800d526:	dd76      	ble.n	800d616 <_dtoa_r+0x8de>
 800d528:	2300      	movs	r3, #0
 800d52a:	9306      	str	r3, [sp, #24]
 800d52c:	6933      	ldr	r3, [r6, #16]
 800d52e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d532:	6918      	ldr	r0, [r3, #16]
 800d534:	f000 fcd2 	bl	800dedc <__hi0bits>
 800d538:	f1c0 0020 	rsb	r0, r0, #32
 800d53c:	9b04      	ldr	r3, [sp, #16]
 800d53e:	4418      	add	r0, r3
 800d540:	f010 001f 	ands.w	r0, r0, #31
 800d544:	f000 8086 	beq.w	800d654 <_dtoa_r+0x91c>
 800d548:	f1c0 0320 	rsb	r3, r0, #32
 800d54c:	2b04      	cmp	r3, #4
 800d54e:	dd7f      	ble.n	800d650 <_dtoa_r+0x918>
 800d550:	f1c0 001c 	rsb	r0, r0, #28
 800d554:	9b04      	ldr	r3, [sp, #16]
 800d556:	4403      	add	r3, r0
 800d558:	4480      	add	r8, r0
 800d55a:	4405      	add	r5, r0
 800d55c:	9304      	str	r3, [sp, #16]
 800d55e:	f1b8 0f00 	cmp.w	r8, #0
 800d562:	dd05      	ble.n	800d570 <_dtoa_r+0x838>
 800d564:	4659      	mov	r1, fp
 800d566:	4642      	mov	r2, r8
 800d568:	4620      	mov	r0, r4
 800d56a:	f000 fe1d 	bl	800e1a8 <__lshift>
 800d56e:	4683      	mov	fp, r0
 800d570:	9b04      	ldr	r3, [sp, #16]
 800d572:	2b00      	cmp	r3, #0
 800d574:	dd05      	ble.n	800d582 <_dtoa_r+0x84a>
 800d576:	4631      	mov	r1, r6
 800d578:	461a      	mov	r2, r3
 800d57a:	4620      	mov	r0, r4
 800d57c:	f000 fe14 	bl	800e1a8 <__lshift>
 800d580:	4606      	mov	r6, r0
 800d582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d584:	2b00      	cmp	r3, #0
 800d586:	d069      	beq.n	800d65c <_dtoa_r+0x924>
 800d588:	4631      	mov	r1, r6
 800d58a:	4658      	mov	r0, fp
 800d58c:	f000 fe78 	bl	800e280 <__mcmp>
 800d590:	2800      	cmp	r0, #0
 800d592:	da63      	bge.n	800d65c <_dtoa_r+0x924>
 800d594:	2300      	movs	r3, #0
 800d596:	4659      	mov	r1, fp
 800d598:	220a      	movs	r2, #10
 800d59a:	4620      	mov	r0, r4
 800d59c:	f000 fc54 	bl	800de48 <__multadd>
 800d5a0:	9b08      	ldr	r3, [sp, #32]
 800d5a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5a6:	4683      	mov	fp, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f000 818f 	beq.w	800d8cc <_dtoa_r+0xb94>
 800d5ae:	4639      	mov	r1, r7
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	220a      	movs	r2, #10
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	f000 fc47 	bl	800de48 <__multadd>
 800d5ba:	f1b9 0f00 	cmp.w	r9, #0
 800d5be:	4607      	mov	r7, r0
 800d5c0:	f300 808e 	bgt.w	800d6e0 <_dtoa_r+0x9a8>
 800d5c4:	9b05      	ldr	r3, [sp, #20]
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	dc50      	bgt.n	800d66c <_dtoa_r+0x934>
 800d5ca:	e089      	b.n	800d6e0 <_dtoa_r+0x9a8>
 800d5cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d5d2:	e75d      	b.n	800d490 <_dtoa_r+0x758>
 800d5d4:	9b01      	ldr	r3, [sp, #4]
 800d5d6:	1e5e      	subs	r6, r3, #1
 800d5d8:	9b06      	ldr	r3, [sp, #24]
 800d5da:	42b3      	cmp	r3, r6
 800d5dc:	bfbf      	itttt	lt
 800d5de:	9b06      	ldrlt	r3, [sp, #24]
 800d5e0:	9606      	strlt	r6, [sp, #24]
 800d5e2:	1af2      	sublt	r2, r6, r3
 800d5e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d5e6:	bfb6      	itet	lt
 800d5e8:	189b      	addlt	r3, r3, r2
 800d5ea:	1b9e      	subge	r6, r3, r6
 800d5ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d5ee:	9b01      	ldr	r3, [sp, #4]
 800d5f0:	bfb8      	it	lt
 800d5f2:	2600      	movlt	r6, #0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	bfb5      	itete	lt
 800d5f8:	eba8 0503 	sublt.w	r5, r8, r3
 800d5fc:	9b01      	ldrge	r3, [sp, #4]
 800d5fe:	2300      	movlt	r3, #0
 800d600:	4645      	movge	r5, r8
 800d602:	e747      	b.n	800d494 <_dtoa_r+0x75c>
 800d604:	9e06      	ldr	r6, [sp, #24]
 800d606:	9f08      	ldr	r7, [sp, #32]
 800d608:	4645      	mov	r5, r8
 800d60a:	e74c      	b.n	800d4a6 <_dtoa_r+0x76e>
 800d60c:	9a06      	ldr	r2, [sp, #24]
 800d60e:	e775      	b.n	800d4fc <_dtoa_r+0x7c4>
 800d610:	9b05      	ldr	r3, [sp, #20]
 800d612:	2b01      	cmp	r3, #1
 800d614:	dc18      	bgt.n	800d648 <_dtoa_r+0x910>
 800d616:	9b02      	ldr	r3, [sp, #8]
 800d618:	b9b3      	cbnz	r3, 800d648 <_dtoa_r+0x910>
 800d61a:	9b03      	ldr	r3, [sp, #12]
 800d61c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d620:	b9a3      	cbnz	r3, 800d64c <_dtoa_r+0x914>
 800d622:	9b03      	ldr	r3, [sp, #12]
 800d624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d628:	0d1b      	lsrs	r3, r3, #20
 800d62a:	051b      	lsls	r3, r3, #20
 800d62c:	b12b      	cbz	r3, 800d63a <_dtoa_r+0x902>
 800d62e:	9b04      	ldr	r3, [sp, #16]
 800d630:	3301      	adds	r3, #1
 800d632:	9304      	str	r3, [sp, #16]
 800d634:	f108 0801 	add.w	r8, r8, #1
 800d638:	2301      	movs	r3, #1
 800d63a:	9306      	str	r3, [sp, #24]
 800d63c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f47f af74 	bne.w	800d52c <_dtoa_r+0x7f4>
 800d644:	2001      	movs	r0, #1
 800d646:	e779      	b.n	800d53c <_dtoa_r+0x804>
 800d648:	2300      	movs	r3, #0
 800d64a:	e7f6      	b.n	800d63a <_dtoa_r+0x902>
 800d64c:	9b02      	ldr	r3, [sp, #8]
 800d64e:	e7f4      	b.n	800d63a <_dtoa_r+0x902>
 800d650:	d085      	beq.n	800d55e <_dtoa_r+0x826>
 800d652:	4618      	mov	r0, r3
 800d654:	301c      	adds	r0, #28
 800d656:	e77d      	b.n	800d554 <_dtoa_r+0x81c>
 800d658:	40240000 	.word	0x40240000
 800d65c:	9b01      	ldr	r3, [sp, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	dc38      	bgt.n	800d6d4 <_dtoa_r+0x99c>
 800d662:	9b05      	ldr	r3, [sp, #20]
 800d664:	2b02      	cmp	r3, #2
 800d666:	dd35      	ble.n	800d6d4 <_dtoa_r+0x99c>
 800d668:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d66c:	f1b9 0f00 	cmp.w	r9, #0
 800d670:	d10d      	bne.n	800d68e <_dtoa_r+0x956>
 800d672:	4631      	mov	r1, r6
 800d674:	464b      	mov	r3, r9
 800d676:	2205      	movs	r2, #5
 800d678:	4620      	mov	r0, r4
 800d67a:	f000 fbe5 	bl	800de48 <__multadd>
 800d67e:	4601      	mov	r1, r0
 800d680:	4606      	mov	r6, r0
 800d682:	4658      	mov	r0, fp
 800d684:	f000 fdfc 	bl	800e280 <__mcmp>
 800d688:	2800      	cmp	r0, #0
 800d68a:	f73f adbd 	bgt.w	800d208 <_dtoa_r+0x4d0>
 800d68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d690:	9d00      	ldr	r5, [sp, #0]
 800d692:	ea6f 0a03 	mvn.w	sl, r3
 800d696:	f04f 0800 	mov.w	r8, #0
 800d69a:	4631      	mov	r1, r6
 800d69c:	4620      	mov	r0, r4
 800d69e:	f000 fbb1 	bl	800de04 <_Bfree>
 800d6a2:	2f00      	cmp	r7, #0
 800d6a4:	f43f aeb4 	beq.w	800d410 <_dtoa_r+0x6d8>
 800d6a8:	f1b8 0f00 	cmp.w	r8, #0
 800d6ac:	d005      	beq.n	800d6ba <_dtoa_r+0x982>
 800d6ae:	45b8      	cmp	r8, r7
 800d6b0:	d003      	beq.n	800d6ba <_dtoa_r+0x982>
 800d6b2:	4641      	mov	r1, r8
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f000 fba5 	bl	800de04 <_Bfree>
 800d6ba:	4639      	mov	r1, r7
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f000 fba1 	bl	800de04 <_Bfree>
 800d6c2:	e6a5      	b.n	800d410 <_dtoa_r+0x6d8>
 800d6c4:	2600      	movs	r6, #0
 800d6c6:	4637      	mov	r7, r6
 800d6c8:	e7e1      	b.n	800d68e <_dtoa_r+0x956>
 800d6ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d6cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d6d0:	4637      	mov	r7, r6
 800d6d2:	e599      	b.n	800d208 <_dtoa_r+0x4d0>
 800d6d4:	9b08      	ldr	r3, [sp, #32]
 800d6d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 80fd 	beq.w	800d8da <_dtoa_r+0xba2>
 800d6e0:	2d00      	cmp	r5, #0
 800d6e2:	dd05      	ble.n	800d6f0 <_dtoa_r+0x9b8>
 800d6e4:	4639      	mov	r1, r7
 800d6e6:	462a      	mov	r2, r5
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f000 fd5d 	bl	800e1a8 <__lshift>
 800d6ee:	4607      	mov	r7, r0
 800d6f0:	9b06      	ldr	r3, [sp, #24]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d05c      	beq.n	800d7b0 <_dtoa_r+0xa78>
 800d6f6:	6879      	ldr	r1, [r7, #4]
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f000 fb43 	bl	800dd84 <_Balloc>
 800d6fe:	4605      	mov	r5, r0
 800d700:	b928      	cbnz	r0, 800d70e <_dtoa_r+0x9d6>
 800d702:	4b80      	ldr	r3, [pc, #512]	; (800d904 <_dtoa_r+0xbcc>)
 800d704:	4602      	mov	r2, r0
 800d706:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d70a:	f7ff bb2e 	b.w	800cd6a <_dtoa_r+0x32>
 800d70e:	693a      	ldr	r2, [r7, #16]
 800d710:	3202      	adds	r2, #2
 800d712:	0092      	lsls	r2, r2, #2
 800d714:	f107 010c 	add.w	r1, r7, #12
 800d718:	300c      	adds	r0, #12
 800d71a:	f000 fb25 	bl	800dd68 <memcpy>
 800d71e:	2201      	movs	r2, #1
 800d720:	4629      	mov	r1, r5
 800d722:	4620      	mov	r0, r4
 800d724:	f000 fd40 	bl	800e1a8 <__lshift>
 800d728:	9b00      	ldr	r3, [sp, #0]
 800d72a:	3301      	adds	r3, #1
 800d72c:	9301      	str	r3, [sp, #4]
 800d72e:	9b00      	ldr	r3, [sp, #0]
 800d730:	444b      	add	r3, r9
 800d732:	9307      	str	r3, [sp, #28]
 800d734:	9b02      	ldr	r3, [sp, #8]
 800d736:	f003 0301 	and.w	r3, r3, #1
 800d73a:	46b8      	mov	r8, r7
 800d73c:	9306      	str	r3, [sp, #24]
 800d73e:	4607      	mov	r7, r0
 800d740:	9b01      	ldr	r3, [sp, #4]
 800d742:	4631      	mov	r1, r6
 800d744:	3b01      	subs	r3, #1
 800d746:	4658      	mov	r0, fp
 800d748:	9302      	str	r3, [sp, #8]
 800d74a:	f7ff fa67 	bl	800cc1c <quorem>
 800d74e:	4603      	mov	r3, r0
 800d750:	3330      	adds	r3, #48	; 0x30
 800d752:	9004      	str	r0, [sp, #16]
 800d754:	4641      	mov	r1, r8
 800d756:	4658      	mov	r0, fp
 800d758:	9308      	str	r3, [sp, #32]
 800d75a:	f000 fd91 	bl	800e280 <__mcmp>
 800d75e:	463a      	mov	r2, r7
 800d760:	4681      	mov	r9, r0
 800d762:	4631      	mov	r1, r6
 800d764:	4620      	mov	r0, r4
 800d766:	f000 fda7 	bl	800e2b8 <__mdiff>
 800d76a:	68c2      	ldr	r2, [r0, #12]
 800d76c:	9b08      	ldr	r3, [sp, #32]
 800d76e:	4605      	mov	r5, r0
 800d770:	bb02      	cbnz	r2, 800d7b4 <_dtoa_r+0xa7c>
 800d772:	4601      	mov	r1, r0
 800d774:	4658      	mov	r0, fp
 800d776:	f000 fd83 	bl	800e280 <__mcmp>
 800d77a:	9b08      	ldr	r3, [sp, #32]
 800d77c:	4602      	mov	r2, r0
 800d77e:	4629      	mov	r1, r5
 800d780:	4620      	mov	r0, r4
 800d782:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d786:	f000 fb3d 	bl	800de04 <_Bfree>
 800d78a:	9b05      	ldr	r3, [sp, #20]
 800d78c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d78e:	9d01      	ldr	r5, [sp, #4]
 800d790:	ea43 0102 	orr.w	r1, r3, r2
 800d794:	9b06      	ldr	r3, [sp, #24]
 800d796:	430b      	orrs	r3, r1
 800d798:	9b08      	ldr	r3, [sp, #32]
 800d79a:	d10d      	bne.n	800d7b8 <_dtoa_r+0xa80>
 800d79c:	2b39      	cmp	r3, #57	; 0x39
 800d79e:	d029      	beq.n	800d7f4 <_dtoa_r+0xabc>
 800d7a0:	f1b9 0f00 	cmp.w	r9, #0
 800d7a4:	dd01      	ble.n	800d7aa <_dtoa_r+0xa72>
 800d7a6:	9b04      	ldr	r3, [sp, #16]
 800d7a8:	3331      	adds	r3, #49	; 0x31
 800d7aa:	9a02      	ldr	r2, [sp, #8]
 800d7ac:	7013      	strb	r3, [r2, #0]
 800d7ae:	e774      	b.n	800d69a <_dtoa_r+0x962>
 800d7b0:	4638      	mov	r0, r7
 800d7b2:	e7b9      	b.n	800d728 <_dtoa_r+0x9f0>
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	e7e2      	b.n	800d77e <_dtoa_r+0xa46>
 800d7b8:	f1b9 0f00 	cmp.w	r9, #0
 800d7bc:	db06      	blt.n	800d7cc <_dtoa_r+0xa94>
 800d7be:	9905      	ldr	r1, [sp, #20]
 800d7c0:	ea41 0909 	orr.w	r9, r1, r9
 800d7c4:	9906      	ldr	r1, [sp, #24]
 800d7c6:	ea59 0101 	orrs.w	r1, r9, r1
 800d7ca:	d120      	bne.n	800d80e <_dtoa_r+0xad6>
 800d7cc:	2a00      	cmp	r2, #0
 800d7ce:	ddec      	ble.n	800d7aa <_dtoa_r+0xa72>
 800d7d0:	4659      	mov	r1, fp
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	9301      	str	r3, [sp, #4]
 800d7d8:	f000 fce6 	bl	800e1a8 <__lshift>
 800d7dc:	4631      	mov	r1, r6
 800d7de:	4683      	mov	fp, r0
 800d7e0:	f000 fd4e 	bl	800e280 <__mcmp>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	9b01      	ldr	r3, [sp, #4]
 800d7e8:	dc02      	bgt.n	800d7f0 <_dtoa_r+0xab8>
 800d7ea:	d1de      	bne.n	800d7aa <_dtoa_r+0xa72>
 800d7ec:	07da      	lsls	r2, r3, #31
 800d7ee:	d5dc      	bpl.n	800d7aa <_dtoa_r+0xa72>
 800d7f0:	2b39      	cmp	r3, #57	; 0x39
 800d7f2:	d1d8      	bne.n	800d7a6 <_dtoa_r+0xa6e>
 800d7f4:	9a02      	ldr	r2, [sp, #8]
 800d7f6:	2339      	movs	r3, #57	; 0x39
 800d7f8:	7013      	strb	r3, [r2, #0]
 800d7fa:	462b      	mov	r3, r5
 800d7fc:	461d      	mov	r5, r3
 800d7fe:	3b01      	subs	r3, #1
 800d800:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d804:	2a39      	cmp	r2, #57	; 0x39
 800d806:	d050      	beq.n	800d8aa <_dtoa_r+0xb72>
 800d808:	3201      	adds	r2, #1
 800d80a:	701a      	strb	r2, [r3, #0]
 800d80c:	e745      	b.n	800d69a <_dtoa_r+0x962>
 800d80e:	2a00      	cmp	r2, #0
 800d810:	dd03      	ble.n	800d81a <_dtoa_r+0xae2>
 800d812:	2b39      	cmp	r3, #57	; 0x39
 800d814:	d0ee      	beq.n	800d7f4 <_dtoa_r+0xabc>
 800d816:	3301      	adds	r3, #1
 800d818:	e7c7      	b.n	800d7aa <_dtoa_r+0xa72>
 800d81a:	9a01      	ldr	r2, [sp, #4]
 800d81c:	9907      	ldr	r1, [sp, #28]
 800d81e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d822:	428a      	cmp	r2, r1
 800d824:	d02a      	beq.n	800d87c <_dtoa_r+0xb44>
 800d826:	4659      	mov	r1, fp
 800d828:	2300      	movs	r3, #0
 800d82a:	220a      	movs	r2, #10
 800d82c:	4620      	mov	r0, r4
 800d82e:	f000 fb0b 	bl	800de48 <__multadd>
 800d832:	45b8      	cmp	r8, r7
 800d834:	4683      	mov	fp, r0
 800d836:	f04f 0300 	mov.w	r3, #0
 800d83a:	f04f 020a 	mov.w	r2, #10
 800d83e:	4641      	mov	r1, r8
 800d840:	4620      	mov	r0, r4
 800d842:	d107      	bne.n	800d854 <_dtoa_r+0xb1c>
 800d844:	f000 fb00 	bl	800de48 <__multadd>
 800d848:	4680      	mov	r8, r0
 800d84a:	4607      	mov	r7, r0
 800d84c:	9b01      	ldr	r3, [sp, #4]
 800d84e:	3301      	adds	r3, #1
 800d850:	9301      	str	r3, [sp, #4]
 800d852:	e775      	b.n	800d740 <_dtoa_r+0xa08>
 800d854:	f000 faf8 	bl	800de48 <__multadd>
 800d858:	4639      	mov	r1, r7
 800d85a:	4680      	mov	r8, r0
 800d85c:	2300      	movs	r3, #0
 800d85e:	220a      	movs	r2, #10
 800d860:	4620      	mov	r0, r4
 800d862:	f000 faf1 	bl	800de48 <__multadd>
 800d866:	4607      	mov	r7, r0
 800d868:	e7f0      	b.n	800d84c <_dtoa_r+0xb14>
 800d86a:	f1b9 0f00 	cmp.w	r9, #0
 800d86e:	9a00      	ldr	r2, [sp, #0]
 800d870:	bfcc      	ite	gt
 800d872:	464d      	movgt	r5, r9
 800d874:	2501      	movle	r5, #1
 800d876:	4415      	add	r5, r2
 800d878:	f04f 0800 	mov.w	r8, #0
 800d87c:	4659      	mov	r1, fp
 800d87e:	2201      	movs	r2, #1
 800d880:	4620      	mov	r0, r4
 800d882:	9301      	str	r3, [sp, #4]
 800d884:	f000 fc90 	bl	800e1a8 <__lshift>
 800d888:	4631      	mov	r1, r6
 800d88a:	4683      	mov	fp, r0
 800d88c:	f000 fcf8 	bl	800e280 <__mcmp>
 800d890:	2800      	cmp	r0, #0
 800d892:	dcb2      	bgt.n	800d7fa <_dtoa_r+0xac2>
 800d894:	d102      	bne.n	800d89c <_dtoa_r+0xb64>
 800d896:	9b01      	ldr	r3, [sp, #4]
 800d898:	07db      	lsls	r3, r3, #31
 800d89a:	d4ae      	bmi.n	800d7fa <_dtoa_r+0xac2>
 800d89c:	462b      	mov	r3, r5
 800d89e:	461d      	mov	r5, r3
 800d8a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8a4:	2a30      	cmp	r2, #48	; 0x30
 800d8a6:	d0fa      	beq.n	800d89e <_dtoa_r+0xb66>
 800d8a8:	e6f7      	b.n	800d69a <_dtoa_r+0x962>
 800d8aa:	9a00      	ldr	r2, [sp, #0]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d1a5      	bne.n	800d7fc <_dtoa_r+0xac4>
 800d8b0:	f10a 0a01 	add.w	sl, sl, #1
 800d8b4:	2331      	movs	r3, #49	; 0x31
 800d8b6:	e779      	b.n	800d7ac <_dtoa_r+0xa74>
 800d8b8:	4b13      	ldr	r3, [pc, #76]	; (800d908 <_dtoa_r+0xbd0>)
 800d8ba:	f7ff baaf 	b.w	800ce1c <_dtoa_r+0xe4>
 800d8be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f47f aa86 	bne.w	800cdd2 <_dtoa_r+0x9a>
 800d8c6:	4b11      	ldr	r3, [pc, #68]	; (800d90c <_dtoa_r+0xbd4>)
 800d8c8:	f7ff baa8 	b.w	800ce1c <_dtoa_r+0xe4>
 800d8cc:	f1b9 0f00 	cmp.w	r9, #0
 800d8d0:	dc03      	bgt.n	800d8da <_dtoa_r+0xba2>
 800d8d2:	9b05      	ldr	r3, [sp, #20]
 800d8d4:	2b02      	cmp	r3, #2
 800d8d6:	f73f aec9 	bgt.w	800d66c <_dtoa_r+0x934>
 800d8da:	9d00      	ldr	r5, [sp, #0]
 800d8dc:	4631      	mov	r1, r6
 800d8de:	4658      	mov	r0, fp
 800d8e0:	f7ff f99c 	bl	800cc1c <quorem>
 800d8e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d8e8:	f805 3b01 	strb.w	r3, [r5], #1
 800d8ec:	9a00      	ldr	r2, [sp, #0]
 800d8ee:	1aaa      	subs	r2, r5, r2
 800d8f0:	4591      	cmp	r9, r2
 800d8f2:	ddba      	ble.n	800d86a <_dtoa_r+0xb32>
 800d8f4:	4659      	mov	r1, fp
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	220a      	movs	r2, #10
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	f000 faa4 	bl	800de48 <__multadd>
 800d900:	4683      	mov	fp, r0
 800d902:	e7eb      	b.n	800d8dc <_dtoa_r+0xba4>
 800d904:	0800f1b7 	.word	0x0800f1b7
 800d908:	0800f110 	.word	0x0800f110
 800d90c:	0800f134 	.word	0x0800f134

0800d910 <__sflush_r>:
 800d910:	898a      	ldrh	r2, [r1, #12]
 800d912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d916:	4605      	mov	r5, r0
 800d918:	0710      	lsls	r0, r2, #28
 800d91a:	460c      	mov	r4, r1
 800d91c:	d458      	bmi.n	800d9d0 <__sflush_r+0xc0>
 800d91e:	684b      	ldr	r3, [r1, #4]
 800d920:	2b00      	cmp	r3, #0
 800d922:	dc05      	bgt.n	800d930 <__sflush_r+0x20>
 800d924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d926:	2b00      	cmp	r3, #0
 800d928:	dc02      	bgt.n	800d930 <__sflush_r+0x20>
 800d92a:	2000      	movs	r0, #0
 800d92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d932:	2e00      	cmp	r6, #0
 800d934:	d0f9      	beq.n	800d92a <__sflush_r+0x1a>
 800d936:	2300      	movs	r3, #0
 800d938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d93c:	682f      	ldr	r7, [r5, #0]
 800d93e:	602b      	str	r3, [r5, #0]
 800d940:	d032      	beq.n	800d9a8 <__sflush_r+0x98>
 800d942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d944:	89a3      	ldrh	r3, [r4, #12]
 800d946:	075a      	lsls	r2, r3, #29
 800d948:	d505      	bpl.n	800d956 <__sflush_r+0x46>
 800d94a:	6863      	ldr	r3, [r4, #4]
 800d94c:	1ac0      	subs	r0, r0, r3
 800d94e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d950:	b10b      	cbz	r3, 800d956 <__sflush_r+0x46>
 800d952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d954:	1ac0      	subs	r0, r0, r3
 800d956:	2300      	movs	r3, #0
 800d958:	4602      	mov	r2, r0
 800d95a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d95c:	6a21      	ldr	r1, [r4, #32]
 800d95e:	4628      	mov	r0, r5
 800d960:	47b0      	blx	r6
 800d962:	1c43      	adds	r3, r0, #1
 800d964:	89a3      	ldrh	r3, [r4, #12]
 800d966:	d106      	bne.n	800d976 <__sflush_r+0x66>
 800d968:	6829      	ldr	r1, [r5, #0]
 800d96a:	291d      	cmp	r1, #29
 800d96c:	d82c      	bhi.n	800d9c8 <__sflush_r+0xb8>
 800d96e:	4a2a      	ldr	r2, [pc, #168]	; (800da18 <__sflush_r+0x108>)
 800d970:	40ca      	lsrs	r2, r1
 800d972:	07d6      	lsls	r6, r2, #31
 800d974:	d528      	bpl.n	800d9c8 <__sflush_r+0xb8>
 800d976:	2200      	movs	r2, #0
 800d978:	6062      	str	r2, [r4, #4]
 800d97a:	04d9      	lsls	r1, r3, #19
 800d97c:	6922      	ldr	r2, [r4, #16]
 800d97e:	6022      	str	r2, [r4, #0]
 800d980:	d504      	bpl.n	800d98c <__sflush_r+0x7c>
 800d982:	1c42      	adds	r2, r0, #1
 800d984:	d101      	bne.n	800d98a <__sflush_r+0x7a>
 800d986:	682b      	ldr	r3, [r5, #0]
 800d988:	b903      	cbnz	r3, 800d98c <__sflush_r+0x7c>
 800d98a:	6560      	str	r0, [r4, #84]	; 0x54
 800d98c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d98e:	602f      	str	r7, [r5, #0]
 800d990:	2900      	cmp	r1, #0
 800d992:	d0ca      	beq.n	800d92a <__sflush_r+0x1a>
 800d994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d998:	4299      	cmp	r1, r3
 800d99a:	d002      	beq.n	800d9a2 <__sflush_r+0x92>
 800d99c:	4628      	mov	r0, r5
 800d99e:	f000 fd7f 	bl	800e4a0 <_free_r>
 800d9a2:	2000      	movs	r0, #0
 800d9a4:	6360      	str	r0, [r4, #52]	; 0x34
 800d9a6:	e7c1      	b.n	800d92c <__sflush_r+0x1c>
 800d9a8:	6a21      	ldr	r1, [r4, #32]
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	47b0      	blx	r6
 800d9b0:	1c41      	adds	r1, r0, #1
 800d9b2:	d1c7      	bne.n	800d944 <__sflush_r+0x34>
 800d9b4:	682b      	ldr	r3, [r5, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d0c4      	beq.n	800d944 <__sflush_r+0x34>
 800d9ba:	2b1d      	cmp	r3, #29
 800d9bc:	d001      	beq.n	800d9c2 <__sflush_r+0xb2>
 800d9be:	2b16      	cmp	r3, #22
 800d9c0:	d101      	bne.n	800d9c6 <__sflush_r+0xb6>
 800d9c2:	602f      	str	r7, [r5, #0]
 800d9c4:	e7b1      	b.n	800d92a <__sflush_r+0x1a>
 800d9c6:	89a3      	ldrh	r3, [r4, #12]
 800d9c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9cc:	81a3      	strh	r3, [r4, #12]
 800d9ce:	e7ad      	b.n	800d92c <__sflush_r+0x1c>
 800d9d0:	690f      	ldr	r7, [r1, #16]
 800d9d2:	2f00      	cmp	r7, #0
 800d9d4:	d0a9      	beq.n	800d92a <__sflush_r+0x1a>
 800d9d6:	0793      	lsls	r3, r2, #30
 800d9d8:	680e      	ldr	r6, [r1, #0]
 800d9da:	bf08      	it	eq
 800d9dc:	694b      	ldreq	r3, [r1, #20]
 800d9de:	600f      	str	r7, [r1, #0]
 800d9e0:	bf18      	it	ne
 800d9e2:	2300      	movne	r3, #0
 800d9e4:	eba6 0807 	sub.w	r8, r6, r7
 800d9e8:	608b      	str	r3, [r1, #8]
 800d9ea:	f1b8 0f00 	cmp.w	r8, #0
 800d9ee:	dd9c      	ble.n	800d92a <__sflush_r+0x1a>
 800d9f0:	6a21      	ldr	r1, [r4, #32]
 800d9f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d9f4:	4643      	mov	r3, r8
 800d9f6:	463a      	mov	r2, r7
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	47b0      	blx	r6
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	dc06      	bgt.n	800da0e <__sflush_r+0xfe>
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da06:	81a3      	strh	r3, [r4, #12]
 800da08:	f04f 30ff 	mov.w	r0, #4294967295
 800da0c:	e78e      	b.n	800d92c <__sflush_r+0x1c>
 800da0e:	4407      	add	r7, r0
 800da10:	eba8 0800 	sub.w	r8, r8, r0
 800da14:	e7e9      	b.n	800d9ea <__sflush_r+0xda>
 800da16:	bf00      	nop
 800da18:	20400001 	.word	0x20400001

0800da1c <_fflush_r>:
 800da1c:	b538      	push	{r3, r4, r5, lr}
 800da1e:	690b      	ldr	r3, [r1, #16]
 800da20:	4605      	mov	r5, r0
 800da22:	460c      	mov	r4, r1
 800da24:	b913      	cbnz	r3, 800da2c <_fflush_r+0x10>
 800da26:	2500      	movs	r5, #0
 800da28:	4628      	mov	r0, r5
 800da2a:	bd38      	pop	{r3, r4, r5, pc}
 800da2c:	b118      	cbz	r0, 800da36 <_fflush_r+0x1a>
 800da2e:	6983      	ldr	r3, [r0, #24]
 800da30:	b90b      	cbnz	r3, 800da36 <_fflush_r+0x1a>
 800da32:	f000 f887 	bl	800db44 <__sinit>
 800da36:	4b14      	ldr	r3, [pc, #80]	; (800da88 <_fflush_r+0x6c>)
 800da38:	429c      	cmp	r4, r3
 800da3a:	d11b      	bne.n	800da74 <_fflush_r+0x58>
 800da3c:	686c      	ldr	r4, [r5, #4]
 800da3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d0ef      	beq.n	800da26 <_fflush_r+0xa>
 800da46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da48:	07d0      	lsls	r0, r2, #31
 800da4a:	d404      	bmi.n	800da56 <_fflush_r+0x3a>
 800da4c:	0599      	lsls	r1, r3, #22
 800da4e:	d402      	bmi.n	800da56 <_fflush_r+0x3a>
 800da50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da52:	f000 f91a 	bl	800dc8a <__retarget_lock_acquire_recursive>
 800da56:	4628      	mov	r0, r5
 800da58:	4621      	mov	r1, r4
 800da5a:	f7ff ff59 	bl	800d910 <__sflush_r>
 800da5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da60:	07da      	lsls	r2, r3, #31
 800da62:	4605      	mov	r5, r0
 800da64:	d4e0      	bmi.n	800da28 <_fflush_r+0xc>
 800da66:	89a3      	ldrh	r3, [r4, #12]
 800da68:	059b      	lsls	r3, r3, #22
 800da6a:	d4dd      	bmi.n	800da28 <_fflush_r+0xc>
 800da6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da6e:	f000 f90d 	bl	800dc8c <__retarget_lock_release_recursive>
 800da72:	e7d9      	b.n	800da28 <_fflush_r+0xc>
 800da74:	4b05      	ldr	r3, [pc, #20]	; (800da8c <_fflush_r+0x70>)
 800da76:	429c      	cmp	r4, r3
 800da78:	d101      	bne.n	800da7e <_fflush_r+0x62>
 800da7a:	68ac      	ldr	r4, [r5, #8]
 800da7c:	e7df      	b.n	800da3e <_fflush_r+0x22>
 800da7e:	4b04      	ldr	r3, [pc, #16]	; (800da90 <_fflush_r+0x74>)
 800da80:	429c      	cmp	r4, r3
 800da82:	bf08      	it	eq
 800da84:	68ec      	ldreq	r4, [r5, #12]
 800da86:	e7da      	b.n	800da3e <_fflush_r+0x22>
 800da88:	0800f1e8 	.word	0x0800f1e8
 800da8c:	0800f208 	.word	0x0800f208
 800da90:	0800f1c8 	.word	0x0800f1c8

0800da94 <std>:
 800da94:	2300      	movs	r3, #0
 800da96:	b510      	push	{r4, lr}
 800da98:	4604      	mov	r4, r0
 800da9a:	e9c0 3300 	strd	r3, r3, [r0]
 800da9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800daa2:	6083      	str	r3, [r0, #8]
 800daa4:	8181      	strh	r1, [r0, #12]
 800daa6:	6643      	str	r3, [r0, #100]	; 0x64
 800daa8:	81c2      	strh	r2, [r0, #14]
 800daaa:	6183      	str	r3, [r0, #24]
 800daac:	4619      	mov	r1, r3
 800daae:	2208      	movs	r2, #8
 800dab0:	305c      	adds	r0, #92	; 0x5c
 800dab2:	f7fe faf3 	bl	800c09c <memset>
 800dab6:	4b05      	ldr	r3, [pc, #20]	; (800dacc <std+0x38>)
 800dab8:	6263      	str	r3, [r4, #36]	; 0x24
 800daba:	4b05      	ldr	r3, [pc, #20]	; (800dad0 <std+0x3c>)
 800dabc:	62a3      	str	r3, [r4, #40]	; 0x28
 800dabe:	4b05      	ldr	r3, [pc, #20]	; (800dad4 <std+0x40>)
 800dac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dac2:	4b05      	ldr	r3, [pc, #20]	; (800dad8 <std+0x44>)
 800dac4:	6224      	str	r4, [r4, #32]
 800dac6:	6323      	str	r3, [r4, #48]	; 0x30
 800dac8:	bd10      	pop	{r4, pc}
 800daca:	bf00      	nop
 800dacc:	0800e8c9 	.word	0x0800e8c9
 800dad0:	0800e8eb 	.word	0x0800e8eb
 800dad4:	0800e923 	.word	0x0800e923
 800dad8:	0800e947 	.word	0x0800e947

0800dadc <_cleanup_r>:
 800dadc:	4901      	ldr	r1, [pc, #4]	; (800dae4 <_cleanup_r+0x8>)
 800dade:	f000 b8af 	b.w	800dc40 <_fwalk_reent>
 800dae2:	bf00      	nop
 800dae4:	0800da1d 	.word	0x0800da1d

0800dae8 <__sfmoreglue>:
 800dae8:	b570      	push	{r4, r5, r6, lr}
 800daea:	1e4a      	subs	r2, r1, #1
 800daec:	2568      	movs	r5, #104	; 0x68
 800daee:	4355      	muls	r5, r2
 800daf0:	460e      	mov	r6, r1
 800daf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800daf6:	f000 fd23 	bl	800e540 <_malloc_r>
 800dafa:	4604      	mov	r4, r0
 800dafc:	b140      	cbz	r0, 800db10 <__sfmoreglue+0x28>
 800dafe:	2100      	movs	r1, #0
 800db00:	e9c0 1600 	strd	r1, r6, [r0]
 800db04:	300c      	adds	r0, #12
 800db06:	60a0      	str	r0, [r4, #8]
 800db08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800db0c:	f7fe fac6 	bl	800c09c <memset>
 800db10:	4620      	mov	r0, r4
 800db12:	bd70      	pop	{r4, r5, r6, pc}

0800db14 <__sfp_lock_acquire>:
 800db14:	4801      	ldr	r0, [pc, #4]	; (800db1c <__sfp_lock_acquire+0x8>)
 800db16:	f000 b8b8 	b.w	800dc8a <__retarget_lock_acquire_recursive>
 800db1a:	bf00      	nop
 800db1c:	200012b0 	.word	0x200012b0

0800db20 <__sfp_lock_release>:
 800db20:	4801      	ldr	r0, [pc, #4]	; (800db28 <__sfp_lock_release+0x8>)
 800db22:	f000 b8b3 	b.w	800dc8c <__retarget_lock_release_recursive>
 800db26:	bf00      	nop
 800db28:	200012b0 	.word	0x200012b0

0800db2c <__sinit_lock_acquire>:
 800db2c:	4801      	ldr	r0, [pc, #4]	; (800db34 <__sinit_lock_acquire+0x8>)
 800db2e:	f000 b8ac 	b.w	800dc8a <__retarget_lock_acquire_recursive>
 800db32:	bf00      	nop
 800db34:	200012ab 	.word	0x200012ab

0800db38 <__sinit_lock_release>:
 800db38:	4801      	ldr	r0, [pc, #4]	; (800db40 <__sinit_lock_release+0x8>)
 800db3a:	f000 b8a7 	b.w	800dc8c <__retarget_lock_release_recursive>
 800db3e:	bf00      	nop
 800db40:	200012ab 	.word	0x200012ab

0800db44 <__sinit>:
 800db44:	b510      	push	{r4, lr}
 800db46:	4604      	mov	r4, r0
 800db48:	f7ff fff0 	bl	800db2c <__sinit_lock_acquire>
 800db4c:	69a3      	ldr	r3, [r4, #24]
 800db4e:	b11b      	cbz	r3, 800db58 <__sinit+0x14>
 800db50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db54:	f7ff bff0 	b.w	800db38 <__sinit_lock_release>
 800db58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800db5c:	6523      	str	r3, [r4, #80]	; 0x50
 800db5e:	4b13      	ldr	r3, [pc, #76]	; (800dbac <__sinit+0x68>)
 800db60:	4a13      	ldr	r2, [pc, #76]	; (800dbb0 <__sinit+0x6c>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	62a2      	str	r2, [r4, #40]	; 0x28
 800db66:	42a3      	cmp	r3, r4
 800db68:	bf04      	itt	eq
 800db6a:	2301      	moveq	r3, #1
 800db6c:	61a3      	streq	r3, [r4, #24]
 800db6e:	4620      	mov	r0, r4
 800db70:	f000 f820 	bl	800dbb4 <__sfp>
 800db74:	6060      	str	r0, [r4, #4]
 800db76:	4620      	mov	r0, r4
 800db78:	f000 f81c 	bl	800dbb4 <__sfp>
 800db7c:	60a0      	str	r0, [r4, #8]
 800db7e:	4620      	mov	r0, r4
 800db80:	f000 f818 	bl	800dbb4 <__sfp>
 800db84:	2200      	movs	r2, #0
 800db86:	60e0      	str	r0, [r4, #12]
 800db88:	2104      	movs	r1, #4
 800db8a:	6860      	ldr	r0, [r4, #4]
 800db8c:	f7ff ff82 	bl	800da94 <std>
 800db90:	68a0      	ldr	r0, [r4, #8]
 800db92:	2201      	movs	r2, #1
 800db94:	2109      	movs	r1, #9
 800db96:	f7ff ff7d 	bl	800da94 <std>
 800db9a:	68e0      	ldr	r0, [r4, #12]
 800db9c:	2202      	movs	r2, #2
 800db9e:	2112      	movs	r1, #18
 800dba0:	f7ff ff78 	bl	800da94 <std>
 800dba4:	2301      	movs	r3, #1
 800dba6:	61a3      	str	r3, [r4, #24]
 800dba8:	e7d2      	b.n	800db50 <__sinit+0xc>
 800dbaa:	bf00      	nop
 800dbac:	0800f0fc 	.word	0x0800f0fc
 800dbb0:	0800dadd 	.word	0x0800dadd

0800dbb4 <__sfp>:
 800dbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb6:	4607      	mov	r7, r0
 800dbb8:	f7ff ffac 	bl	800db14 <__sfp_lock_acquire>
 800dbbc:	4b1e      	ldr	r3, [pc, #120]	; (800dc38 <__sfp+0x84>)
 800dbbe:	681e      	ldr	r6, [r3, #0]
 800dbc0:	69b3      	ldr	r3, [r6, #24]
 800dbc2:	b913      	cbnz	r3, 800dbca <__sfp+0x16>
 800dbc4:	4630      	mov	r0, r6
 800dbc6:	f7ff ffbd 	bl	800db44 <__sinit>
 800dbca:	3648      	adds	r6, #72	; 0x48
 800dbcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dbd0:	3b01      	subs	r3, #1
 800dbd2:	d503      	bpl.n	800dbdc <__sfp+0x28>
 800dbd4:	6833      	ldr	r3, [r6, #0]
 800dbd6:	b30b      	cbz	r3, 800dc1c <__sfp+0x68>
 800dbd8:	6836      	ldr	r6, [r6, #0]
 800dbda:	e7f7      	b.n	800dbcc <__sfp+0x18>
 800dbdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dbe0:	b9d5      	cbnz	r5, 800dc18 <__sfp+0x64>
 800dbe2:	4b16      	ldr	r3, [pc, #88]	; (800dc3c <__sfp+0x88>)
 800dbe4:	60e3      	str	r3, [r4, #12]
 800dbe6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dbea:	6665      	str	r5, [r4, #100]	; 0x64
 800dbec:	f000 f84c 	bl	800dc88 <__retarget_lock_init_recursive>
 800dbf0:	f7ff ff96 	bl	800db20 <__sfp_lock_release>
 800dbf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dbf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dbfc:	6025      	str	r5, [r4, #0]
 800dbfe:	61a5      	str	r5, [r4, #24]
 800dc00:	2208      	movs	r2, #8
 800dc02:	4629      	mov	r1, r5
 800dc04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dc08:	f7fe fa48 	bl	800c09c <memset>
 800dc0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dc10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dc14:	4620      	mov	r0, r4
 800dc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc18:	3468      	adds	r4, #104	; 0x68
 800dc1a:	e7d9      	b.n	800dbd0 <__sfp+0x1c>
 800dc1c:	2104      	movs	r1, #4
 800dc1e:	4638      	mov	r0, r7
 800dc20:	f7ff ff62 	bl	800dae8 <__sfmoreglue>
 800dc24:	4604      	mov	r4, r0
 800dc26:	6030      	str	r0, [r6, #0]
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d1d5      	bne.n	800dbd8 <__sfp+0x24>
 800dc2c:	f7ff ff78 	bl	800db20 <__sfp_lock_release>
 800dc30:	230c      	movs	r3, #12
 800dc32:	603b      	str	r3, [r7, #0]
 800dc34:	e7ee      	b.n	800dc14 <__sfp+0x60>
 800dc36:	bf00      	nop
 800dc38:	0800f0fc 	.word	0x0800f0fc
 800dc3c:	ffff0001 	.word	0xffff0001

0800dc40 <_fwalk_reent>:
 800dc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc44:	4606      	mov	r6, r0
 800dc46:	4688      	mov	r8, r1
 800dc48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dc4c:	2700      	movs	r7, #0
 800dc4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc52:	f1b9 0901 	subs.w	r9, r9, #1
 800dc56:	d505      	bpl.n	800dc64 <_fwalk_reent+0x24>
 800dc58:	6824      	ldr	r4, [r4, #0]
 800dc5a:	2c00      	cmp	r4, #0
 800dc5c:	d1f7      	bne.n	800dc4e <_fwalk_reent+0xe>
 800dc5e:	4638      	mov	r0, r7
 800dc60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc64:	89ab      	ldrh	r3, [r5, #12]
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d907      	bls.n	800dc7a <_fwalk_reent+0x3a>
 800dc6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	d003      	beq.n	800dc7a <_fwalk_reent+0x3a>
 800dc72:	4629      	mov	r1, r5
 800dc74:	4630      	mov	r0, r6
 800dc76:	47c0      	blx	r8
 800dc78:	4307      	orrs	r7, r0
 800dc7a:	3568      	adds	r5, #104	; 0x68
 800dc7c:	e7e9      	b.n	800dc52 <_fwalk_reent+0x12>
	...

0800dc80 <_localeconv_r>:
 800dc80:	4800      	ldr	r0, [pc, #0]	; (800dc84 <_localeconv_r+0x4>)
 800dc82:	4770      	bx	lr
 800dc84:	20000170 	.word	0x20000170

0800dc88 <__retarget_lock_init_recursive>:
 800dc88:	4770      	bx	lr

0800dc8a <__retarget_lock_acquire_recursive>:
 800dc8a:	4770      	bx	lr

0800dc8c <__retarget_lock_release_recursive>:
 800dc8c:	4770      	bx	lr

0800dc8e <__swhatbuf_r>:
 800dc8e:	b570      	push	{r4, r5, r6, lr}
 800dc90:	460e      	mov	r6, r1
 800dc92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc96:	2900      	cmp	r1, #0
 800dc98:	b096      	sub	sp, #88	; 0x58
 800dc9a:	4614      	mov	r4, r2
 800dc9c:	461d      	mov	r5, r3
 800dc9e:	da07      	bge.n	800dcb0 <__swhatbuf_r+0x22>
 800dca0:	2300      	movs	r3, #0
 800dca2:	602b      	str	r3, [r5, #0]
 800dca4:	89b3      	ldrh	r3, [r6, #12]
 800dca6:	061a      	lsls	r2, r3, #24
 800dca8:	d410      	bmi.n	800dccc <__swhatbuf_r+0x3e>
 800dcaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcae:	e00e      	b.n	800dcce <__swhatbuf_r+0x40>
 800dcb0:	466a      	mov	r2, sp
 800dcb2:	f000 fe9f 	bl	800e9f4 <_fstat_r>
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	dbf2      	blt.n	800dca0 <__swhatbuf_r+0x12>
 800dcba:	9a01      	ldr	r2, [sp, #4]
 800dcbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dcc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dcc4:	425a      	negs	r2, r3
 800dcc6:	415a      	adcs	r2, r3
 800dcc8:	602a      	str	r2, [r5, #0]
 800dcca:	e7ee      	b.n	800dcaa <__swhatbuf_r+0x1c>
 800dccc:	2340      	movs	r3, #64	; 0x40
 800dcce:	2000      	movs	r0, #0
 800dcd0:	6023      	str	r3, [r4, #0]
 800dcd2:	b016      	add	sp, #88	; 0x58
 800dcd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dcd8 <__smakebuf_r>:
 800dcd8:	898b      	ldrh	r3, [r1, #12]
 800dcda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcdc:	079d      	lsls	r5, r3, #30
 800dcde:	4606      	mov	r6, r0
 800dce0:	460c      	mov	r4, r1
 800dce2:	d507      	bpl.n	800dcf4 <__smakebuf_r+0x1c>
 800dce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dce8:	6023      	str	r3, [r4, #0]
 800dcea:	6123      	str	r3, [r4, #16]
 800dcec:	2301      	movs	r3, #1
 800dcee:	6163      	str	r3, [r4, #20]
 800dcf0:	b002      	add	sp, #8
 800dcf2:	bd70      	pop	{r4, r5, r6, pc}
 800dcf4:	ab01      	add	r3, sp, #4
 800dcf6:	466a      	mov	r2, sp
 800dcf8:	f7ff ffc9 	bl	800dc8e <__swhatbuf_r>
 800dcfc:	9900      	ldr	r1, [sp, #0]
 800dcfe:	4605      	mov	r5, r0
 800dd00:	4630      	mov	r0, r6
 800dd02:	f000 fc1d 	bl	800e540 <_malloc_r>
 800dd06:	b948      	cbnz	r0, 800dd1c <__smakebuf_r+0x44>
 800dd08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd0c:	059a      	lsls	r2, r3, #22
 800dd0e:	d4ef      	bmi.n	800dcf0 <__smakebuf_r+0x18>
 800dd10:	f023 0303 	bic.w	r3, r3, #3
 800dd14:	f043 0302 	orr.w	r3, r3, #2
 800dd18:	81a3      	strh	r3, [r4, #12]
 800dd1a:	e7e3      	b.n	800dce4 <__smakebuf_r+0xc>
 800dd1c:	4b0d      	ldr	r3, [pc, #52]	; (800dd54 <__smakebuf_r+0x7c>)
 800dd1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800dd20:	89a3      	ldrh	r3, [r4, #12]
 800dd22:	6020      	str	r0, [r4, #0]
 800dd24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd28:	81a3      	strh	r3, [r4, #12]
 800dd2a:	9b00      	ldr	r3, [sp, #0]
 800dd2c:	6163      	str	r3, [r4, #20]
 800dd2e:	9b01      	ldr	r3, [sp, #4]
 800dd30:	6120      	str	r0, [r4, #16]
 800dd32:	b15b      	cbz	r3, 800dd4c <__smakebuf_r+0x74>
 800dd34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd38:	4630      	mov	r0, r6
 800dd3a:	f000 fe6d 	bl	800ea18 <_isatty_r>
 800dd3e:	b128      	cbz	r0, 800dd4c <__smakebuf_r+0x74>
 800dd40:	89a3      	ldrh	r3, [r4, #12]
 800dd42:	f023 0303 	bic.w	r3, r3, #3
 800dd46:	f043 0301 	orr.w	r3, r3, #1
 800dd4a:	81a3      	strh	r3, [r4, #12]
 800dd4c:	89a0      	ldrh	r0, [r4, #12]
 800dd4e:	4305      	orrs	r5, r0
 800dd50:	81a5      	strh	r5, [r4, #12]
 800dd52:	e7cd      	b.n	800dcf0 <__smakebuf_r+0x18>
 800dd54:	0800dadd 	.word	0x0800dadd

0800dd58 <malloc>:
 800dd58:	4b02      	ldr	r3, [pc, #8]	; (800dd64 <malloc+0xc>)
 800dd5a:	4601      	mov	r1, r0
 800dd5c:	6818      	ldr	r0, [r3, #0]
 800dd5e:	f000 bbef 	b.w	800e540 <_malloc_r>
 800dd62:	bf00      	nop
 800dd64:	2000001c 	.word	0x2000001c

0800dd68 <memcpy>:
 800dd68:	440a      	add	r2, r1
 800dd6a:	4291      	cmp	r1, r2
 800dd6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd70:	d100      	bne.n	800dd74 <memcpy+0xc>
 800dd72:	4770      	bx	lr
 800dd74:	b510      	push	{r4, lr}
 800dd76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd7e:	4291      	cmp	r1, r2
 800dd80:	d1f9      	bne.n	800dd76 <memcpy+0xe>
 800dd82:	bd10      	pop	{r4, pc}

0800dd84 <_Balloc>:
 800dd84:	b570      	push	{r4, r5, r6, lr}
 800dd86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd88:	4604      	mov	r4, r0
 800dd8a:	460d      	mov	r5, r1
 800dd8c:	b976      	cbnz	r6, 800ddac <_Balloc+0x28>
 800dd8e:	2010      	movs	r0, #16
 800dd90:	f7ff ffe2 	bl	800dd58 <malloc>
 800dd94:	4602      	mov	r2, r0
 800dd96:	6260      	str	r0, [r4, #36]	; 0x24
 800dd98:	b920      	cbnz	r0, 800dda4 <_Balloc+0x20>
 800dd9a:	4b18      	ldr	r3, [pc, #96]	; (800ddfc <_Balloc+0x78>)
 800dd9c:	4818      	ldr	r0, [pc, #96]	; (800de00 <_Balloc+0x7c>)
 800dd9e:	2166      	movs	r1, #102	; 0x66
 800dda0:	f000 fde8 	bl	800e974 <__assert_func>
 800dda4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dda8:	6006      	str	r6, [r0, #0]
 800ddaa:	60c6      	str	r6, [r0, #12]
 800ddac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ddae:	68f3      	ldr	r3, [r6, #12]
 800ddb0:	b183      	cbz	r3, 800ddd4 <_Balloc+0x50>
 800ddb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddb4:	68db      	ldr	r3, [r3, #12]
 800ddb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ddba:	b9b8      	cbnz	r0, 800ddec <_Balloc+0x68>
 800ddbc:	2101      	movs	r1, #1
 800ddbe:	fa01 f605 	lsl.w	r6, r1, r5
 800ddc2:	1d72      	adds	r2, r6, #5
 800ddc4:	0092      	lsls	r2, r2, #2
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f000 fb5a 	bl	800e480 <_calloc_r>
 800ddcc:	b160      	cbz	r0, 800dde8 <_Balloc+0x64>
 800ddce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ddd2:	e00e      	b.n	800ddf2 <_Balloc+0x6e>
 800ddd4:	2221      	movs	r2, #33	; 0x21
 800ddd6:	2104      	movs	r1, #4
 800ddd8:	4620      	mov	r0, r4
 800ddda:	f000 fb51 	bl	800e480 <_calloc_r>
 800ddde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dde0:	60f0      	str	r0, [r6, #12]
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d1e4      	bne.n	800ddb2 <_Balloc+0x2e>
 800dde8:	2000      	movs	r0, #0
 800ddea:	bd70      	pop	{r4, r5, r6, pc}
 800ddec:	6802      	ldr	r2, [r0, #0]
 800ddee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ddf8:	e7f7      	b.n	800ddea <_Balloc+0x66>
 800ddfa:	bf00      	nop
 800ddfc:	0800f141 	.word	0x0800f141
 800de00:	0800f228 	.word	0x0800f228

0800de04 <_Bfree>:
 800de04:	b570      	push	{r4, r5, r6, lr}
 800de06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de08:	4605      	mov	r5, r0
 800de0a:	460c      	mov	r4, r1
 800de0c:	b976      	cbnz	r6, 800de2c <_Bfree+0x28>
 800de0e:	2010      	movs	r0, #16
 800de10:	f7ff ffa2 	bl	800dd58 <malloc>
 800de14:	4602      	mov	r2, r0
 800de16:	6268      	str	r0, [r5, #36]	; 0x24
 800de18:	b920      	cbnz	r0, 800de24 <_Bfree+0x20>
 800de1a:	4b09      	ldr	r3, [pc, #36]	; (800de40 <_Bfree+0x3c>)
 800de1c:	4809      	ldr	r0, [pc, #36]	; (800de44 <_Bfree+0x40>)
 800de1e:	218a      	movs	r1, #138	; 0x8a
 800de20:	f000 fda8 	bl	800e974 <__assert_func>
 800de24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de28:	6006      	str	r6, [r0, #0]
 800de2a:	60c6      	str	r6, [r0, #12]
 800de2c:	b13c      	cbz	r4, 800de3e <_Bfree+0x3a>
 800de2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800de30:	6862      	ldr	r2, [r4, #4]
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de38:	6021      	str	r1, [r4, #0]
 800de3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de3e:	bd70      	pop	{r4, r5, r6, pc}
 800de40:	0800f141 	.word	0x0800f141
 800de44:	0800f228 	.word	0x0800f228

0800de48 <__multadd>:
 800de48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de4c:	690e      	ldr	r6, [r1, #16]
 800de4e:	4607      	mov	r7, r0
 800de50:	4698      	mov	r8, r3
 800de52:	460c      	mov	r4, r1
 800de54:	f101 0014 	add.w	r0, r1, #20
 800de58:	2300      	movs	r3, #0
 800de5a:	6805      	ldr	r5, [r0, #0]
 800de5c:	b2a9      	uxth	r1, r5
 800de5e:	fb02 8101 	mla	r1, r2, r1, r8
 800de62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800de66:	0c2d      	lsrs	r5, r5, #16
 800de68:	fb02 c505 	mla	r5, r2, r5, ip
 800de6c:	b289      	uxth	r1, r1
 800de6e:	3301      	adds	r3, #1
 800de70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800de74:	429e      	cmp	r6, r3
 800de76:	f840 1b04 	str.w	r1, [r0], #4
 800de7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800de7e:	dcec      	bgt.n	800de5a <__multadd+0x12>
 800de80:	f1b8 0f00 	cmp.w	r8, #0
 800de84:	d022      	beq.n	800decc <__multadd+0x84>
 800de86:	68a3      	ldr	r3, [r4, #8]
 800de88:	42b3      	cmp	r3, r6
 800de8a:	dc19      	bgt.n	800dec0 <__multadd+0x78>
 800de8c:	6861      	ldr	r1, [r4, #4]
 800de8e:	4638      	mov	r0, r7
 800de90:	3101      	adds	r1, #1
 800de92:	f7ff ff77 	bl	800dd84 <_Balloc>
 800de96:	4605      	mov	r5, r0
 800de98:	b928      	cbnz	r0, 800dea6 <__multadd+0x5e>
 800de9a:	4602      	mov	r2, r0
 800de9c:	4b0d      	ldr	r3, [pc, #52]	; (800ded4 <__multadd+0x8c>)
 800de9e:	480e      	ldr	r0, [pc, #56]	; (800ded8 <__multadd+0x90>)
 800dea0:	21b5      	movs	r1, #181	; 0xb5
 800dea2:	f000 fd67 	bl	800e974 <__assert_func>
 800dea6:	6922      	ldr	r2, [r4, #16]
 800dea8:	3202      	adds	r2, #2
 800deaa:	f104 010c 	add.w	r1, r4, #12
 800deae:	0092      	lsls	r2, r2, #2
 800deb0:	300c      	adds	r0, #12
 800deb2:	f7ff ff59 	bl	800dd68 <memcpy>
 800deb6:	4621      	mov	r1, r4
 800deb8:	4638      	mov	r0, r7
 800deba:	f7ff ffa3 	bl	800de04 <_Bfree>
 800debe:	462c      	mov	r4, r5
 800dec0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800dec4:	3601      	adds	r6, #1
 800dec6:	f8c3 8014 	str.w	r8, [r3, #20]
 800deca:	6126      	str	r6, [r4, #16]
 800decc:	4620      	mov	r0, r4
 800dece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded2:	bf00      	nop
 800ded4:	0800f1b7 	.word	0x0800f1b7
 800ded8:	0800f228 	.word	0x0800f228

0800dedc <__hi0bits>:
 800dedc:	0c03      	lsrs	r3, r0, #16
 800dede:	041b      	lsls	r3, r3, #16
 800dee0:	b9d3      	cbnz	r3, 800df18 <__hi0bits+0x3c>
 800dee2:	0400      	lsls	r0, r0, #16
 800dee4:	2310      	movs	r3, #16
 800dee6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800deea:	bf04      	itt	eq
 800deec:	0200      	lsleq	r0, r0, #8
 800deee:	3308      	addeq	r3, #8
 800def0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800def4:	bf04      	itt	eq
 800def6:	0100      	lsleq	r0, r0, #4
 800def8:	3304      	addeq	r3, #4
 800defa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800defe:	bf04      	itt	eq
 800df00:	0080      	lsleq	r0, r0, #2
 800df02:	3302      	addeq	r3, #2
 800df04:	2800      	cmp	r0, #0
 800df06:	db05      	blt.n	800df14 <__hi0bits+0x38>
 800df08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800df0c:	f103 0301 	add.w	r3, r3, #1
 800df10:	bf08      	it	eq
 800df12:	2320      	moveq	r3, #32
 800df14:	4618      	mov	r0, r3
 800df16:	4770      	bx	lr
 800df18:	2300      	movs	r3, #0
 800df1a:	e7e4      	b.n	800dee6 <__hi0bits+0xa>

0800df1c <__lo0bits>:
 800df1c:	6803      	ldr	r3, [r0, #0]
 800df1e:	f013 0207 	ands.w	r2, r3, #7
 800df22:	4601      	mov	r1, r0
 800df24:	d00b      	beq.n	800df3e <__lo0bits+0x22>
 800df26:	07da      	lsls	r2, r3, #31
 800df28:	d424      	bmi.n	800df74 <__lo0bits+0x58>
 800df2a:	0798      	lsls	r0, r3, #30
 800df2c:	bf49      	itett	mi
 800df2e:	085b      	lsrmi	r3, r3, #1
 800df30:	089b      	lsrpl	r3, r3, #2
 800df32:	2001      	movmi	r0, #1
 800df34:	600b      	strmi	r3, [r1, #0]
 800df36:	bf5c      	itt	pl
 800df38:	600b      	strpl	r3, [r1, #0]
 800df3a:	2002      	movpl	r0, #2
 800df3c:	4770      	bx	lr
 800df3e:	b298      	uxth	r0, r3
 800df40:	b9b0      	cbnz	r0, 800df70 <__lo0bits+0x54>
 800df42:	0c1b      	lsrs	r3, r3, #16
 800df44:	2010      	movs	r0, #16
 800df46:	f013 0fff 	tst.w	r3, #255	; 0xff
 800df4a:	bf04      	itt	eq
 800df4c:	0a1b      	lsreq	r3, r3, #8
 800df4e:	3008      	addeq	r0, #8
 800df50:	071a      	lsls	r2, r3, #28
 800df52:	bf04      	itt	eq
 800df54:	091b      	lsreq	r3, r3, #4
 800df56:	3004      	addeq	r0, #4
 800df58:	079a      	lsls	r2, r3, #30
 800df5a:	bf04      	itt	eq
 800df5c:	089b      	lsreq	r3, r3, #2
 800df5e:	3002      	addeq	r0, #2
 800df60:	07da      	lsls	r2, r3, #31
 800df62:	d403      	bmi.n	800df6c <__lo0bits+0x50>
 800df64:	085b      	lsrs	r3, r3, #1
 800df66:	f100 0001 	add.w	r0, r0, #1
 800df6a:	d005      	beq.n	800df78 <__lo0bits+0x5c>
 800df6c:	600b      	str	r3, [r1, #0]
 800df6e:	4770      	bx	lr
 800df70:	4610      	mov	r0, r2
 800df72:	e7e8      	b.n	800df46 <__lo0bits+0x2a>
 800df74:	2000      	movs	r0, #0
 800df76:	4770      	bx	lr
 800df78:	2020      	movs	r0, #32
 800df7a:	4770      	bx	lr

0800df7c <__i2b>:
 800df7c:	b510      	push	{r4, lr}
 800df7e:	460c      	mov	r4, r1
 800df80:	2101      	movs	r1, #1
 800df82:	f7ff feff 	bl	800dd84 <_Balloc>
 800df86:	4602      	mov	r2, r0
 800df88:	b928      	cbnz	r0, 800df96 <__i2b+0x1a>
 800df8a:	4b05      	ldr	r3, [pc, #20]	; (800dfa0 <__i2b+0x24>)
 800df8c:	4805      	ldr	r0, [pc, #20]	; (800dfa4 <__i2b+0x28>)
 800df8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800df92:	f000 fcef 	bl	800e974 <__assert_func>
 800df96:	2301      	movs	r3, #1
 800df98:	6144      	str	r4, [r0, #20]
 800df9a:	6103      	str	r3, [r0, #16]
 800df9c:	bd10      	pop	{r4, pc}
 800df9e:	bf00      	nop
 800dfa0:	0800f1b7 	.word	0x0800f1b7
 800dfa4:	0800f228 	.word	0x0800f228

0800dfa8 <__multiply>:
 800dfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfac:	4614      	mov	r4, r2
 800dfae:	690a      	ldr	r2, [r1, #16]
 800dfb0:	6923      	ldr	r3, [r4, #16]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	bfb8      	it	lt
 800dfb6:	460b      	movlt	r3, r1
 800dfb8:	460d      	mov	r5, r1
 800dfba:	bfbc      	itt	lt
 800dfbc:	4625      	movlt	r5, r4
 800dfbe:	461c      	movlt	r4, r3
 800dfc0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800dfc4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dfc8:	68ab      	ldr	r3, [r5, #8]
 800dfca:	6869      	ldr	r1, [r5, #4]
 800dfcc:	eb0a 0709 	add.w	r7, sl, r9
 800dfd0:	42bb      	cmp	r3, r7
 800dfd2:	b085      	sub	sp, #20
 800dfd4:	bfb8      	it	lt
 800dfd6:	3101      	addlt	r1, #1
 800dfd8:	f7ff fed4 	bl	800dd84 <_Balloc>
 800dfdc:	b930      	cbnz	r0, 800dfec <__multiply+0x44>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	4b42      	ldr	r3, [pc, #264]	; (800e0ec <__multiply+0x144>)
 800dfe2:	4843      	ldr	r0, [pc, #268]	; (800e0f0 <__multiply+0x148>)
 800dfe4:	f240 115d 	movw	r1, #349	; 0x15d
 800dfe8:	f000 fcc4 	bl	800e974 <__assert_func>
 800dfec:	f100 0614 	add.w	r6, r0, #20
 800dff0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800dff4:	4633      	mov	r3, r6
 800dff6:	2200      	movs	r2, #0
 800dff8:	4543      	cmp	r3, r8
 800dffa:	d31e      	bcc.n	800e03a <__multiply+0x92>
 800dffc:	f105 0c14 	add.w	ip, r5, #20
 800e000:	f104 0314 	add.w	r3, r4, #20
 800e004:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e008:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e00c:	9202      	str	r2, [sp, #8]
 800e00e:	ebac 0205 	sub.w	r2, ip, r5
 800e012:	3a15      	subs	r2, #21
 800e014:	f022 0203 	bic.w	r2, r2, #3
 800e018:	3204      	adds	r2, #4
 800e01a:	f105 0115 	add.w	r1, r5, #21
 800e01e:	458c      	cmp	ip, r1
 800e020:	bf38      	it	cc
 800e022:	2204      	movcc	r2, #4
 800e024:	9201      	str	r2, [sp, #4]
 800e026:	9a02      	ldr	r2, [sp, #8]
 800e028:	9303      	str	r3, [sp, #12]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d808      	bhi.n	800e040 <__multiply+0x98>
 800e02e:	2f00      	cmp	r7, #0
 800e030:	dc55      	bgt.n	800e0de <__multiply+0x136>
 800e032:	6107      	str	r7, [r0, #16]
 800e034:	b005      	add	sp, #20
 800e036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03a:	f843 2b04 	str.w	r2, [r3], #4
 800e03e:	e7db      	b.n	800dff8 <__multiply+0x50>
 800e040:	f8b3 a000 	ldrh.w	sl, [r3]
 800e044:	f1ba 0f00 	cmp.w	sl, #0
 800e048:	d020      	beq.n	800e08c <__multiply+0xe4>
 800e04a:	f105 0e14 	add.w	lr, r5, #20
 800e04e:	46b1      	mov	r9, r6
 800e050:	2200      	movs	r2, #0
 800e052:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e056:	f8d9 b000 	ldr.w	fp, [r9]
 800e05a:	b2a1      	uxth	r1, r4
 800e05c:	fa1f fb8b 	uxth.w	fp, fp
 800e060:	fb0a b101 	mla	r1, sl, r1, fp
 800e064:	4411      	add	r1, r2
 800e066:	f8d9 2000 	ldr.w	r2, [r9]
 800e06a:	0c24      	lsrs	r4, r4, #16
 800e06c:	0c12      	lsrs	r2, r2, #16
 800e06e:	fb0a 2404 	mla	r4, sl, r4, r2
 800e072:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e076:	b289      	uxth	r1, r1
 800e078:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e07c:	45f4      	cmp	ip, lr
 800e07e:	f849 1b04 	str.w	r1, [r9], #4
 800e082:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e086:	d8e4      	bhi.n	800e052 <__multiply+0xaa>
 800e088:	9901      	ldr	r1, [sp, #4]
 800e08a:	5072      	str	r2, [r6, r1]
 800e08c:	9a03      	ldr	r2, [sp, #12]
 800e08e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e092:	3304      	adds	r3, #4
 800e094:	f1b9 0f00 	cmp.w	r9, #0
 800e098:	d01f      	beq.n	800e0da <__multiply+0x132>
 800e09a:	6834      	ldr	r4, [r6, #0]
 800e09c:	f105 0114 	add.w	r1, r5, #20
 800e0a0:	46b6      	mov	lr, r6
 800e0a2:	f04f 0a00 	mov.w	sl, #0
 800e0a6:	880a      	ldrh	r2, [r1, #0]
 800e0a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e0ac:	fb09 b202 	mla	r2, r9, r2, fp
 800e0b0:	4492      	add	sl, r2
 800e0b2:	b2a4      	uxth	r4, r4
 800e0b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e0b8:	f84e 4b04 	str.w	r4, [lr], #4
 800e0bc:	f851 4b04 	ldr.w	r4, [r1], #4
 800e0c0:	f8be 2000 	ldrh.w	r2, [lr]
 800e0c4:	0c24      	lsrs	r4, r4, #16
 800e0c6:	fb09 2404 	mla	r4, r9, r4, r2
 800e0ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e0ce:	458c      	cmp	ip, r1
 800e0d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e0d4:	d8e7      	bhi.n	800e0a6 <__multiply+0xfe>
 800e0d6:	9a01      	ldr	r2, [sp, #4]
 800e0d8:	50b4      	str	r4, [r6, r2]
 800e0da:	3604      	adds	r6, #4
 800e0dc:	e7a3      	b.n	800e026 <__multiply+0x7e>
 800e0de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d1a5      	bne.n	800e032 <__multiply+0x8a>
 800e0e6:	3f01      	subs	r7, #1
 800e0e8:	e7a1      	b.n	800e02e <__multiply+0x86>
 800e0ea:	bf00      	nop
 800e0ec:	0800f1b7 	.word	0x0800f1b7
 800e0f0:	0800f228 	.word	0x0800f228

0800e0f4 <__pow5mult>:
 800e0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0f8:	4615      	mov	r5, r2
 800e0fa:	f012 0203 	ands.w	r2, r2, #3
 800e0fe:	4606      	mov	r6, r0
 800e100:	460f      	mov	r7, r1
 800e102:	d007      	beq.n	800e114 <__pow5mult+0x20>
 800e104:	4c25      	ldr	r4, [pc, #148]	; (800e19c <__pow5mult+0xa8>)
 800e106:	3a01      	subs	r2, #1
 800e108:	2300      	movs	r3, #0
 800e10a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e10e:	f7ff fe9b 	bl	800de48 <__multadd>
 800e112:	4607      	mov	r7, r0
 800e114:	10ad      	asrs	r5, r5, #2
 800e116:	d03d      	beq.n	800e194 <__pow5mult+0xa0>
 800e118:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e11a:	b97c      	cbnz	r4, 800e13c <__pow5mult+0x48>
 800e11c:	2010      	movs	r0, #16
 800e11e:	f7ff fe1b 	bl	800dd58 <malloc>
 800e122:	4602      	mov	r2, r0
 800e124:	6270      	str	r0, [r6, #36]	; 0x24
 800e126:	b928      	cbnz	r0, 800e134 <__pow5mult+0x40>
 800e128:	4b1d      	ldr	r3, [pc, #116]	; (800e1a0 <__pow5mult+0xac>)
 800e12a:	481e      	ldr	r0, [pc, #120]	; (800e1a4 <__pow5mult+0xb0>)
 800e12c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e130:	f000 fc20 	bl	800e974 <__assert_func>
 800e134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e138:	6004      	str	r4, [r0, #0]
 800e13a:	60c4      	str	r4, [r0, #12]
 800e13c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e144:	b94c      	cbnz	r4, 800e15a <__pow5mult+0x66>
 800e146:	f240 2171 	movw	r1, #625	; 0x271
 800e14a:	4630      	mov	r0, r6
 800e14c:	f7ff ff16 	bl	800df7c <__i2b>
 800e150:	2300      	movs	r3, #0
 800e152:	f8c8 0008 	str.w	r0, [r8, #8]
 800e156:	4604      	mov	r4, r0
 800e158:	6003      	str	r3, [r0, #0]
 800e15a:	f04f 0900 	mov.w	r9, #0
 800e15e:	07eb      	lsls	r3, r5, #31
 800e160:	d50a      	bpl.n	800e178 <__pow5mult+0x84>
 800e162:	4639      	mov	r1, r7
 800e164:	4622      	mov	r2, r4
 800e166:	4630      	mov	r0, r6
 800e168:	f7ff ff1e 	bl	800dfa8 <__multiply>
 800e16c:	4639      	mov	r1, r7
 800e16e:	4680      	mov	r8, r0
 800e170:	4630      	mov	r0, r6
 800e172:	f7ff fe47 	bl	800de04 <_Bfree>
 800e176:	4647      	mov	r7, r8
 800e178:	106d      	asrs	r5, r5, #1
 800e17a:	d00b      	beq.n	800e194 <__pow5mult+0xa0>
 800e17c:	6820      	ldr	r0, [r4, #0]
 800e17e:	b938      	cbnz	r0, 800e190 <__pow5mult+0x9c>
 800e180:	4622      	mov	r2, r4
 800e182:	4621      	mov	r1, r4
 800e184:	4630      	mov	r0, r6
 800e186:	f7ff ff0f 	bl	800dfa8 <__multiply>
 800e18a:	6020      	str	r0, [r4, #0]
 800e18c:	f8c0 9000 	str.w	r9, [r0]
 800e190:	4604      	mov	r4, r0
 800e192:	e7e4      	b.n	800e15e <__pow5mult+0x6a>
 800e194:	4638      	mov	r0, r7
 800e196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e19a:	bf00      	nop
 800e19c:	0800f378 	.word	0x0800f378
 800e1a0:	0800f141 	.word	0x0800f141
 800e1a4:	0800f228 	.word	0x0800f228

0800e1a8 <__lshift>:
 800e1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1ac:	460c      	mov	r4, r1
 800e1ae:	6849      	ldr	r1, [r1, #4]
 800e1b0:	6923      	ldr	r3, [r4, #16]
 800e1b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e1b6:	68a3      	ldr	r3, [r4, #8]
 800e1b8:	4607      	mov	r7, r0
 800e1ba:	4691      	mov	r9, r2
 800e1bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e1c0:	f108 0601 	add.w	r6, r8, #1
 800e1c4:	42b3      	cmp	r3, r6
 800e1c6:	db0b      	blt.n	800e1e0 <__lshift+0x38>
 800e1c8:	4638      	mov	r0, r7
 800e1ca:	f7ff fddb 	bl	800dd84 <_Balloc>
 800e1ce:	4605      	mov	r5, r0
 800e1d0:	b948      	cbnz	r0, 800e1e6 <__lshift+0x3e>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	4b28      	ldr	r3, [pc, #160]	; (800e278 <__lshift+0xd0>)
 800e1d6:	4829      	ldr	r0, [pc, #164]	; (800e27c <__lshift+0xd4>)
 800e1d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e1dc:	f000 fbca 	bl	800e974 <__assert_func>
 800e1e0:	3101      	adds	r1, #1
 800e1e2:	005b      	lsls	r3, r3, #1
 800e1e4:	e7ee      	b.n	800e1c4 <__lshift+0x1c>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	f100 0114 	add.w	r1, r0, #20
 800e1ec:	f100 0210 	add.w	r2, r0, #16
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	4553      	cmp	r3, sl
 800e1f4:	db33      	blt.n	800e25e <__lshift+0xb6>
 800e1f6:	6920      	ldr	r0, [r4, #16]
 800e1f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1fc:	f104 0314 	add.w	r3, r4, #20
 800e200:	f019 091f 	ands.w	r9, r9, #31
 800e204:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e208:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e20c:	d02b      	beq.n	800e266 <__lshift+0xbe>
 800e20e:	f1c9 0e20 	rsb	lr, r9, #32
 800e212:	468a      	mov	sl, r1
 800e214:	2200      	movs	r2, #0
 800e216:	6818      	ldr	r0, [r3, #0]
 800e218:	fa00 f009 	lsl.w	r0, r0, r9
 800e21c:	4302      	orrs	r2, r0
 800e21e:	f84a 2b04 	str.w	r2, [sl], #4
 800e222:	f853 2b04 	ldr.w	r2, [r3], #4
 800e226:	459c      	cmp	ip, r3
 800e228:	fa22 f20e 	lsr.w	r2, r2, lr
 800e22c:	d8f3      	bhi.n	800e216 <__lshift+0x6e>
 800e22e:	ebac 0304 	sub.w	r3, ip, r4
 800e232:	3b15      	subs	r3, #21
 800e234:	f023 0303 	bic.w	r3, r3, #3
 800e238:	3304      	adds	r3, #4
 800e23a:	f104 0015 	add.w	r0, r4, #21
 800e23e:	4584      	cmp	ip, r0
 800e240:	bf38      	it	cc
 800e242:	2304      	movcc	r3, #4
 800e244:	50ca      	str	r2, [r1, r3]
 800e246:	b10a      	cbz	r2, 800e24c <__lshift+0xa4>
 800e248:	f108 0602 	add.w	r6, r8, #2
 800e24c:	3e01      	subs	r6, #1
 800e24e:	4638      	mov	r0, r7
 800e250:	612e      	str	r6, [r5, #16]
 800e252:	4621      	mov	r1, r4
 800e254:	f7ff fdd6 	bl	800de04 <_Bfree>
 800e258:	4628      	mov	r0, r5
 800e25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e25e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e262:	3301      	adds	r3, #1
 800e264:	e7c5      	b.n	800e1f2 <__lshift+0x4a>
 800e266:	3904      	subs	r1, #4
 800e268:	f853 2b04 	ldr.w	r2, [r3], #4
 800e26c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e270:	459c      	cmp	ip, r3
 800e272:	d8f9      	bhi.n	800e268 <__lshift+0xc0>
 800e274:	e7ea      	b.n	800e24c <__lshift+0xa4>
 800e276:	bf00      	nop
 800e278:	0800f1b7 	.word	0x0800f1b7
 800e27c:	0800f228 	.word	0x0800f228

0800e280 <__mcmp>:
 800e280:	b530      	push	{r4, r5, lr}
 800e282:	6902      	ldr	r2, [r0, #16]
 800e284:	690c      	ldr	r4, [r1, #16]
 800e286:	1b12      	subs	r2, r2, r4
 800e288:	d10e      	bne.n	800e2a8 <__mcmp+0x28>
 800e28a:	f100 0314 	add.w	r3, r0, #20
 800e28e:	3114      	adds	r1, #20
 800e290:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e294:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e298:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e29c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e2a0:	42a5      	cmp	r5, r4
 800e2a2:	d003      	beq.n	800e2ac <__mcmp+0x2c>
 800e2a4:	d305      	bcc.n	800e2b2 <__mcmp+0x32>
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	4610      	mov	r0, r2
 800e2aa:	bd30      	pop	{r4, r5, pc}
 800e2ac:	4283      	cmp	r3, r0
 800e2ae:	d3f3      	bcc.n	800e298 <__mcmp+0x18>
 800e2b0:	e7fa      	b.n	800e2a8 <__mcmp+0x28>
 800e2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b6:	e7f7      	b.n	800e2a8 <__mcmp+0x28>

0800e2b8 <__mdiff>:
 800e2b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2bc:	460c      	mov	r4, r1
 800e2be:	4606      	mov	r6, r0
 800e2c0:	4611      	mov	r1, r2
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	4617      	mov	r7, r2
 800e2c6:	f7ff ffdb 	bl	800e280 <__mcmp>
 800e2ca:	1e05      	subs	r5, r0, #0
 800e2cc:	d110      	bne.n	800e2f0 <__mdiff+0x38>
 800e2ce:	4629      	mov	r1, r5
 800e2d0:	4630      	mov	r0, r6
 800e2d2:	f7ff fd57 	bl	800dd84 <_Balloc>
 800e2d6:	b930      	cbnz	r0, 800e2e6 <__mdiff+0x2e>
 800e2d8:	4b39      	ldr	r3, [pc, #228]	; (800e3c0 <__mdiff+0x108>)
 800e2da:	4602      	mov	r2, r0
 800e2dc:	f240 2132 	movw	r1, #562	; 0x232
 800e2e0:	4838      	ldr	r0, [pc, #224]	; (800e3c4 <__mdiff+0x10c>)
 800e2e2:	f000 fb47 	bl	800e974 <__assert_func>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e2ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f0:	bfa4      	itt	ge
 800e2f2:	463b      	movge	r3, r7
 800e2f4:	4627      	movge	r7, r4
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	6879      	ldr	r1, [r7, #4]
 800e2fa:	bfa6      	itte	ge
 800e2fc:	461c      	movge	r4, r3
 800e2fe:	2500      	movge	r5, #0
 800e300:	2501      	movlt	r5, #1
 800e302:	f7ff fd3f 	bl	800dd84 <_Balloc>
 800e306:	b920      	cbnz	r0, 800e312 <__mdiff+0x5a>
 800e308:	4b2d      	ldr	r3, [pc, #180]	; (800e3c0 <__mdiff+0x108>)
 800e30a:	4602      	mov	r2, r0
 800e30c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e310:	e7e6      	b.n	800e2e0 <__mdiff+0x28>
 800e312:	693e      	ldr	r6, [r7, #16]
 800e314:	60c5      	str	r5, [r0, #12]
 800e316:	6925      	ldr	r5, [r4, #16]
 800e318:	f107 0114 	add.w	r1, r7, #20
 800e31c:	f104 0914 	add.w	r9, r4, #20
 800e320:	f100 0e14 	add.w	lr, r0, #20
 800e324:	f107 0210 	add.w	r2, r7, #16
 800e328:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e32c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e330:	46f2      	mov	sl, lr
 800e332:	2700      	movs	r7, #0
 800e334:	f859 3b04 	ldr.w	r3, [r9], #4
 800e338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e33c:	fa1f f883 	uxth.w	r8, r3
 800e340:	fa17 f78b 	uxtah	r7, r7, fp
 800e344:	0c1b      	lsrs	r3, r3, #16
 800e346:	eba7 0808 	sub.w	r8, r7, r8
 800e34a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e34e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e352:	fa1f f888 	uxth.w	r8, r8
 800e356:	141f      	asrs	r7, r3, #16
 800e358:	454d      	cmp	r5, r9
 800e35a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e35e:	f84a 3b04 	str.w	r3, [sl], #4
 800e362:	d8e7      	bhi.n	800e334 <__mdiff+0x7c>
 800e364:	1b2b      	subs	r3, r5, r4
 800e366:	3b15      	subs	r3, #21
 800e368:	f023 0303 	bic.w	r3, r3, #3
 800e36c:	3304      	adds	r3, #4
 800e36e:	3415      	adds	r4, #21
 800e370:	42a5      	cmp	r5, r4
 800e372:	bf38      	it	cc
 800e374:	2304      	movcc	r3, #4
 800e376:	4419      	add	r1, r3
 800e378:	4473      	add	r3, lr
 800e37a:	469e      	mov	lr, r3
 800e37c:	460d      	mov	r5, r1
 800e37e:	4565      	cmp	r5, ip
 800e380:	d30e      	bcc.n	800e3a0 <__mdiff+0xe8>
 800e382:	f10c 0203 	add.w	r2, ip, #3
 800e386:	1a52      	subs	r2, r2, r1
 800e388:	f022 0203 	bic.w	r2, r2, #3
 800e38c:	3903      	subs	r1, #3
 800e38e:	458c      	cmp	ip, r1
 800e390:	bf38      	it	cc
 800e392:	2200      	movcc	r2, #0
 800e394:	441a      	add	r2, r3
 800e396:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e39a:	b17b      	cbz	r3, 800e3bc <__mdiff+0x104>
 800e39c:	6106      	str	r6, [r0, #16]
 800e39e:	e7a5      	b.n	800e2ec <__mdiff+0x34>
 800e3a0:	f855 8b04 	ldr.w	r8, [r5], #4
 800e3a4:	fa17 f488 	uxtah	r4, r7, r8
 800e3a8:	1422      	asrs	r2, r4, #16
 800e3aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e3ae:	b2a4      	uxth	r4, r4
 800e3b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e3b4:	f84e 4b04 	str.w	r4, [lr], #4
 800e3b8:	1417      	asrs	r7, r2, #16
 800e3ba:	e7e0      	b.n	800e37e <__mdiff+0xc6>
 800e3bc:	3e01      	subs	r6, #1
 800e3be:	e7ea      	b.n	800e396 <__mdiff+0xde>
 800e3c0:	0800f1b7 	.word	0x0800f1b7
 800e3c4:	0800f228 	.word	0x0800f228

0800e3c8 <__d2b>:
 800e3c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e3cc:	4689      	mov	r9, r1
 800e3ce:	2101      	movs	r1, #1
 800e3d0:	ec57 6b10 	vmov	r6, r7, d0
 800e3d4:	4690      	mov	r8, r2
 800e3d6:	f7ff fcd5 	bl	800dd84 <_Balloc>
 800e3da:	4604      	mov	r4, r0
 800e3dc:	b930      	cbnz	r0, 800e3ec <__d2b+0x24>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	4b25      	ldr	r3, [pc, #148]	; (800e478 <__d2b+0xb0>)
 800e3e2:	4826      	ldr	r0, [pc, #152]	; (800e47c <__d2b+0xb4>)
 800e3e4:	f240 310a 	movw	r1, #778	; 0x30a
 800e3e8:	f000 fac4 	bl	800e974 <__assert_func>
 800e3ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e3f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e3f4:	bb35      	cbnz	r5, 800e444 <__d2b+0x7c>
 800e3f6:	2e00      	cmp	r6, #0
 800e3f8:	9301      	str	r3, [sp, #4]
 800e3fa:	d028      	beq.n	800e44e <__d2b+0x86>
 800e3fc:	4668      	mov	r0, sp
 800e3fe:	9600      	str	r6, [sp, #0]
 800e400:	f7ff fd8c 	bl	800df1c <__lo0bits>
 800e404:	9900      	ldr	r1, [sp, #0]
 800e406:	b300      	cbz	r0, 800e44a <__d2b+0x82>
 800e408:	9a01      	ldr	r2, [sp, #4]
 800e40a:	f1c0 0320 	rsb	r3, r0, #32
 800e40e:	fa02 f303 	lsl.w	r3, r2, r3
 800e412:	430b      	orrs	r3, r1
 800e414:	40c2      	lsrs	r2, r0
 800e416:	6163      	str	r3, [r4, #20]
 800e418:	9201      	str	r2, [sp, #4]
 800e41a:	9b01      	ldr	r3, [sp, #4]
 800e41c:	61a3      	str	r3, [r4, #24]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	bf14      	ite	ne
 800e422:	2202      	movne	r2, #2
 800e424:	2201      	moveq	r2, #1
 800e426:	6122      	str	r2, [r4, #16]
 800e428:	b1d5      	cbz	r5, 800e460 <__d2b+0x98>
 800e42a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e42e:	4405      	add	r5, r0
 800e430:	f8c9 5000 	str.w	r5, [r9]
 800e434:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e438:	f8c8 0000 	str.w	r0, [r8]
 800e43c:	4620      	mov	r0, r4
 800e43e:	b003      	add	sp, #12
 800e440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e448:	e7d5      	b.n	800e3f6 <__d2b+0x2e>
 800e44a:	6161      	str	r1, [r4, #20]
 800e44c:	e7e5      	b.n	800e41a <__d2b+0x52>
 800e44e:	a801      	add	r0, sp, #4
 800e450:	f7ff fd64 	bl	800df1c <__lo0bits>
 800e454:	9b01      	ldr	r3, [sp, #4]
 800e456:	6163      	str	r3, [r4, #20]
 800e458:	2201      	movs	r2, #1
 800e45a:	6122      	str	r2, [r4, #16]
 800e45c:	3020      	adds	r0, #32
 800e45e:	e7e3      	b.n	800e428 <__d2b+0x60>
 800e460:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e464:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e468:	f8c9 0000 	str.w	r0, [r9]
 800e46c:	6918      	ldr	r0, [r3, #16]
 800e46e:	f7ff fd35 	bl	800dedc <__hi0bits>
 800e472:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e476:	e7df      	b.n	800e438 <__d2b+0x70>
 800e478:	0800f1b7 	.word	0x0800f1b7
 800e47c:	0800f228 	.word	0x0800f228

0800e480 <_calloc_r>:
 800e480:	b513      	push	{r0, r1, r4, lr}
 800e482:	434a      	muls	r2, r1
 800e484:	4611      	mov	r1, r2
 800e486:	9201      	str	r2, [sp, #4]
 800e488:	f000 f85a 	bl	800e540 <_malloc_r>
 800e48c:	4604      	mov	r4, r0
 800e48e:	b118      	cbz	r0, 800e498 <_calloc_r+0x18>
 800e490:	9a01      	ldr	r2, [sp, #4]
 800e492:	2100      	movs	r1, #0
 800e494:	f7fd fe02 	bl	800c09c <memset>
 800e498:	4620      	mov	r0, r4
 800e49a:	b002      	add	sp, #8
 800e49c:	bd10      	pop	{r4, pc}
	...

0800e4a0 <_free_r>:
 800e4a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4a2:	2900      	cmp	r1, #0
 800e4a4:	d048      	beq.n	800e538 <_free_r+0x98>
 800e4a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4aa:	9001      	str	r0, [sp, #4]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f1a1 0404 	sub.w	r4, r1, #4
 800e4b2:	bfb8      	it	lt
 800e4b4:	18e4      	addlt	r4, r4, r3
 800e4b6:	f000 fae3 	bl	800ea80 <__malloc_lock>
 800e4ba:	4a20      	ldr	r2, [pc, #128]	; (800e53c <_free_r+0x9c>)
 800e4bc:	9801      	ldr	r0, [sp, #4]
 800e4be:	6813      	ldr	r3, [r2, #0]
 800e4c0:	4615      	mov	r5, r2
 800e4c2:	b933      	cbnz	r3, 800e4d2 <_free_r+0x32>
 800e4c4:	6063      	str	r3, [r4, #4]
 800e4c6:	6014      	str	r4, [r2, #0]
 800e4c8:	b003      	add	sp, #12
 800e4ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4ce:	f000 badd 	b.w	800ea8c <__malloc_unlock>
 800e4d2:	42a3      	cmp	r3, r4
 800e4d4:	d90b      	bls.n	800e4ee <_free_r+0x4e>
 800e4d6:	6821      	ldr	r1, [r4, #0]
 800e4d8:	1862      	adds	r2, r4, r1
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	bf04      	itt	eq
 800e4de:	681a      	ldreq	r2, [r3, #0]
 800e4e0:	685b      	ldreq	r3, [r3, #4]
 800e4e2:	6063      	str	r3, [r4, #4]
 800e4e4:	bf04      	itt	eq
 800e4e6:	1852      	addeq	r2, r2, r1
 800e4e8:	6022      	streq	r2, [r4, #0]
 800e4ea:	602c      	str	r4, [r5, #0]
 800e4ec:	e7ec      	b.n	800e4c8 <_free_r+0x28>
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	b10b      	cbz	r3, 800e4f8 <_free_r+0x58>
 800e4f4:	42a3      	cmp	r3, r4
 800e4f6:	d9fa      	bls.n	800e4ee <_free_r+0x4e>
 800e4f8:	6811      	ldr	r1, [r2, #0]
 800e4fa:	1855      	adds	r5, r2, r1
 800e4fc:	42a5      	cmp	r5, r4
 800e4fe:	d10b      	bne.n	800e518 <_free_r+0x78>
 800e500:	6824      	ldr	r4, [r4, #0]
 800e502:	4421      	add	r1, r4
 800e504:	1854      	adds	r4, r2, r1
 800e506:	42a3      	cmp	r3, r4
 800e508:	6011      	str	r1, [r2, #0]
 800e50a:	d1dd      	bne.n	800e4c8 <_free_r+0x28>
 800e50c:	681c      	ldr	r4, [r3, #0]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	6053      	str	r3, [r2, #4]
 800e512:	4421      	add	r1, r4
 800e514:	6011      	str	r1, [r2, #0]
 800e516:	e7d7      	b.n	800e4c8 <_free_r+0x28>
 800e518:	d902      	bls.n	800e520 <_free_r+0x80>
 800e51a:	230c      	movs	r3, #12
 800e51c:	6003      	str	r3, [r0, #0]
 800e51e:	e7d3      	b.n	800e4c8 <_free_r+0x28>
 800e520:	6825      	ldr	r5, [r4, #0]
 800e522:	1961      	adds	r1, r4, r5
 800e524:	428b      	cmp	r3, r1
 800e526:	bf04      	itt	eq
 800e528:	6819      	ldreq	r1, [r3, #0]
 800e52a:	685b      	ldreq	r3, [r3, #4]
 800e52c:	6063      	str	r3, [r4, #4]
 800e52e:	bf04      	itt	eq
 800e530:	1949      	addeq	r1, r1, r5
 800e532:	6021      	streq	r1, [r4, #0]
 800e534:	6054      	str	r4, [r2, #4]
 800e536:	e7c7      	b.n	800e4c8 <_free_r+0x28>
 800e538:	b003      	add	sp, #12
 800e53a:	bd30      	pop	{r4, r5, pc}
 800e53c:	20000b58 	.word	0x20000b58

0800e540 <_malloc_r>:
 800e540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e542:	1ccd      	adds	r5, r1, #3
 800e544:	f025 0503 	bic.w	r5, r5, #3
 800e548:	3508      	adds	r5, #8
 800e54a:	2d0c      	cmp	r5, #12
 800e54c:	bf38      	it	cc
 800e54e:	250c      	movcc	r5, #12
 800e550:	2d00      	cmp	r5, #0
 800e552:	4606      	mov	r6, r0
 800e554:	db01      	blt.n	800e55a <_malloc_r+0x1a>
 800e556:	42a9      	cmp	r1, r5
 800e558:	d903      	bls.n	800e562 <_malloc_r+0x22>
 800e55a:	230c      	movs	r3, #12
 800e55c:	6033      	str	r3, [r6, #0]
 800e55e:	2000      	movs	r0, #0
 800e560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e562:	f000 fa8d 	bl	800ea80 <__malloc_lock>
 800e566:	4921      	ldr	r1, [pc, #132]	; (800e5ec <_malloc_r+0xac>)
 800e568:	680a      	ldr	r2, [r1, #0]
 800e56a:	4614      	mov	r4, r2
 800e56c:	b99c      	cbnz	r4, 800e596 <_malloc_r+0x56>
 800e56e:	4f20      	ldr	r7, [pc, #128]	; (800e5f0 <_malloc_r+0xb0>)
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	b923      	cbnz	r3, 800e57e <_malloc_r+0x3e>
 800e574:	4621      	mov	r1, r4
 800e576:	4630      	mov	r0, r6
 800e578:	f000 f996 	bl	800e8a8 <_sbrk_r>
 800e57c:	6038      	str	r0, [r7, #0]
 800e57e:	4629      	mov	r1, r5
 800e580:	4630      	mov	r0, r6
 800e582:	f000 f991 	bl	800e8a8 <_sbrk_r>
 800e586:	1c43      	adds	r3, r0, #1
 800e588:	d123      	bne.n	800e5d2 <_malloc_r+0x92>
 800e58a:	230c      	movs	r3, #12
 800e58c:	6033      	str	r3, [r6, #0]
 800e58e:	4630      	mov	r0, r6
 800e590:	f000 fa7c 	bl	800ea8c <__malloc_unlock>
 800e594:	e7e3      	b.n	800e55e <_malloc_r+0x1e>
 800e596:	6823      	ldr	r3, [r4, #0]
 800e598:	1b5b      	subs	r3, r3, r5
 800e59a:	d417      	bmi.n	800e5cc <_malloc_r+0x8c>
 800e59c:	2b0b      	cmp	r3, #11
 800e59e:	d903      	bls.n	800e5a8 <_malloc_r+0x68>
 800e5a0:	6023      	str	r3, [r4, #0]
 800e5a2:	441c      	add	r4, r3
 800e5a4:	6025      	str	r5, [r4, #0]
 800e5a6:	e004      	b.n	800e5b2 <_malloc_r+0x72>
 800e5a8:	6863      	ldr	r3, [r4, #4]
 800e5aa:	42a2      	cmp	r2, r4
 800e5ac:	bf0c      	ite	eq
 800e5ae:	600b      	streq	r3, [r1, #0]
 800e5b0:	6053      	strne	r3, [r2, #4]
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	f000 fa6a 	bl	800ea8c <__malloc_unlock>
 800e5b8:	f104 000b 	add.w	r0, r4, #11
 800e5bc:	1d23      	adds	r3, r4, #4
 800e5be:	f020 0007 	bic.w	r0, r0, #7
 800e5c2:	1ac2      	subs	r2, r0, r3
 800e5c4:	d0cc      	beq.n	800e560 <_malloc_r+0x20>
 800e5c6:	1a1b      	subs	r3, r3, r0
 800e5c8:	50a3      	str	r3, [r4, r2]
 800e5ca:	e7c9      	b.n	800e560 <_malloc_r+0x20>
 800e5cc:	4622      	mov	r2, r4
 800e5ce:	6864      	ldr	r4, [r4, #4]
 800e5d0:	e7cc      	b.n	800e56c <_malloc_r+0x2c>
 800e5d2:	1cc4      	adds	r4, r0, #3
 800e5d4:	f024 0403 	bic.w	r4, r4, #3
 800e5d8:	42a0      	cmp	r0, r4
 800e5da:	d0e3      	beq.n	800e5a4 <_malloc_r+0x64>
 800e5dc:	1a21      	subs	r1, r4, r0
 800e5de:	4630      	mov	r0, r6
 800e5e0:	f000 f962 	bl	800e8a8 <_sbrk_r>
 800e5e4:	3001      	adds	r0, #1
 800e5e6:	d1dd      	bne.n	800e5a4 <_malloc_r+0x64>
 800e5e8:	e7cf      	b.n	800e58a <_malloc_r+0x4a>
 800e5ea:	bf00      	nop
 800e5ec:	20000b58 	.word	0x20000b58
 800e5f0:	20000b5c 	.word	0x20000b5c

0800e5f4 <__sfputc_r>:
 800e5f4:	6893      	ldr	r3, [r2, #8]
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	b410      	push	{r4}
 800e5fc:	6093      	str	r3, [r2, #8]
 800e5fe:	da08      	bge.n	800e612 <__sfputc_r+0x1e>
 800e600:	6994      	ldr	r4, [r2, #24]
 800e602:	42a3      	cmp	r3, r4
 800e604:	db01      	blt.n	800e60a <__sfputc_r+0x16>
 800e606:	290a      	cmp	r1, #10
 800e608:	d103      	bne.n	800e612 <__sfputc_r+0x1e>
 800e60a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e60e:	f7fe ba45 	b.w	800ca9c <__swbuf_r>
 800e612:	6813      	ldr	r3, [r2, #0]
 800e614:	1c58      	adds	r0, r3, #1
 800e616:	6010      	str	r0, [r2, #0]
 800e618:	7019      	strb	r1, [r3, #0]
 800e61a:	4608      	mov	r0, r1
 800e61c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e620:	4770      	bx	lr

0800e622 <__sfputs_r>:
 800e622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e624:	4606      	mov	r6, r0
 800e626:	460f      	mov	r7, r1
 800e628:	4614      	mov	r4, r2
 800e62a:	18d5      	adds	r5, r2, r3
 800e62c:	42ac      	cmp	r4, r5
 800e62e:	d101      	bne.n	800e634 <__sfputs_r+0x12>
 800e630:	2000      	movs	r0, #0
 800e632:	e007      	b.n	800e644 <__sfputs_r+0x22>
 800e634:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e638:	463a      	mov	r2, r7
 800e63a:	4630      	mov	r0, r6
 800e63c:	f7ff ffda 	bl	800e5f4 <__sfputc_r>
 800e640:	1c43      	adds	r3, r0, #1
 800e642:	d1f3      	bne.n	800e62c <__sfputs_r+0xa>
 800e644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e648 <_vfiprintf_r>:
 800e648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e64c:	460d      	mov	r5, r1
 800e64e:	b09d      	sub	sp, #116	; 0x74
 800e650:	4614      	mov	r4, r2
 800e652:	4698      	mov	r8, r3
 800e654:	4606      	mov	r6, r0
 800e656:	b118      	cbz	r0, 800e660 <_vfiprintf_r+0x18>
 800e658:	6983      	ldr	r3, [r0, #24]
 800e65a:	b90b      	cbnz	r3, 800e660 <_vfiprintf_r+0x18>
 800e65c:	f7ff fa72 	bl	800db44 <__sinit>
 800e660:	4b89      	ldr	r3, [pc, #548]	; (800e888 <_vfiprintf_r+0x240>)
 800e662:	429d      	cmp	r5, r3
 800e664:	d11b      	bne.n	800e69e <_vfiprintf_r+0x56>
 800e666:	6875      	ldr	r5, [r6, #4]
 800e668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e66a:	07d9      	lsls	r1, r3, #31
 800e66c:	d405      	bmi.n	800e67a <_vfiprintf_r+0x32>
 800e66e:	89ab      	ldrh	r3, [r5, #12]
 800e670:	059a      	lsls	r2, r3, #22
 800e672:	d402      	bmi.n	800e67a <_vfiprintf_r+0x32>
 800e674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e676:	f7ff fb08 	bl	800dc8a <__retarget_lock_acquire_recursive>
 800e67a:	89ab      	ldrh	r3, [r5, #12]
 800e67c:	071b      	lsls	r3, r3, #28
 800e67e:	d501      	bpl.n	800e684 <_vfiprintf_r+0x3c>
 800e680:	692b      	ldr	r3, [r5, #16]
 800e682:	b9eb      	cbnz	r3, 800e6c0 <_vfiprintf_r+0x78>
 800e684:	4629      	mov	r1, r5
 800e686:	4630      	mov	r0, r6
 800e688:	f7fe fa5a 	bl	800cb40 <__swsetup_r>
 800e68c:	b1c0      	cbz	r0, 800e6c0 <_vfiprintf_r+0x78>
 800e68e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e690:	07dc      	lsls	r4, r3, #31
 800e692:	d50e      	bpl.n	800e6b2 <_vfiprintf_r+0x6a>
 800e694:	f04f 30ff 	mov.w	r0, #4294967295
 800e698:	b01d      	add	sp, #116	; 0x74
 800e69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e69e:	4b7b      	ldr	r3, [pc, #492]	; (800e88c <_vfiprintf_r+0x244>)
 800e6a0:	429d      	cmp	r5, r3
 800e6a2:	d101      	bne.n	800e6a8 <_vfiprintf_r+0x60>
 800e6a4:	68b5      	ldr	r5, [r6, #8]
 800e6a6:	e7df      	b.n	800e668 <_vfiprintf_r+0x20>
 800e6a8:	4b79      	ldr	r3, [pc, #484]	; (800e890 <_vfiprintf_r+0x248>)
 800e6aa:	429d      	cmp	r5, r3
 800e6ac:	bf08      	it	eq
 800e6ae:	68f5      	ldreq	r5, [r6, #12]
 800e6b0:	e7da      	b.n	800e668 <_vfiprintf_r+0x20>
 800e6b2:	89ab      	ldrh	r3, [r5, #12]
 800e6b4:	0598      	lsls	r0, r3, #22
 800e6b6:	d4ed      	bmi.n	800e694 <_vfiprintf_r+0x4c>
 800e6b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6ba:	f7ff fae7 	bl	800dc8c <__retarget_lock_release_recursive>
 800e6be:	e7e9      	b.n	800e694 <_vfiprintf_r+0x4c>
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	9309      	str	r3, [sp, #36]	; 0x24
 800e6c4:	2320      	movs	r3, #32
 800e6c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6ce:	2330      	movs	r3, #48	; 0x30
 800e6d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e894 <_vfiprintf_r+0x24c>
 800e6d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6d8:	f04f 0901 	mov.w	r9, #1
 800e6dc:	4623      	mov	r3, r4
 800e6de:	469a      	mov	sl, r3
 800e6e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6e4:	b10a      	cbz	r2, 800e6ea <_vfiprintf_r+0xa2>
 800e6e6:	2a25      	cmp	r2, #37	; 0x25
 800e6e8:	d1f9      	bne.n	800e6de <_vfiprintf_r+0x96>
 800e6ea:	ebba 0b04 	subs.w	fp, sl, r4
 800e6ee:	d00b      	beq.n	800e708 <_vfiprintf_r+0xc0>
 800e6f0:	465b      	mov	r3, fp
 800e6f2:	4622      	mov	r2, r4
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	f7ff ff93 	bl	800e622 <__sfputs_r>
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	f000 80aa 	beq.w	800e856 <_vfiprintf_r+0x20e>
 800e702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e704:	445a      	add	r2, fp
 800e706:	9209      	str	r2, [sp, #36]	; 0x24
 800e708:	f89a 3000 	ldrb.w	r3, [sl]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f000 80a2 	beq.w	800e856 <_vfiprintf_r+0x20e>
 800e712:	2300      	movs	r3, #0
 800e714:	f04f 32ff 	mov.w	r2, #4294967295
 800e718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e71c:	f10a 0a01 	add.w	sl, sl, #1
 800e720:	9304      	str	r3, [sp, #16]
 800e722:	9307      	str	r3, [sp, #28]
 800e724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e728:	931a      	str	r3, [sp, #104]	; 0x68
 800e72a:	4654      	mov	r4, sl
 800e72c:	2205      	movs	r2, #5
 800e72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e732:	4858      	ldr	r0, [pc, #352]	; (800e894 <_vfiprintf_r+0x24c>)
 800e734:	f7f1 fd5c 	bl	80001f0 <memchr>
 800e738:	9a04      	ldr	r2, [sp, #16]
 800e73a:	b9d8      	cbnz	r0, 800e774 <_vfiprintf_r+0x12c>
 800e73c:	06d1      	lsls	r1, r2, #27
 800e73e:	bf44      	itt	mi
 800e740:	2320      	movmi	r3, #32
 800e742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e746:	0713      	lsls	r3, r2, #28
 800e748:	bf44      	itt	mi
 800e74a:	232b      	movmi	r3, #43	; 0x2b
 800e74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e750:	f89a 3000 	ldrb.w	r3, [sl]
 800e754:	2b2a      	cmp	r3, #42	; 0x2a
 800e756:	d015      	beq.n	800e784 <_vfiprintf_r+0x13c>
 800e758:	9a07      	ldr	r2, [sp, #28]
 800e75a:	4654      	mov	r4, sl
 800e75c:	2000      	movs	r0, #0
 800e75e:	f04f 0c0a 	mov.w	ip, #10
 800e762:	4621      	mov	r1, r4
 800e764:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e768:	3b30      	subs	r3, #48	; 0x30
 800e76a:	2b09      	cmp	r3, #9
 800e76c:	d94e      	bls.n	800e80c <_vfiprintf_r+0x1c4>
 800e76e:	b1b0      	cbz	r0, 800e79e <_vfiprintf_r+0x156>
 800e770:	9207      	str	r2, [sp, #28]
 800e772:	e014      	b.n	800e79e <_vfiprintf_r+0x156>
 800e774:	eba0 0308 	sub.w	r3, r0, r8
 800e778:	fa09 f303 	lsl.w	r3, r9, r3
 800e77c:	4313      	orrs	r3, r2
 800e77e:	9304      	str	r3, [sp, #16]
 800e780:	46a2      	mov	sl, r4
 800e782:	e7d2      	b.n	800e72a <_vfiprintf_r+0xe2>
 800e784:	9b03      	ldr	r3, [sp, #12]
 800e786:	1d19      	adds	r1, r3, #4
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	9103      	str	r1, [sp, #12]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	bfbb      	ittet	lt
 800e790:	425b      	neglt	r3, r3
 800e792:	f042 0202 	orrlt.w	r2, r2, #2
 800e796:	9307      	strge	r3, [sp, #28]
 800e798:	9307      	strlt	r3, [sp, #28]
 800e79a:	bfb8      	it	lt
 800e79c:	9204      	strlt	r2, [sp, #16]
 800e79e:	7823      	ldrb	r3, [r4, #0]
 800e7a0:	2b2e      	cmp	r3, #46	; 0x2e
 800e7a2:	d10c      	bne.n	800e7be <_vfiprintf_r+0x176>
 800e7a4:	7863      	ldrb	r3, [r4, #1]
 800e7a6:	2b2a      	cmp	r3, #42	; 0x2a
 800e7a8:	d135      	bne.n	800e816 <_vfiprintf_r+0x1ce>
 800e7aa:	9b03      	ldr	r3, [sp, #12]
 800e7ac:	1d1a      	adds	r2, r3, #4
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	9203      	str	r2, [sp, #12]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	bfb8      	it	lt
 800e7b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e7ba:	3402      	adds	r4, #2
 800e7bc:	9305      	str	r3, [sp, #20]
 800e7be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e8a4 <_vfiprintf_r+0x25c>
 800e7c2:	7821      	ldrb	r1, [r4, #0]
 800e7c4:	2203      	movs	r2, #3
 800e7c6:	4650      	mov	r0, sl
 800e7c8:	f7f1 fd12 	bl	80001f0 <memchr>
 800e7cc:	b140      	cbz	r0, 800e7e0 <_vfiprintf_r+0x198>
 800e7ce:	2340      	movs	r3, #64	; 0x40
 800e7d0:	eba0 000a 	sub.w	r0, r0, sl
 800e7d4:	fa03 f000 	lsl.w	r0, r3, r0
 800e7d8:	9b04      	ldr	r3, [sp, #16]
 800e7da:	4303      	orrs	r3, r0
 800e7dc:	3401      	adds	r4, #1
 800e7de:	9304      	str	r3, [sp, #16]
 800e7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7e4:	482c      	ldr	r0, [pc, #176]	; (800e898 <_vfiprintf_r+0x250>)
 800e7e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7ea:	2206      	movs	r2, #6
 800e7ec:	f7f1 fd00 	bl	80001f0 <memchr>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	d03f      	beq.n	800e874 <_vfiprintf_r+0x22c>
 800e7f4:	4b29      	ldr	r3, [pc, #164]	; (800e89c <_vfiprintf_r+0x254>)
 800e7f6:	bb1b      	cbnz	r3, 800e840 <_vfiprintf_r+0x1f8>
 800e7f8:	9b03      	ldr	r3, [sp, #12]
 800e7fa:	3307      	adds	r3, #7
 800e7fc:	f023 0307 	bic.w	r3, r3, #7
 800e800:	3308      	adds	r3, #8
 800e802:	9303      	str	r3, [sp, #12]
 800e804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e806:	443b      	add	r3, r7
 800e808:	9309      	str	r3, [sp, #36]	; 0x24
 800e80a:	e767      	b.n	800e6dc <_vfiprintf_r+0x94>
 800e80c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e810:	460c      	mov	r4, r1
 800e812:	2001      	movs	r0, #1
 800e814:	e7a5      	b.n	800e762 <_vfiprintf_r+0x11a>
 800e816:	2300      	movs	r3, #0
 800e818:	3401      	adds	r4, #1
 800e81a:	9305      	str	r3, [sp, #20]
 800e81c:	4619      	mov	r1, r3
 800e81e:	f04f 0c0a 	mov.w	ip, #10
 800e822:	4620      	mov	r0, r4
 800e824:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e828:	3a30      	subs	r2, #48	; 0x30
 800e82a:	2a09      	cmp	r2, #9
 800e82c:	d903      	bls.n	800e836 <_vfiprintf_r+0x1ee>
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d0c5      	beq.n	800e7be <_vfiprintf_r+0x176>
 800e832:	9105      	str	r1, [sp, #20]
 800e834:	e7c3      	b.n	800e7be <_vfiprintf_r+0x176>
 800e836:	fb0c 2101 	mla	r1, ip, r1, r2
 800e83a:	4604      	mov	r4, r0
 800e83c:	2301      	movs	r3, #1
 800e83e:	e7f0      	b.n	800e822 <_vfiprintf_r+0x1da>
 800e840:	ab03      	add	r3, sp, #12
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	462a      	mov	r2, r5
 800e846:	4b16      	ldr	r3, [pc, #88]	; (800e8a0 <_vfiprintf_r+0x258>)
 800e848:	a904      	add	r1, sp, #16
 800e84a:	4630      	mov	r0, r6
 800e84c:	f7fd fcce 	bl	800c1ec <_printf_float>
 800e850:	4607      	mov	r7, r0
 800e852:	1c78      	adds	r0, r7, #1
 800e854:	d1d6      	bne.n	800e804 <_vfiprintf_r+0x1bc>
 800e856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e858:	07d9      	lsls	r1, r3, #31
 800e85a:	d405      	bmi.n	800e868 <_vfiprintf_r+0x220>
 800e85c:	89ab      	ldrh	r3, [r5, #12]
 800e85e:	059a      	lsls	r2, r3, #22
 800e860:	d402      	bmi.n	800e868 <_vfiprintf_r+0x220>
 800e862:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e864:	f7ff fa12 	bl	800dc8c <__retarget_lock_release_recursive>
 800e868:	89ab      	ldrh	r3, [r5, #12]
 800e86a:	065b      	lsls	r3, r3, #25
 800e86c:	f53f af12 	bmi.w	800e694 <_vfiprintf_r+0x4c>
 800e870:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e872:	e711      	b.n	800e698 <_vfiprintf_r+0x50>
 800e874:	ab03      	add	r3, sp, #12
 800e876:	9300      	str	r3, [sp, #0]
 800e878:	462a      	mov	r2, r5
 800e87a:	4b09      	ldr	r3, [pc, #36]	; (800e8a0 <_vfiprintf_r+0x258>)
 800e87c:	a904      	add	r1, sp, #16
 800e87e:	4630      	mov	r0, r6
 800e880:	f7fd ff58 	bl	800c734 <_printf_i>
 800e884:	e7e4      	b.n	800e850 <_vfiprintf_r+0x208>
 800e886:	bf00      	nop
 800e888:	0800f1e8 	.word	0x0800f1e8
 800e88c:	0800f208 	.word	0x0800f208
 800e890:	0800f1c8 	.word	0x0800f1c8
 800e894:	0800f384 	.word	0x0800f384
 800e898:	0800f38e 	.word	0x0800f38e
 800e89c:	0800c1ed 	.word	0x0800c1ed
 800e8a0:	0800e623 	.word	0x0800e623
 800e8a4:	0800f38a 	.word	0x0800f38a

0800e8a8 <_sbrk_r>:
 800e8a8:	b538      	push	{r3, r4, r5, lr}
 800e8aa:	4d06      	ldr	r5, [pc, #24]	; (800e8c4 <_sbrk_r+0x1c>)
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	4608      	mov	r0, r1
 800e8b2:	602b      	str	r3, [r5, #0]
 800e8b4:	f7f3 f872 	bl	800199c <_sbrk>
 800e8b8:	1c43      	adds	r3, r0, #1
 800e8ba:	d102      	bne.n	800e8c2 <_sbrk_r+0x1a>
 800e8bc:	682b      	ldr	r3, [r5, #0]
 800e8be:	b103      	cbz	r3, 800e8c2 <_sbrk_r+0x1a>
 800e8c0:	6023      	str	r3, [r4, #0]
 800e8c2:	bd38      	pop	{r3, r4, r5, pc}
 800e8c4:	200012b4 	.word	0x200012b4

0800e8c8 <__sread>:
 800e8c8:	b510      	push	{r4, lr}
 800e8ca:	460c      	mov	r4, r1
 800e8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8d0:	f000 f8e2 	bl	800ea98 <_read_r>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	bfab      	itete	ge
 800e8d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e8da:	89a3      	ldrhlt	r3, [r4, #12]
 800e8dc:	181b      	addge	r3, r3, r0
 800e8de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e8e2:	bfac      	ite	ge
 800e8e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e8e6:	81a3      	strhlt	r3, [r4, #12]
 800e8e8:	bd10      	pop	{r4, pc}

0800e8ea <__swrite>:
 800e8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ee:	461f      	mov	r7, r3
 800e8f0:	898b      	ldrh	r3, [r1, #12]
 800e8f2:	05db      	lsls	r3, r3, #23
 800e8f4:	4605      	mov	r5, r0
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	4616      	mov	r6, r2
 800e8fa:	d505      	bpl.n	800e908 <__swrite+0x1e>
 800e8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e900:	2302      	movs	r3, #2
 800e902:	2200      	movs	r2, #0
 800e904:	f000 f898 	bl	800ea38 <_lseek_r>
 800e908:	89a3      	ldrh	r3, [r4, #12]
 800e90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e90e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e912:	81a3      	strh	r3, [r4, #12]
 800e914:	4632      	mov	r2, r6
 800e916:	463b      	mov	r3, r7
 800e918:	4628      	mov	r0, r5
 800e91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e91e:	f000 b817 	b.w	800e950 <_write_r>

0800e922 <__sseek>:
 800e922:	b510      	push	{r4, lr}
 800e924:	460c      	mov	r4, r1
 800e926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e92a:	f000 f885 	bl	800ea38 <_lseek_r>
 800e92e:	1c43      	adds	r3, r0, #1
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	bf15      	itete	ne
 800e934:	6560      	strne	r0, [r4, #84]	; 0x54
 800e936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e93a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e93e:	81a3      	strheq	r3, [r4, #12]
 800e940:	bf18      	it	ne
 800e942:	81a3      	strhne	r3, [r4, #12]
 800e944:	bd10      	pop	{r4, pc}

0800e946 <__sclose>:
 800e946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e94a:	f000 b831 	b.w	800e9b0 <_close_r>
	...

0800e950 <_write_r>:
 800e950:	b538      	push	{r3, r4, r5, lr}
 800e952:	4d07      	ldr	r5, [pc, #28]	; (800e970 <_write_r+0x20>)
 800e954:	4604      	mov	r4, r0
 800e956:	4608      	mov	r0, r1
 800e958:	4611      	mov	r1, r2
 800e95a:	2200      	movs	r2, #0
 800e95c:	602a      	str	r2, [r5, #0]
 800e95e:	461a      	mov	r2, r3
 800e960:	f7f2 ffcb 	bl	80018fa <_write>
 800e964:	1c43      	adds	r3, r0, #1
 800e966:	d102      	bne.n	800e96e <_write_r+0x1e>
 800e968:	682b      	ldr	r3, [r5, #0]
 800e96a:	b103      	cbz	r3, 800e96e <_write_r+0x1e>
 800e96c:	6023      	str	r3, [r4, #0]
 800e96e:	bd38      	pop	{r3, r4, r5, pc}
 800e970:	200012b4 	.word	0x200012b4

0800e974 <__assert_func>:
 800e974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e976:	4614      	mov	r4, r2
 800e978:	461a      	mov	r2, r3
 800e97a:	4b09      	ldr	r3, [pc, #36]	; (800e9a0 <__assert_func+0x2c>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4605      	mov	r5, r0
 800e980:	68d8      	ldr	r0, [r3, #12]
 800e982:	b14c      	cbz	r4, 800e998 <__assert_func+0x24>
 800e984:	4b07      	ldr	r3, [pc, #28]	; (800e9a4 <__assert_func+0x30>)
 800e986:	9100      	str	r1, [sp, #0]
 800e988:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e98c:	4906      	ldr	r1, [pc, #24]	; (800e9a8 <__assert_func+0x34>)
 800e98e:	462b      	mov	r3, r5
 800e990:	f000 f81e 	bl	800e9d0 <fiprintf>
 800e994:	f000 f89f 	bl	800ead6 <abort>
 800e998:	4b04      	ldr	r3, [pc, #16]	; (800e9ac <__assert_func+0x38>)
 800e99a:	461c      	mov	r4, r3
 800e99c:	e7f3      	b.n	800e986 <__assert_func+0x12>
 800e99e:	bf00      	nop
 800e9a0:	2000001c 	.word	0x2000001c
 800e9a4:	0800f395 	.word	0x0800f395
 800e9a8:	0800f3a2 	.word	0x0800f3a2
 800e9ac:	0800f3d0 	.word	0x0800f3d0

0800e9b0 <_close_r>:
 800e9b0:	b538      	push	{r3, r4, r5, lr}
 800e9b2:	4d06      	ldr	r5, [pc, #24]	; (800e9cc <_close_r+0x1c>)
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	4608      	mov	r0, r1
 800e9ba:	602b      	str	r3, [r5, #0]
 800e9bc:	f7f2 ffb9 	bl	8001932 <_close>
 800e9c0:	1c43      	adds	r3, r0, #1
 800e9c2:	d102      	bne.n	800e9ca <_close_r+0x1a>
 800e9c4:	682b      	ldr	r3, [r5, #0]
 800e9c6:	b103      	cbz	r3, 800e9ca <_close_r+0x1a>
 800e9c8:	6023      	str	r3, [r4, #0]
 800e9ca:	bd38      	pop	{r3, r4, r5, pc}
 800e9cc:	200012b4 	.word	0x200012b4

0800e9d0 <fiprintf>:
 800e9d0:	b40e      	push	{r1, r2, r3}
 800e9d2:	b503      	push	{r0, r1, lr}
 800e9d4:	4601      	mov	r1, r0
 800e9d6:	ab03      	add	r3, sp, #12
 800e9d8:	4805      	ldr	r0, [pc, #20]	; (800e9f0 <fiprintf+0x20>)
 800e9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9de:	6800      	ldr	r0, [r0, #0]
 800e9e0:	9301      	str	r3, [sp, #4]
 800e9e2:	f7ff fe31 	bl	800e648 <_vfiprintf_r>
 800e9e6:	b002      	add	sp, #8
 800e9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9ec:	b003      	add	sp, #12
 800e9ee:	4770      	bx	lr
 800e9f0:	2000001c 	.word	0x2000001c

0800e9f4 <_fstat_r>:
 800e9f4:	b538      	push	{r3, r4, r5, lr}
 800e9f6:	4d07      	ldr	r5, [pc, #28]	; (800ea14 <_fstat_r+0x20>)
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	4604      	mov	r4, r0
 800e9fc:	4608      	mov	r0, r1
 800e9fe:	4611      	mov	r1, r2
 800ea00:	602b      	str	r3, [r5, #0]
 800ea02:	f7f2 ffa2 	bl	800194a <_fstat>
 800ea06:	1c43      	adds	r3, r0, #1
 800ea08:	d102      	bne.n	800ea10 <_fstat_r+0x1c>
 800ea0a:	682b      	ldr	r3, [r5, #0]
 800ea0c:	b103      	cbz	r3, 800ea10 <_fstat_r+0x1c>
 800ea0e:	6023      	str	r3, [r4, #0]
 800ea10:	bd38      	pop	{r3, r4, r5, pc}
 800ea12:	bf00      	nop
 800ea14:	200012b4 	.word	0x200012b4

0800ea18 <_isatty_r>:
 800ea18:	b538      	push	{r3, r4, r5, lr}
 800ea1a:	4d06      	ldr	r5, [pc, #24]	; (800ea34 <_isatty_r+0x1c>)
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	4604      	mov	r4, r0
 800ea20:	4608      	mov	r0, r1
 800ea22:	602b      	str	r3, [r5, #0]
 800ea24:	f7f2 ffa1 	bl	800196a <_isatty>
 800ea28:	1c43      	adds	r3, r0, #1
 800ea2a:	d102      	bne.n	800ea32 <_isatty_r+0x1a>
 800ea2c:	682b      	ldr	r3, [r5, #0]
 800ea2e:	b103      	cbz	r3, 800ea32 <_isatty_r+0x1a>
 800ea30:	6023      	str	r3, [r4, #0]
 800ea32:	bd38      	pop	{r3, r4, r5, pc}
 800ea34:	200012b4 	.word	0x200012b4

0800ea38 <_lseek_r>:
 800ea38:	b538      	push	{r3, r4, r5, lr}
 800ea3a:	4d07      	ldr	r5, [pc, #28]	; (800ea58 <_lseek_r+0x20>)
 800ea3c:	4604      	mov	r4, r0
 800ea3e:	4608      	mov	r0, r1
 800ea40:	4611      	mov	r1, r2
 800ea42:	2200      	movs	r2, #0
 800ea44:	602a      	str	r2, [r5, #0]
 800ea46:	461a      	mov	r2, r3
 800ea48:	f7f2 ff9a 	bl	8001980 <_lseek>
 800ea4c:	1c43      	adds	r3, r0, #1
 800ea4e:	d102      	bne.n	800ea56 <_lseek_r+0x1e>
 800ea50:	682b      	ldr	r3, [r5, #0]
 800ea52:	b103      	cbz	r3, 800ea56 <_lseek_r+0x1e>
 800ea54:	6023      	str	r3, [r4, #0]
 800ea56:	bd38      	pop	{r3, r4, r5, pc}
 800ea58:	200012b4 	.word	0x200012b4

0800ea5c <__ascii_mbtowc>:
 800ea5c:	b082      	sub	sp, #8
 800ea5e:	b901      	cbnz	r1, 800ea62 <__ascii_mbtowc+0x6>
 800ea60:	a901      	add	r1, sp, #4
 800ea62:	b142      	cbz	r2, 800ea76 <__ascii_mbtowc+0x1a>
 800ea64:	b14b      	cbz	r3, 800ea7a <__ascii_mbtowc+0x1e>
 800ea66:	7813      	ldrb	r3, [r2, #0]
 800ea68:	600b      	str	r3, [r1, #0]
 800ea6a:	7812      	ldrb	r2, [r2, #0]
 800ea6c:	1e10      	subs	r0, r2, #0
 800ea6e:	bf18      	it	ne
 800ea70:	2001      	movne	r0, #1
 800ea72:	b002      	add	sp, #8
 800ea74:	4770      	bx	lr
 800ea76:	4610      	mov	r0, r2
 800ea78:	e7fb      	b.n	800ea72 <__ascii_mbtowc+0x16>
 800ea7a:	f06f 0001 	mvn.w	r0, #1
 800ea7e:	e7f8      	b.n	800ea72 <__ascii_mbtowc+0x16>

0800ea80 <__malloc_lock>:
 800ea80:	4801      	ldr	r0, [pc, #4]	; (800ea88 <__malloc_lock+0x8>)
 800ea82:	f7ff b902 	b.w	800dc8a <__retarget_lock_acquire_recursive>
 800ea86:	bf00      	nop
 800ea88:	200012ac 	.word	0x200012ac

0800ea8c <__malloc_unlock>:
 800ea8c:	4801      	ldr	r0, [pc, #4]	; (800ea94 <__malloc_unlock+0x8>)
 800ea8e:	f7ff b8fd 	b.w	800dc8c <__retarget_lock_release_recursive>
 800ea92:	bf00      	nop
 800ea94:	200012ac 	.word	0x200012ac

0800ea98 <_read_r>:
 800ea98:	b538      	push	{r3, r4, r5, lr}
 800ea9a:	4d07      	ldr	r5, [pc, #28]	; (800eab8 <_read_r+0x20>)
 800ea9c:	4604      	mov	r4, r0
 800ea9e:	4608      	mov	r0, r1
 800eaa0:	4611      	mov	r1, r2
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	602a      	str	r2, [r5, #0]
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	f7f2 ff0a 	bl	80018c0 <_read>
 800eaac:	1c43      	adds	r3, r0, #1
 800eaae:	d102      	bne.n	800eab6 <_read_r+0x1e>
 800eab0:	682b      	ldr	r3, [r5, #0]
 800eab2:	b103      	cbz	r3, 800eab6 <_read_r+0x1e>
 800eab4:	6023      	str	r3, [r4, #0]
 800eab6:	bd38      	pop	{r3, r4, r5, pc}
 800eab8:	200012b4 	.word	0x200012b4

0800eabc <__ascii_wctomb>:
 800eabc:	b149      	cbz	r1, 800ead2 <__ascii_wctomb+0x16>
 800eabe:	2aff      	cmp	r2, #255	; 0xff
 800eac0:	bf85      	ittet	hi
 800eac2:	238a      	movhi	r3, #138	; 0x8a
 800eac4:	6003      	strhi	r3, [r0, #0]
 800eac6:	700a      	strbls	r2, [r1, #0]
 800eac8:	f04f 30ff 	movhi.w	r0, #4294967295
 800eacc:	bf98      	it	ls
 800eace:	2001      	movls	r0, #1
 800ead0:	4770      	bx	lr
 800ead2:	4608      	mov	r0, r1
 800ead4:	4770      	bx	lr

0800ead6 <abort>:
 800ead6:	b508      	push	{r3, lr}
 800ead8:	2006      	movs	r0, #6
 800eada:	f000 f82b 	bl	800eb34 <raise>
 800eade:	2001      	movs	r0, #1
 800eae0:	f7f2 fee4 	bl	80018ac <_exit>

0800eae4 <_raise_r>:
 800eae4:	291f      	cmp	r1, #31
 800eae6:	b538      	push	{r3, r4, r5, lr}
 800eae8:	4604      	mov	r4, r0
 800eaea:	460d      	mov	r5, r1
 800eaec:	d904      	bls.n	800eaf8 <_raise_r+0x14>
 800eaee:	2316      	movs	r3, #22
 800eaf0:	6003      	str	r3, [r0, #0]
 800eaf2:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf6:	bd38      	pop	{r3, r4, r5, pc}
 800eaf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eafa:	b112      	cbz	r2, 800eb02 <_raise_r+0x1e>
 800eafc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb00:	b94b      	cbnz	r3, 800eb16 <_raise_r+0x32>
 800eb02:	4620      	mov	r0, r4
 800eb04:	f000 f830 	bl	800eb68 <_getpid_r>
 800eb08:	462a      	mov	r2, r5
 800eb0a:	4601      	mov	r1, r0
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb12:	f000 b817 	b.w	800eb44 <_kill_r>
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d00a      	beq.n	800eb30 <_raise_r+0x4c>
 800eb1a:	1c59      	adds	r1, r3, #1
 800eb1c:	d103      	bne.n	800eb26 <_raise_r+0x42>
 800eb1e:	2316      	movs	r3, #22
 800eb20:	6003      	str	r3, [r0, #0]
 800eb22:	2001      	movs	r0, #1
 800eb24:	e7e7      	b.n	800eaf6 <_raise_r+0x12>
 800eb26:	2400      	movs	r4, #0
 800eb28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	4798      	blx	r3
 800eb30:	2000      	movs	r0, #0
 800eb32:	e7e0      	b.n	800eaf6 <_raise_r+0x12>

0800eb34 <raise>:
 800eb34:	4b02      	ldr	r3, [pc, #8]	; (800eb40 <raise+0xc>)
 800eb36:	4601      	mov	r1, r0
 800eb38:	6818      	ldr	r0, [r3, #0]
 800eb3a:	f7ff bfd3 	b.w	800eae4 <_raise_r>
 800eb3e:	bf00      	nop
 800eb40:	2000001c 	.word	0x2000001c

0800eb44 <_kill_r>:
 800eb44:	b538      	push	{r3, r4, r5, lr}
 800eb46:	4d07      	ldr	r5, [pc, #28]	; (800eb64 <_kill_r+0x20>)
 800eb48:	2300      	movs	r3, #0
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	4608      	mov	r0, r1
 800eb4e:	4611      	mov	r1, r2
 800eb50:	602b      	str	r3, [r5, #0]
 800eb52:	f7f2 fe9b 	bl	800188c <_kill>
 800eb56:	1c43      	adds	r3, r0, #1
 800eb58:	d102      	bne.n	800eb60 <_kill_r+0x1c>
 800eb5a:	682b      	ldr	r3, [r5, #0]
 800eb5c:	b103      	cbz	r3, 800eb60 <_kill_r+0x1c>
 800eb5e:	6023      	str	r3, [r4, #0]
 800eb60:	bd38      	pop	{r3, r4, r5, pc}
 800eb62:	bf00      	nop
 800eb64:	200012b4 	.word	0x200012b4

0800eb68 <_getpid_r>:
 800eb68:	f7f2 be88 	b.w	800187c <_getpid>

0800eb6c <_init>:
 800eb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb6e:	bf00      	nop
 800eb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb72:	bc08      	pop	{r3}
 800eb74:	469e      	mov	lr, r3
 800eb76:	4770      	bx	lr

0800eb78 <_fini>:
 800eb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb7a:	bf00      	nop
 800eb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb7e:	bc08      	pop	{r3}
 800eb80:	469e      	mov	lr, r3
 800eb82:	4770      	bx	lr
